
RegulatorTemperatury.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009458  08009458  00019458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009864  08009864  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800986c  0800986c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001f4  08009a68  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08009a68  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c20  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3f  00000000  00000000  00035e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00038a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00039b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a78  00000000  00000000  0003aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015035  00000000  00000000  00053550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fcb  00000000  00000000  00068585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  000fb5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800943c 	.word	0x0800943c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800943c 	.word	0x0800943c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <BMP280_Read8+0x38>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	230a      	movs	r3, #10
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 030f 	add.w	r3, r7, #15
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	21ec      	movs	r1, #236	; 0xec
 8000f78:	f002 f944 	bl	8003204 <HAL_I2C_Mem_Read>
  return tmp;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000238 	.word	0x20000238

08000f8c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <BMP280_Read16+0x40>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	21ec      	movs	r1, #236	; 0xec
 8000fb0:	f002 f928 	bl	8003204 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fb4:	7b3b      	ldrb	r3, [r7, #12]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000238 	.word	0x20000238

08000fd0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffd5 	bl	8000f8c <BMP280_Read16>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af04      	add	r7, sp, #16
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <BMP280_Write8+0x34>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	21ec      	movs	r1, #236	; 0xec
 800102c:	f001 fff0 	bl	8003010 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000238 	.word	0x20000238

0800103c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <BMP280_Read24+0x40>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	b29a      	uxth	r2, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2303      	movs	r3, #3
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	21ec      	movs	r1, #236	; 0xec
 8001060:	f002 f8d0 	bl	8003204 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	041a      	lsls	r2, r3, #16
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4313      	orrs	r3, r2
 800106e:	7bba      	ldrb	r2, [r7, #14]
 8001070:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000238 	.word	0x20000238

08001080 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	460b      	mov	r3, r1
 8001094:	70bb      	strb	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800109a:	4a48      	ldr	r2, [pc, #288]	; (80011bc <BMP280_Init+0x13c>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d901      	bls.n	80010aa <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010a6:	2303      	movs	r3, #3
 80010a8:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010aa:	4a45      	ldr	r2, [pc, #276]	; (80011c0 <BMP280_Init+0x140>)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d901      	bls.n	80010c4 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010c0:	2305      	movs	r3, #5
 80010c2:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010c4:	4a3f      	ldr	r2, [pc, #252]	; (80011c4 <BMP280_Init+0x144>)
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d901      	bls.n	80010d4 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80010d0:	2305      	movs	r3, #5
 80010d2:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80010d4:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <BMP280_Init+0x148>)
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80010da:	bf00      	nop
 80010dc:	20d0      	movs	r0, #208	; 0xd0
 80010de:	f7ff ff37 	bl	8000f50 <BMP280_Read8>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b58      	cmp	r3, #88	; 0x58
 80010e6:	d1f9      	bne.n	80010dc <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80010e8:	2088      	movs	r0, #136	; 0x88
 80010ea:	f7ff ff71 	bl	8000fd0 <BMP280_Read16LE>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <BMP280_Init+0x14c>)
 80010f4:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80010f6:	208a      	movs	r0, #138	; 0x8a
 80010f8:	f7ff ff6a 	bl	8000fd0 <BMP280_Read16LE>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <BMP280_Init+0x150>)
 8001102:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001104:	208c      	movs	r0, #140	; 0x8c
 8001106:	f7ff ff63 	bl	8000fd0 <BMP280_Read16LE>
 800110a:	4603      	mov	r3, r0
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <BMP280_Init+0x154>)
 8001110:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001112:	208e      	movs	r0, #142	; 0x8e
 8001114:	f7ff ff5c 	bl	8000fd0 <BMP280_Read16LE>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <BMP280_Init+0x158>)
 800111e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001120:	2090      	movs	r0, #144	; 0x90
 8001122:	f7ff ff55 	bl	8000fd0 <BMP280_Read16LE>
 8001126:	4603      	mov	r3, r0
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <BMP280_Init+0x15c>)
 800112c:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800112e:	2092      	movs	r0, #146	; 0x92
 8001130:	f7ff ff4e 	bl	8000fd0 <BMP280_Read16LE>
 8001134:	4603      	mov	r3, r0
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <BMP280_Init+0x160>)
 800113a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800113c:	2094      	movs	r0, #148	; 0x94
 800113e:	f7ff ff47 	bl	8000fd0 <BMP280_Read16LE>
 8001142:	4603      	mov	r3, r0
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <BMP280_Init+0x164>)
 8001148:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800114a:	2096      	movs	r0, #150	; 0x96
 800114c:	f7ff ff40 	bl	8000fd0 <BMP280_Read16LE>
 8001150:	4603      	mov	r3, r0
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <BMP280_Init+0x168>)
 8001156:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001158:	2098      	movs	r0, #152	; 0x98
 800115a:	f7ff ff39 	bl	8000fd0 <BMP280_Read16LE>
 800115e:	4603      	mov	r3, r0
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <BMP280_Init+0x16c>)
 8001164:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001166:	209a      	movs	r0, #154	; 0x9a
 8001168:	f7ff ff32 	bl	8000fd0 <BMP280_Read16LE>
 800116c:	4603      	mov	r3, r0
 800116e:	b21a      	sxth	r2, r3
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <BMP280_Init+0x170>)
 8001172:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001174:	209c      	movs	r0, #156	; 0x9c
 8001176:	f7ff ff2b 	bl	8000fd0 <BMP280_Read16LE>
 800117a:	4603      	mov	r3, r0
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <BMP280_Init+0x174>)
 8001180:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001182:	209e      	movs	r0, #158	; 0x9e
 8001184:	f7ff ff24 	bl	8000fd0 <BMP280_Read16LE>
 8001188:	4603      	mov	r3, r0
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <BMP280_Init+0x178>)
 800118e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	b25a      	sxtb	r2, r3
 8001196:	78bb      	ldrb	r3, [r7, #2]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	20f4      	movs	r0, #244	; 0xf4
 80011ae:	f7ff ff29 	bl	8001004 <BMP280_Write8>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000238 	.word	0x20000238
 80011c0:	2000023c 	.word	0x2000023c
 80011c4:	20000234 	.word	0x20000234
 80011c8:	20000226 	.word	0x20000226
 80011cc:	20000232 	.word	0x20000232
 80011d0:	20000228 	.word	0x20000228
 80011d4:	20000220 	.word	0x20000220
 80011d8:	2000022c 	.word	0x2000022c
 80011dc:	20000222 	.word	0x20000222
 80011e0:	2000023e 	.word	0x2000023e
 80011e4:	20000242 	.word	0x20000242
 80011e8:	2000022a 	.word	0x2000022a
 80011ec:	20000230 	.word	0x20000230
 80011f0:	20000224 	.word	0x20000224
 80011f4:	2000022e 	.word	0x2000022e
 80011f8:	20000240 	.word	0x20000240

080011fc <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <BMP280_ReadTemperature+0xfc>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d16d      	bne.n	80012e6 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800120a:	20f4      	movs	r0, #244	; 0xf4
 800120c:	f7ff fea0 	bl	8000f50 <BMP280_Read8>
 8001210:	4603      	mov	r3, r0
 8001212:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	4619      	mov	r1, r3
 8001228:	20f4      	movs	r0, #244	; 0xf4
 800122a:	f7ff feeb 	bl	8001004 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800122e:	20f4      	movs	r0, #244	; 0xf4
 8001230:	f7ff fe8e 	bl	8000f50 <BMP280_Read8>
 8001234:	4603      	mov	r3, r0
 8001236:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001238:	7dbb      	ldrb	r3, [r7, #22]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001240:	7dbb      	ldrb	r3, [r7, #22]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d14f      	bne.n	80012e6 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001246:	20f4      	movs	r0, #244	; 0xf4
 8001248:	f7ff fe82 	bl	8000f50 <BMP280_Read8>
 800124c:	4603      	mov	r3, r0
 800124e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001250:	7dbb      	ldrb	r3, [r7, #22]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d000      	beq.n	8001260 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800125e:	e7f2      	b.n	8001246 <BMP280_ReadTemperature+0x4a>
				  break;
 8001260:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001262:	20fa      	movs	r0, #250	; 0xfa
 8001264:	f7ff feea 	bl	800103c <BMP280_Read24>
 8001268:	4603      	mov	r3, r0
 800126a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	111b      	asrs	r3, r3, #4
 8001270:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	10da      	asrs	r2, r3, #3
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <BMP280_ReadTemperature+0x100>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <BMP280_ReadTemperature+0x104>)
 8001280:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	12db      	asrs	r3, r3, #11
 800128a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	111b      	asrs	r3, r3, #4
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <BMP280_ReadTemperature+0x100>)
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	1112      	asrs	r2, r2, #4
 800129a:	4918      	ldr	r1, [pc, #96]	; (80012fc <BMP280_ReadTemperature+0x100>)
 800129c:	8809      	ldrh	r1, [r1, #0]
 800129e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012a4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <BMP280_ReadTemperature+0x108>)
 80012a8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012b0:	139b      	asrs	r3, r3, #14
 80012b2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <BMP280_ReadTemperature+0x10c>)
 80012bc:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <BMP280_ReadTemperature+0x10c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3380      	adds	r3, #128	; 0x80
 80012ca:	121b      	asrs	r3, r3, #8
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80012d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012dc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800130c <BMP280_ReadTemperature+0x110>
 80012e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e4:	e001      	b.n	80012ea <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80012e6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001310 <BMP280_ReadTemperature+0x114>
 80012ea:	eef0 7a47 	vmov.f32	s15, s14
}
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000023c 	.word	0x2000023c
 80012fc:	20000232 	.word	0x20000232
 8001300:	20000228 	.word	0x20000228
 8001304:	20000220 	.word	0x20000220
 8001308:	20000244 	.word	0x20000244
 800130c:	42c80000 	.word	0x42c80000
 8001310:	c2c60000 	.word	0xc2c60000

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_DMA_Init+0x3c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <MX_DMA_Init+0x3c>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_DMA_Init+0x3c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2010      	movs	r0, #16
 800133c:	f000 ffd3 	bl	80022e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001340:	2010      	movs	r0, #16
 8001342:	f000 ffec 	bl	800231e <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013e0:	f001 fcb8 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_GPIO_Init+0xd8>)
 80013fc:	f001 fb26 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001400:	2320      	movs	r3, #32
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001418:	f001 fb18 	bl	8002a4c <HAL_GPIO_Init>

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020800 	.word	0x40020800

08001430 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C1_Init+0x50>)
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <MX_I2C1_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_I2C1_Init+0x50>)
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_I2C1_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_I2C1_Init+0x50>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_I2C1_Init+0x50>)
 800146e:	f001 fc8b 	bl	8002d88 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 fa1c 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000248 	.word	0x20000248
 8001484:	40005400 	.word	0x40005400
 8001488:	000186a0 	.word	0x000186a0

0800148c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_I2C_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014da:	2304      	movs	r3, #4
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_I2C_MspInit+0x8c>)
 80014e6:	f001 fab1 	bl	8002a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40005400 	.word	0x40005400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <calculate_discrete_pid>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float32_t calculate_discrete_pid(pid_t* pid, int setPoint, float32_t measured){
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setPoint-measured;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	edd7 7a01 	vldr	s15, [r7, #4]
 800153e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001542:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid1.Kp * error;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <calculate_discrete_pid+0x108>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid1.previous_integral + (error+pid1.previous_error) ; //numerical integrator without anti-windup
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <calculate_discrete_pid+0x108>)
 800155a:	ed93 7a05 	vldr	s14, [r3, #20]
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <calculate_discrete_pid+0x108>)
 8001560:	edd3 6a04 	vldr	s13, [r3, #16]
 8001564:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a08 	vstr	s15, [r7, #32]
	pid1.previous_integral = integral;
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <calculate_discrete_pid+0x108>)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	6153      	str	r3, [r2, #20]
	I = pid1.Ki*integral*(pid1.dt/2.0);
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <calculate_discrete_pid+0x108>)
 800157c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001580:	edd7 7a08 	vldr	s15, [r7, #32]
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	ee17 0a90 	vmov	r0, s15
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <calculate_discrete_pid+0x108>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffdd 	bl	8000558 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	f7ff f959 	bl	800085c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7ff f829 	bl	8000608 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fafb 	bl	8000bb8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid1.previous_error)/pid1.dt; //numerical derivative without filter
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <calculate_discrete_pid+0x108>)
 80015c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80015cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <calculate_discrete_pid+0x108>)
 80015d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80015da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015de:	edc7 7a06 	vstr	s15, [r7, #24]
	pid1.previous_error = error;
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <calculate_discrete_pid+0x108>)
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	6113      	str	r3, [r2, #16]
	D = pid1.Kd*derivative;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <calculate_discrete_pid+0x108>)
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80015f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f6:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 80015fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	ed97 7a05 	vldr	s14, [r7, #20]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return u;
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000

08001628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_UART_RxCpltCallback+0x88>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d135      	bne.n	80016a6 <HAL_UART_RxCpltCallback+0x7e>
			char *ptr = singleMessageRecived;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_UART_RxCpltCallback+0x8c>)
 800163c:	60fb      	str	r3, [r7, #12]
			if(*ptr == '?'){
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b3f      	cmp	r3, #63	; 0x3f
 8001644:	d112      	bne.n	800166c <HAL_UART_RxCpltCallback+0x44>
				messageSize = sprintf(singleMessageTransmit, "%d", setPoint);
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_UART_RxCpltCallback+0x90>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_UART_RxCpltCallback+0x94>)
 800164e:	481c      	ldr	r0, [pc, #112]	; (80016c0 <HAL_UART_RxCpltCallback+0x98>)
 8001650:	f005 fc3a 	bl	8006ec8 <siprintf>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_UART_RxCpltCallback+0x9c>)
 800165a:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, singleMessageTransmit, messageSize);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_UART_RxCpltCallback+0x9c>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4917      	ldr	r1, [pc, #92]	; (80016c0 <HAL_UART_RxCpltCallback+0x98>)
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <HAL_UART_RxCpltCallback+0xa0>)
 8001666:	f004 f8d0 	bl	800580a <HAL_UART_Transmit_IT>
 800166a:	e017      	b.n	800169c <HAL_UART_RxCpltCallback+0x74>
			} else {
				setPoint = atoi(ptr);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f004 ff8b 	bl	8006588 <atoi>
 8001672:	4603      	mov	r3, r0
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_UART_RxCpltCallback+0x90>)
 8001676:	6013      	str	r3, [r2, #0]
				messageSize = sprintf(singleMessageTransmit, "%d", setPoint);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_UART_RxCpltCallback+0x90>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	490f      	ldr	r1, [pc, #60]	; (80016bc <HAL_UART_RxCpltCallback+0x94>)
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <HAL_UART_RxCpltCallback+0x98>)
 8001682:	f005 fc21 	bl	8006ec8 <siprintf>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_RxCpltCallback+0x9c>)
 800168c:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, singleMessageTransmit, messageSize);
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_UART_RxCpltCallback+0x9c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	490a      	ldr	r1, [pc, #40]	; (80016c0 <HAL_UART_RxCpltCallback+0x98>)
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <HAL_UART_RxCpltCallback+0xa0>)
 8001698:	f004 f8b7 	bl	800580a <HAL_UART_Transmit_IT>
			}
			HAL_UART_Receive_IT(&huart2, singleMessageRecived, 2);
 800169c:	2202      	movs	r2, #2
 800169e:	4905      	ldr	r1, [pc, #20]	; (80016b4 <HAL_UART_RxCpltCallback+0x8c>)
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <HAL_UART_RxCpltCallback+0xa0>)
 80016a2:	f004 f8f7 	bl	8005894 <HAL_UART_Receive_IT>
		}
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40004400 	.word	0x40004400
 80016b4:	20000368 	.word	0x20000368
 80016b8:	20000364 	.word	0x20000364
 80016bc:	08009458 	.word	0x08009458
 80016c0:	20000300 	.word	0x20000300
 80016c4:	20000210 	.word	0x20000210
 80016c8:	20000320 	.word	0x20000320

080016cc <HAL_TIM_PeriodElapsedCallback>:
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, singleMessageRecived, maxMessageSize);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d13d      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x8e>
		temperature = BMP280_ReadTemperature();
 80016de:	f7ff fd8d 	bl	80011fc <BMP280_ReadTemperature>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
		float dutyF = (999.0 * calculate_discrete_pid(&pid1, setPoint, temperature));
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016f2:	edd2 7a00 	vldr	s15, [r2]
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	4619      	mov	r1, r3
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80016fe:	f7ff ff0d 	bl	800151c <calculate_discrete_pid>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001774 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	edc7 7a02 	vstr	s15, [r7, #8]
		uint16_t duty = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	81fb      	strh	r3, [r7, #14]
		if(dutyF < 0 ) duty = 0; else
 8001716:	edd7 7a02 	vldr	s15, [r7, #8]
 800171a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d502      	bpl.n	800172a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8001724:	2300      	movs	r3, #0
 8001726:	81fb      	strh	r3, [r7, #14]
 8001728:	e013      	b.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x86>
		if(dutyF > 999.0) duty = 999; else
 800172a:	edd7 7a02 	vldr	s15, [r7, #8]
 800172e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001774 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd03      	ble.n	8001744 <HAL_TIM_PeriodElapsedCallback+0x78>
 800173c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	e006      	b.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x86>
			duty = (uint16_t)dutyF;
 8001744:	edd7 7a02 	vldr	s15, [r7, #8]
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 3a90 	vmov	r3, s15
 8001750:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	89fa      	ldrh	r2, [r7, #14]
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40000400 	.word	0x40000400
 8001768:	200002fc 	.word	0x200002fc
 800176c:	20000364 	.word	0x20000364
 8001770:	20000000 	.word	0x20000000
 8001774:	4479c000 	.word	0x4479c000
 8001778:	200003d0 	.word	0x200003d0

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f000 fc64 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f82e 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f7ff fde4 	bl	8001354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800178c:	f000 fb88 	bl	8001ea0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001790:	f7ff fe4e 	bl	8001430 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001794:	f000 fa60 	bl	8001c58 <MX_TIM3_Init>
  MX_DMA_Init();
 8001798:	f7ff fdbc 	bl	8001314 <MX_DMA_Init>
  MX_TIM1_Init();
 800179c:	f000 f9d8 	bl	8001b50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, singleMessageRecived, 2);
 80017a0:	2202      	movs	r2, #2
 80017a2:	490b      	ldr	r1, [pc, #44]	; (80017d0 <main+0x54>)
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <main+0x58>)
 80017a6:	f004 f875 	bl	8005894 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <main+0x5c>)
 80017ac:	f002 ff70 	bl	8004690 <HAL_TIM_Base_Start_IT>
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart2, singleMessageRecived, maxMessageSize);
  //__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80017b0:	2301      	movs	r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	2101      	movs	r1, #1
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <main+0x60>)
 80017b8:	f7ff fc62 	bl	8001080 <BMP280_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <main+0x64>)
 80017c0:	f003 f870 	bl	80048a4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <main+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0x50>
 80017ce:	bf00      	nop
 80017d0:	20000368 	.word	0x20000368
 80017d4:	20000320 	.word	0x20000320
 80017d8:	20000388 	.word	0x20000388
 80017dc:	20000248 	.word	0x20000248
 80017e0:	200003d0 	.word	0x200003d0

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	; 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2230      	movs	r2, #48	; 0x30
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fef6 	bl	80065e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SystemClock_Config+0xc8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <SystemClock_Config+0xc8>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <SystemClock_Config+0xc8>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <SystemClock_Config+0xcc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <SystemClock_Config+0xcc>)
 800182e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <SystemClock_Config+0xcc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001848:	2310      	movs	r3, #16
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	2302      	movs	r3, #2
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001854:	2308      	movs	r3, #8
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001858:	2348      	movs	r3, #72	; 0x48
 800185a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001860:	2304      	movs	r3, #4
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fa4d 	bl	8003d08 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001874:	f000 f81e 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001878:	230f      	movs	r3, #15
 800187a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187c:	2302      	movs	r3, #2
 800187e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	2102      	movs	r1, #2
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fcaf 	bl	80041f8 <HAL_RCC_ClockConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018a0:	f000 f808 	bl	80018b4 <Error_Handler>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3750      	adds	r7, #80	; 0x50
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fe:	2007      	movs	r0, #7
 8001900:	f000 fce6 	bl	80022d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 fbc8 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <DMA1_Stream5_IRQHandler+0x10>)
 800196a:	f000 fe33 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000029c 	.word	0x2000029c

08001978 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM3_IRQHandler+0x10>)
 800197e:	f003 f841 	bl	8004a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000388 	.word	0x20000388

0800198c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <USART2_IRQHandler+0x10>)
 8001992:	f003 ffaf 	bl	80058f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000320 	.word	0x20000320

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ba:	f004 fde9 	bl	8006590 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
	return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019e2:	e7fe      	b.n	80019e2 <_exit+0x12>

080019e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e00a      	b.n	8001a0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019f6:	f3af 8000 	nop.w
 80019fa:	4601      	mov	r1, r0
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf0      	blt.n	80019f6 <_read+0x12>
	}

return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e009      	b.n	8001a44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf1      	blt.n	8001a30 <_write+0x12>
	}
	return len;
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_close>:

int _close(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_isatty>:

int _isatty(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
	return 1;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f004 fd4e 	bl	8006590 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20020000 	.word	0x20020000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000214 	.word	0x20000214
 8001b28:	20000430 	.word	0x20000430

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b092      	sub	sp, #72	; 0x48
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2220      	movs	r2, #32
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fd32 	bl	80065e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <MX_TIM1_Init+0x104>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001b88:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001b96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bae:	4828      	ldr	r0, [pc, #160]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001bb0:	f002 fe29 	bl	8004806 <HAL_TIM_PWM_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f7ff fe7b 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4820      	ldr	r0, [pc, #128]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001bce:	f003 fcfb 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001bd8:	f7ff fe6c 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bdc:	2360      	movs	r3, #96	; 0x60
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001c02:	f003 f863 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c0c:	f7ff fe52 	bl	80018b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4807      	ldr	r0, [pc, #28]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001c34:	f003 fd36 	bl	80056a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001c3e:	f7ff fe39 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <MX_TIM1_Init+0x100>)
 8001c44:	f000 f8ca 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001c48:	bf00      	nop
 8001c4a:	3748      	adds	r7, #72	; 0x48
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200003d0 	.word	0x200003d0
 8001c54:	40010000 	.word	0x40010000

08001c58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c8a:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <MX_TIM3_Init+0xec>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c90:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb0:	4823      	ldr	r0, [pc, #140]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cb2:	f002 fc9d 	bl	80045f0 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cbc:	f7ff fdfa 	bl	80018b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481c      	ldr	r0, [pc, #112]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cce:	f003 f8bf 	bl	8004e50 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cd8:	f7ff fdec 	bl	80018b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cde:	f002 fd39 	bl	8004754 <HAL_TIM_OC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ce8:	f7ff fde4 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cfc:	f003 fc64 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d06:	f7ff fdd5 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001d22:	f002 ff77 	bl	8004c14 <HAL_TIM_OC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d2c:	f7ff fdc2 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001d32:	f000 f853 	bl	8001ddc <HAL_TIM_MspPostInit>

}
 8001d36:	bf00      	nop
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000388 	.word	0x20000388
 8001d44:	40000400 	.word	0x40000400

08001d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10d      	bne.n	8001d76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_TIM_PWM_MspInit+0x40>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_TIM_PWM_MspInit+0x40>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_TIM_PWM_MspInit+0x40>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_TIM_Base_MspInit+0x48>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d115      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	201d      	movs	r0, #29
 8001dc0:	f000 fa91 	bl	80022e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc4:	201d      	movs	r0, #29
 8001dc6:	f000 faaa 	bl	800231e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_TIM_MspPostInit+0xb0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11f      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <HAL_TIM_MspPostInit+0xb8>)
 8001e38:	f000 fe08 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e3c:	e022      	b.n	8001e84 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_TIM_MspPostInit+0xbc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d11d      	bne.n	8001e84 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_MspPostInit+0xb4>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e74:	2302      	movs	r3, #2
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <HAL_TIM_MspPostInit+0xc0>)
 8001e80:	f000 fde4 	bl	8002a4c <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3728      	adds	r7, #40	; 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <MX_USART2_UART_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f003 fc4a 	bl	8005770 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f7ff fce7 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000320 	.word	0x20000320
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_UART_MspInit+0xf0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d161      	bne.n	8001fda <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4820      	ldr	r0, [pc, #128]	; (8001fec <HAL_UART_MspInit+0xf8>)
 8001f6a:	f000 fd6f 	bl	8002a4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f70:	4a20      	ldr	r2, [pc, #128]	; (8001ff4 <HAL_UART_MspInit+0x100>)
 8001f72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fae:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001fb0:	f000 f9d0 	bl	8002354 <HAL_DMA_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001fba:	f7ff fc7b 	bl	80018b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2026      	movs	r0, #38	; 0x26
 8001fd0:	f000 f989 	bl	80022e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd4:	2026      	movs	r0, #38	; 0x26
 8001fd6:	f000 f9a2 	bl	800231e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	2000029c 	.word	0x2000029c
 8001ff4:	40026088 	.word	0x40026088

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ffe:	490e      	ldr	r1, [pc, #56]	; (8002038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002014:	4c0b      	ldr	r4, [pc, #44]	; (8002044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002022:	f7ff fd83 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f004 fab9 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff fba7 	bl	800177c <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800203c:	08009874 	.word	0x08009874
  ldr r2, =_sbss
 8002040:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002044:	2000042c 	.word	0x2000042c

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f92b 	bl	80022d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fc1e 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f943 	bl	800233a <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f90b 	bl	80022e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000018 	.word	0x20000018
 80020e8:	20000020 	.word	0x20000020
 80020ec:	2000001c 	.word	0x2000001c

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000020 	.word	0x20000020
 8002114:	20000418 	.word	0x20000418

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000418 	.word	0x20000418

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229c:	d301      	bcc.n	80022a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229e:	2301      	movs	r3, #1
 80022a0:	e00f      	b.n	80022c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <SysTick_Config+0x40>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022aa:	210f      	movs	r1, #15
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f7ff ff8e 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SysTick_Config+0x40>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ba:	4b04      	ldr	r3, [pc, #16]	; (80022cc <SysTick_Config+0x40>)
 80022bc:	2207      	movs	r2, #7
 80022be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	e000e010 	.word	0xe000e010

080022d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff29 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f8:	f7ff ff3e 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f7ff ff8e 	bl	8002224 <NVIC_EncodePriority>
 8002308:	4602      	mov	r2, r0
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff5d 	bl	80021d0 <__NVIC_SetPriority>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff31 	bl	8002194 <__NVIC_EnableIRQ>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffa2 	bl	800228c <SysTick_Config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff feda 	bl	8002118 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e099      	b.n	80024a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002390:	e00f      	b.n	80023b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002392:	f7ff fec1 	bl	8002118 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b05      	cmp	r3, #5
 800239e:	d908      	bls.n	80023b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2203      	movs	r2, #3
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e078      	b.n	80024a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e8      	bne.n	8002392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_DMA_Init+0x158>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b04      	cmp	r3, #4
 800240a:	d107      	bne.n	800241c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4313      	orrs	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b04      	cmp	r3, #4
 8002444:	d117      	bne.n	8002476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa7b 	bl	8002954 <DMA_CheckFifoParam>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002472:	2301      	movs	r3, #1
 8002474:	e016      	b.n	80024a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa32 	bl	80028e8 <DMA_CalcBaseAndBitshift>
 8002484:	4603      	mov	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	223f      	movs	r2, #63	; 0x3f
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	f010803f 	.word	0xf010803f

080024b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fe2b 	bl	8002118 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e052      	b.n	8002588 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_Abort+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002532:	e013      	b.n	800255c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002534:	f7ff fdf0 	bl	8002118 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d90c      	bls.n	800255c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e015      	b.n	8002588 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e4      	bne.n	8002534 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00c      	b.n	80025c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_DMA_IRQHandler+0x258>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a92      	ldr	r2, [pc, #584]	; (8002830 <HAL_DMA_IRQHandler+0x25c>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2208      	movs	r2, #8
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2208      	movs	r2, #8
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0202 	orr.w	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2204      	movs	r2, #4
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0204 	orr.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2210      	movs	r2, #16
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d043      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2210      	movs	r2, #16
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e01f      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e016      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0208 	bic.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2220      	movs	r2, #32
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808e 	beq.w	8002872 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8086 	beq.w	8002872 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2220      	movs	r2, #32
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d136      	bne.n	80027ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_IRQHandler+0x1da>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	223f      	movs	r2, #63	; 0x3f
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d07d      	beq.n	80028de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
        }
        return;
 80027ea:	e078      	b.n	80028de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01c      	beq.n	8002834 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d030      	beq.n	8002872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e02b      	b.n	8002872 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d027      	beq.n	8002872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e022      	b.n	8002872 <HAL_DMA_IRQHandler+0x29e>
 800282c:	20000018 	.word	0x20000018
 8002830:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0210 	bic.w	r2, r2, #16
 8002850:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	2b00      	cmp	r3, #0
 8002878:	d032      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d022      	beq.n	80028cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2205      	movs	r2, #5
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3301      	adds	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d307      	bcc.n	80028ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f2      	bne.n	800289e <HAL_DMA_IRQHandler+0x2ca>
 80028b8:	e000      	b.n	80028bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028de:	bf00      	nop
    }
  }
}
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop

080028e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3b10      	subs	r3, #16
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <DMA_CalcBaseAndBitshift+0x64>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <DMA_CalcBaseAndBitshift+0x68>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d909      	bls.n	800292a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	1d1a      	adds	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	659a      	str	r2, [r3, #88]	; 0x58
 8002928:	e007      	b.n	800293a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	aaaaaaab 	.word	0xaaaaaaab
 8002950:	08009474 	.word	0x08009474

08002954 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11f      	bne.n	80029ae <DMA_CheckFifoParam+0x5a>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d856      	bhi.n	8002a22 <DMA_CheckFifoParam+0xce>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <DMA_CheckFifoParam+0x28>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	0800299f 	.word	0x0800299f
 8002984:	0800298d 	.word	0x0800298d
 8002988:	08002a23 	.word	0x08002a23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d046      	beq.n	8002a26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e043      	b.n	8002a26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a6:	d140      	bne.n	8002a2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e03d      	b.n	8002a2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b6:	d121      	bne.n	80029fc <DMA_CheckFifoParam+0xa8>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d837      	bhi.n	8002a2e <DMA_CheckFifoParam+0xda>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <DMA_CheckFifoParam+0x70>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029db 	.word	0x080029db
 80029cc:	080029d5 	.word	0x080029d5
 80029d0:	080029ed 	.word	0x080029ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e030      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d025      	beq.n	8002a32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ea:	e022      	b.n	8002a32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f4:	d11f      	bne.n	8002a36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029fa:	e01c      	b.n	8002a36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d903      	bls.n	8002a0a <DMA_CheckFifoParam+0xb6>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d003      	beq.n	8002a10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a08:	e018      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0e:	e015      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00e      	beq.n	8002a3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e00b      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a22:	bf00      	nop
 8002a24:	e00a      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e008      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e006      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e004      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e002      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e159      	b.n	8002d1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8148 	bne.w	8002d16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d005      	beq.n	8002a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d130      	bne.n	8002b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0201 	and.w	r2, r3, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d017      	beq.n	8002b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d123      	bne.n	8002b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a2 	beq.w	8002d16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bee:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x202>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_GPIO_Init+0x2f4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x1fe>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a47      	ldr	r2, [pc, #284]	; (8002d44 <HAL_GPIO_Init+0x2f8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_GPIO_Init+0x2fc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x1f6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x1f2>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c3e:	2307      	movs	r3, #7
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x204>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbc:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f aea2 	bls.w	8002a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e12b      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fb6c 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dec:	f001 fbd8 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a81      	ldr	r2, [pc, #516]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d807      	bhi.n	8002e0c <HAL_I2C_Init+0x84>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a80      	ldr	r2, [pc, #512]	; (8003000 <HAL_I2C_Init+0x278>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e006      	b.n	8002e1a <HAL_I2C_Init+0x92>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a7d      	ldr	r2, [pc, #500]	; (8003004 <HAL_I2C_Init+0x27c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0e7      	b.n	8002ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a78      	ldr	r2, [pc, #480]	; (8003008 <HAL_I2C_Init+0x280>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <HAL_I2C_Init+0xd4>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	e009      	b.n	8002e70 <HAL_I2C_Init+0xe8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	4a69      	ldr	r2, [pc, #420]	; (800300c <HAL_I2C_Init+0x284>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	3301      	adds	r3, #1
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	495c      	ldr	r1, [pc, #368]	; (8002ffc <HAL_I2C_Init+0x274>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d819      	bhi.n	8002ec4 <HAL_I2C_Init+0x13c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e59      	subs	r1, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9e:	1c59      	adds	r1, r3, #1
 8002ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_I2C_Init+0x138>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e59      	subs	r1, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	e051      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e04f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <HAL_I2C_Init+0x168>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e012      	b.n	8002f16 <HAL_I2C_Init+0x18e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x196>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e022      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10e      	bne.n	8002f44 <HAL_I2C_Init+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e58      	subs	r0, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	440b      	add	r3, r1
 8002f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	e00f      	b.n	8002f64 <HAL_I2C_Init+0x1dc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	6809      	ldr	r1, [r1, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6911      	ldr	r1, [r2, #16]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	000186a0 	.word	0x000186a0
 8003000:	001e847f 	.word	0x001e847f
 8003004:	003d08ff 	.word	0x003d08ff
 8003008:	431bde83 	.word	0x431bde83
 800300c:	10624dd3 	.word	0x10624dd3

08003010 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4603      	mov	r3, r0
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	460b      	mov	r3, r1
 8003024:	813b      	strh	r3, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800302a:	f7ff f875 	bl	8002118 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	f040 80d9 	bne.w	80031f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2319      	movs	r3, #25
 8003044:	2201      	movs	r2, #1
 8003046:	496d      	ldr	r1, [pc, #436]	; (80031fc <HAL_I2C_Mem_Write+0x1ec>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fc7f 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
 8003056:	e0cc      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Write+0x56>
 8003062:	2302      	movs	r3, #2
 8003064:	e0c5      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d007      	beq.n	800308c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2221      	movs	r2, #33	; 0x21
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_I2C_Mem_Write+0x1f0>)
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ce:	88f8      	ldrh	r0, [r7, #6]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	8979      	ldrh	r1, [r7, #10]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4603      	mov	r3, r0
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fab6 	bl	8003650 <I2C_RequestMemoryWrite>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d052      	beq.n	8003190 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e081      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fd00 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11b      	bne.n	8003190 <HAL_I2C_Mem_Write+0x180>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1aa      	bne.n	80030ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fcec 	bl	8003b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e016      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7fe ff7b 	bl	8002118 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	f040 8208 	bne.w	8003642 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2319      	movs	r3, #25
 8003238:	2201      	movs	r2, #1
 800323a:	497b      	ldr	r1, [pc, #492]	; (8003428 <HAL_I2C_Mem_Read+0x224>)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fb85 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	e1fb      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_I2C_Mem_Read+0x56>
 8003256:	2302      	movs	r3, #2
 8003258:	e1f4      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d007      	beq.n	8003280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2222      	movs	r2, #34	; 0x22
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a5b      	ldr	r2, [pc, #364]	; (800342c <HAL_I2C_Mem_Read+0x228>)
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c2:	88f8      	ldrh	r0, [r7, #6]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa52 	bl	800377c <I2C_RequestMemoryRead>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1b0      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	623b      	str	r3, [r7, #32]
 80032fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e184      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11b      	bne.n	8003352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e164      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b02      	cmp	r3, #2
 8003358:	d11b      	bne.n	8003392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	e144      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a8:	e138      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	f200 80f1 	bhi.w	8003596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d123      	bne.n	8003404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fc1b 	bl	8003bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e139      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003402:	e10b      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b02      	cmp	r3, #2
 800340a:	d14e      	bne.n	80034aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	2200      	movs	r2, #0
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <HAL_I2C_Mem_Read+0x22c>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa98 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e10e      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000
 8003430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a8:	e0b8      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2200      	movs	r2, #0
 80034b2:	4966      	ldr	r1, [pc, #408]	; (800364c <HAL_I2C_Mem_Read+0x448>)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fa49 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0bf      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	494f      	ldr	r1, [pc, #316]	; (800364c <HAL_I2C_Mem_Read+0x448>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fa1b 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e091      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003594:	e042      	b.n	800361c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fb2e 	bl	8003bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e04c      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d118      	bne.n	800361c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f aec2 	bne.w	80033aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	00010004 	.word	0x00010004

08003650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	460b      	mov	r3, r1
 8003664:	813b      	strh	r3, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2200      	movs	r2, #0
 8003682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f960 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d103      	bne.n	80036aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e05f      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	492d      	ldr	r1, [pc, #180]	; (8003778 <I2C_RequestMemoryWrite+0x128>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f998 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e04c      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa02 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e02b      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
 8003726:	e021      	b.n	800376c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b29b      	uxth	r3, r3
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f9dc 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b04      	cmp	r3, #4
 800374c:	d107      	bne.n	800375e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e005      	b.n	800376e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003762:	893b      	ldrh	r3, [r7, #8]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	460b      	mov	r3, r1
 8003790:	813b      	strh	r3, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2200      	movs	r2, #0
 80037be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f8c2 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037dc:	d103      	bne.n	80037e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0aa      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	4952      	ldr	r1, [pc, #328]	; (8003948 <I2C_RequestMemoryRead+0x1cc>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8fa 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e097      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f964 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b04      	cmp	r3, #4
 800383c:	d107      	bne.n	800384e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e076      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	e021      	b.n	80038a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b29b      	uxth	r3, r3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6a39      	ldr	r1, [r7, #32]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f93e 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b04      	cmp	r3, #4
 8003888:	d107      	bne.n	800389a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e050      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800389e:	893b      	ldrh	r3, [r7, #8]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	6a39      	ldr	r1, [r7, #32]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f923 	bl	8003af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d107      	bne.n	80038d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e035      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f82b 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d103      	bne.n	8003914 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e013      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003918:	897b      	ldrh	r3, [r7, #10]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <I2C_RequestMemoryRead+0x1cc>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f863 	bl	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00010002 	.word	0x00010002

0800394c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800395c:	e025      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d021      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe fbd7 	bl	8002118 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e023      	b.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10d      	bne.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	e00c      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d0b6      	beq.n	800395e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a08:	e051      	b.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d123      	bne.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e046      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d021      	beq.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fb55 	bl	8002118 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d116      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e020      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10c      	bne.n	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e00b      	b.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d18d      	bne.n	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b04:	e02d      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8ce 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e02d      	b.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d021      	beq.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fe fafb 	bl	8002118 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e007      	b.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d1ca      	bne.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b86:	e02d      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f88d 	bl	8003ca8 <I2C_IsAcknowledgeFailed>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e02d      	b.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d021      	beq.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fe faba 	bl	8002118 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d1ca      	bne.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c08:	e042      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d119      	bne.n	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e029      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe fa64 	bl	8002118 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e007      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d1b5      	bne.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d11b      	bne.n	8003cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e264      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4ba3      	ldr	r3, [pc, #652]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4ba0      	ldr	r3, [pc, #640]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b9d      	ldr	r3, [pc, #628]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b99      	ldr	r3, [pc, #612]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e23f      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a90      	ldr	r2, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b8b      	ldr	r3, [pc, #556]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a8a      	ldr	r2, [pc, #552]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a87      	ldr	r2, [pc, #540]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b84      	ldr	r3, [pc, #528]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a83      	ldr	r2, [pc, #524]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a80      	ldr	r2, [pc, #512]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe f9aa 	bl	8002118 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe f9a6 	bl	8002118 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e204      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b76      	ldr	r3, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe f996 	bl	8002118 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe f992 	bl	8002118 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f0      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b5f      	ldr	r3, [pc, #380]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b5c      	ldr	r3, [pc, #368]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c4      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4952      	ldr	r1, [pc, #328]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe f94b 	bl	8002118 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fe f947 	bl	8002118 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a5      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4940      	ldr	r1, [pc, #256]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe f92a 	bl	8002118 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fe f926 	bl	8002118 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e184      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d030      	beq.n	8003f54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe f90a 	bl	8002118 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe f906 	bl	8002118 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e164      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e015      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe f8f3 	bl	8002118 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fe f8ef 	bl	8002118 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e14d      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a0 	beq.w	80040a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fe f8b5 	bl	8002118 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470000 	.word	0x42470000
 8003fbc:	42470e80 	.word	0x42470e80
 8003fc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fe f8a8 	bl	8002118 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e106      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_OscConfig+0x4e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2f0>
 8003fea:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x312>
 8004000:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a7a      	ldr	r2, [pc, #488]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 800401a:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a74      	ldr	r2, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a71      	ldr	r2, [pc, #452]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fe f86d 	bl	8002118 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fe f869 	bl	8002118 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0c5      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x33a>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fe f857 	bl	8002118 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fe f853 	bl	8002118 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0af      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 809b 	beq.w	80041e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d05c      	beq.n	8004172 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d141      	bne.n	8004144 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fe f827 	bl	8002118 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe f823 	bl	8002118 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e081      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	019b      	lsls	r3, r3, #6
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	4937      	ldr	r1, [pc, #220]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004116:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd fffc 	bl	8002118 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fff8 	bl	8002118 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e056      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x41c>
 8004142:	e04e      	b.n	80041e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd ffe5 	bl	8002118 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd ffe1 	bl	8002118 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03f      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x44a>
 8004170:	e037      	b.n	80041e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e032      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d028      	beq.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d121      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d11a      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ae:	4013      	ands	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d107      	bne.n	80041de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40007000 	.word	0x40007000
 80041f0:	40023800 	.word	0x40023800
 80041f4:	42470060 	.word	0x42470060

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fd ff16 	bl	8002118 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd ff12 	bl	8002118 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fe76 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	0800945c 	.word	0x0800945c
 80043bc:	20000018 	.word	0x20000018
 80043c0:	2000001c 	.word	0x2000001c

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80bd 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x1a4>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0b7      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043fa:	60bb      	str	r3, [r7, #8]
       break;
 80043fc:	e0b7      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004400:	60bb      	str	r3, [r7, #8]
      break;
 8004402:	e0b4      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04d      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b58      	ldr	r3, [pc, #352]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	ea02 0800 	and.w	r8, r2, r0
 8004432:	ea03 0901 	and.w	r9, r3, r1
 8004436:	4640      	mov	r0, r8
 8004438:	4649      	mov	r1, r9
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	014b      	lsls	r3, r1, #5
 8004444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004448:	0142      	lsls	r2, r0, #5
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	ebb0 0008 	subs.w	r0, r0, r8
 8004452:	eb61 0109 	sbc.w	r1, r1, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	018b      	lsls	r3, r1, #6
 8004460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004464:	0182      	lsls	r2, r0, #6
 8004466:	1a12      	subs	r2, r2, r0
 8004468:	eb63 0301 	sbc.w	r3, r3, r1
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	00d9      	lsls	r1, r3, #3
 8004476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800447a:	00d0      	lsls	r0, r2, #3
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	eb12 0208 	adds.w	r2, r2, r8
 8004484:	eb43 0309 	adc.w	r3, r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0259      	lsls	r1, r3, #9
 8004492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004496:	0250      	lsls	r0, r2, #9
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f7fc fbd6 	bl	8000c58 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e04a      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	461a      	mov	r2, r3
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	ea02 0400 	and.w	r4, r2, r0
 80044ce:	ea03 0501 	and.w	r5, r3, r1
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	014b      	lsls	r3, r1, #5
 80044e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044e4:	0142      	lsls	r2, r0, #5
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	1b00      	subs	r0, r0, r4
 80044ec:	eb61 0105 	sbc.w	r1, r1, r5
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	018b      	lsls	r3, r1, #6
 80044fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044fe:	0182      	lsls	r2, r0, #6
 8004500:	1a12      	subs	r2, r2, r0
 8004502:	eb63 0301 	sbc.w	r3, r3, r1
 8004506:	f04f 0000 	mov.w	r0, #0
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004514:	00d0      	lsls	r0, r2, #3
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	1912      	adds	r2, r2, r4
 800451c:	eb45 0303 	adc.w	r3, r5, r3
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0299      	lsls	r1, r3, #10
 800452a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800452e:	0290      	lsls	r0, r2, #10
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	461a      	mov	r2, r3
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	f7fc fb8a 	bl	8000c58 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4613      	mov	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	3301      	adds	r3, #1
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	e002      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800456a:	60bb      	str	r3, [r7, #8]
      break;
 800456c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456e:	68bb      	ldr	r3, [r7, #8]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400
 8004584:	007a1200 	.word	0x007a1200

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_GetHCLKFreq+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000018 	.word	0x20000018

080045a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a4:	f7ff fff0 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0a9b      	lsrs	r3, r3, #10
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	0800946c 	.word	0x0800946c

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045cc:	f7ff ffdc 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	0b5b      	lsrs	r3, r3, #13
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4903      	ldr	r1, [pc, #12]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	0800946c 	.word	0x0800946c

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fbb8 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fcfe 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e044      	b.n	8004732 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_TIM_Base_Start_IT+0xb0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d018      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d013      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_TIM_Base_Start_IT+0xb4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_TIM_Base_Start_IT+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIM_Base_Start_IT+0xbc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x6c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_TIM_Base_Start_IT+0xc0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d010      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e007      	b.n	8004730 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014000 	.word	0x40014000

08004754 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e041      	b.n	80047ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f839 	bl	80047f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fc4c 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e041      	b.n	800489c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fa8b 	bl	8001d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f000 fbf3 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_TIM_PWM_Start+0x24>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e022      	b.n	800490e <HAL_TIM_PWM_Start+0x6a>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d109      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x3e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e015      	b.n	800490e <HAL_TIM_PWM_Start+0x6a>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d109      	bne.n	80048fc <HAL_TIM_PWM_Start+0x58>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e008      	b.n	800490e <HAL_TIM_PWM_Start+0x6a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e068      	b.n	80049e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0x82>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	e013      	b.n	800494e <HAL_TIM_PWM_Start+0xaa>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0x92>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	e00b      	b.n	800494e <HAL_TIM_PWM_Start+0xaa>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	e003      	b.n	800494e <HAL_TIM_PWM_Start+0xaa>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fe10 	bl	800557c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_TIM_PWM_Start+0x14c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d107      	bne.n	8004976 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_TIM_PWM_Start+0x14c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d018      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x10e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d013      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x10e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <HAL_TIM_PWM_Start+0x150>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00e      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x10e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_TIM_PWM_Start+0x154>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x10e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	; (80049fc <HAL_TIM_PWM_Start+0x158>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_TIM_PWM_Start+0x10e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_TIM_PWM_Start+0x15c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d111      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b06      	cmp	r3, #6
 80049c2:	d010      	beq.n	80049e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	e007      	b.n	80049e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40014000 	.word	0x40014000

08004a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d122      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0202 	mvn.w	r2, #2
 8004a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fad3 	bl	8004ff2 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fac5 	bl	8004fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fad6 	bl	8005006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0204 	mvn.w	r2, #4
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 faa9 	bl	8004ff2 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa9b 	bl	8004fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 faac 	bl	8005006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d122      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0208 	mvn.w	r2, #8
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2204      	movs	r2, #4
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa7f 	bl	8004ff2 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa71 	bl	8004fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fa82 	bl	8005006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0210 	mvn.w	r2, #16
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2208      	movs	r2, #8
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa55 	bl	8004ff2 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa47 	bl	8004fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa58 	bl	8005006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0201 	mvn.w	r2, #1
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc fda2 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fdd4 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa1d 	bl	800501a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0220 	mvn.w	r2, #32
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fd9e 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e048      	b.n	8004cc4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d839      	bhi.n	8004cb4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c7d 	.word	0x08004c7d
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004cb5 	.word	0x08004cb5
 8004c54:	08004cb5 	.word	0x08004cb5
 8004c58:	08004c8b 	.word	0x08004c8b
 8004c5c:	08004cb5 	.word	0x08004cb5
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004cb5 	.word	0x08004cb5
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004cb5 	.word	0x08004cb5
 8004c70:	08004cb5 	.word	0x08004cb5
 8004c74:	08004cb5 	.word	0x08004cb5
 8004c78:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fa54 	bl	8005130 <TIM_OC1_SetConfig>
      break;
 8004c88:	e017      	b.n	8004cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fab3 	bl	80051fc <TIM_OC2_SetConfig>
      break;
 8004c96:	e010      	b.n	8004cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb18 	bl	80052d4 <TIM_OC3_SetConfig>
      break;
 8004ca4:	e009      	b.n	8004cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb7b 	bl	80053a8 <TIM_OC4_SetConfig>
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e0ae      	b.n	8004e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	f200 809f 	bhi.w	8004e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004e39 	.word	0x08004e39
 8004d08:	08004e39 	.word	0x08004e39
 8004d0c:	08004e39 	.word	0x08004e39
 8004d10:	08004d75 	.word	0x08004d75
 8004d14:	08004e39 	.word	0x08004e39
 8004d18:	08004e39 	.word	0x08004e39
 8004d1c:	08004e39 	.word	0x08004e39
 8004d20:	08004db7 	.word	0x08004db7
 8004d24:	08004e39 	.word	0x08004e39
 8004d28:	08004e39 	.word	0x08004e39
 8004d2c:	08004e39 	.word	0x08004e39
 8004d30:	08004df7 	.word	0x08004df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f9f8 	bl	8005130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	619a      	str	r2, [r3, #24]
      break;
 8004d72:	e064      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa3e 	bl	80051fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
      break;
 8004db4:	e043      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fa89 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0208 	orr.w	r2, r2, #8
 8004dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0204 	bic.w	r2, r2, #4
 8004de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	61da      	str	r2, [r3, #28]
      break;
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fad3 	bl	80053a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	61da      	str	r2, [r3, #28]
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_ConfigClockSource+0x1c>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0b4      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x186>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d03e      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eaa:	f200 8087 	bhi.w	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	f000 8086 	beq.w	8004fc2 <HAL_TIM_ConfigClockSource+0x172>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	d87f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d01a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d87b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d050      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x11a>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d877      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d03c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0xfa>
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d873      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d058      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x13a>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d86f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d064      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d86b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d060      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d867      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d05c      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d05a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ef4:	e062      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f000 fb19 	bl	800553c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	609a      	str	r2, [r3, #8]
      break;
 8004f22:	e04f      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 fb02 	bl	800553c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f46:	609a      	str	r2, [r3, #8]
      break;
 8004f48:	e03c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fa76 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2150      	movs	r1, #80	; 0x50
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 facf 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 8004f68:	e02c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 fa95 	bl	80054a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2160      	movs	r1, #96	; 0x60
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fabf 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 8004f88:	e01c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 fa56 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 faaf 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e00c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 faa6 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 8004fba:	e003      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc0:	e000      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a34      	ldr	r2, [pc, #208]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a31      	ldr	r2, [pc, #196]	; (8005118 <TIM_Base_SetConfig+0xe8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a30      	ldr	r2, [pc, #192]	; (800511c <TIM_Base_SetConfig+0xec>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <TIM_Base_SetConfig+0xf0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a25      	ldr	r2, [pc, #148]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01b      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d017      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <TIM_Base_SetConfig+0xe8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a21      	ldr	r2, [pc, #132]	; (800511c <TIM_Base_SetConfig+0xec>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a20      	ldr	r2, [pc, #128]	; (8005120 <TIM_Base_SetConfig+0xf0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <TIM_Base_SetConfig+0xf4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <TIM_Base_SetConfig+0xf8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <TIM_Base_SetConfig+0xfc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a08      	ldr	r2, [pc, #32]	; (8005114 <TIM_Base_SetConfig+0xe4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010000 	.word	0x40010000
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800

08005130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0302 	bic.w	r3, r3, #2
 8005178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <TIM_OC1_SetConfig+0xc8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10c      	bne.n	80051a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0308 	bic.w	r3, r3, #8
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <TIM_OC1_SetConfig+0xc8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d111      	bne.n	80051d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000

080051fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0210 	bic.w	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0320 	bic.w	r3, r3, #32
 8005246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <TIM_OC2_SetConfig+0xd4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10d      	bne.n	8005278 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC2_SetConfig+0xd4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d113      	bne.n	80052a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <TIM_OC3_SetConfig+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10d      	bne.n	800534e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <TIM_OC3_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800535c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40010000 	.word	0x40010000

080053a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <TIM_OC4_SetConfig+0x9c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d109      	bne.n	800541c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	019b      	lsls	r3, r3, #6
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000

08005448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 030a 	bic.w	r3, r3, #10
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0210 	bic.w	r2, r3, #16
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	f043 0307 	orr.w	r3, r3, #7
 8005528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	431a      	orrs	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2201      	movs	r2, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e050      	b.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d013      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10c      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40014000 	.word	0x40014000

080056a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056bc:	2302      	movs	r3, #2
 80056be:	e03d      	b.n	800573c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e03f      	b.n	8005802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc fbac 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fd1f 	bl	80061f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b20      	cmp	r3, #32
 8005822:	d130      	bne.n	8005886 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_UART_Transmit_IT+0x26>
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e029      	b.n	8005888 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Transmit_IT+0x38>
 800583e:	2302      	movs	r3, #2
 8005840:	e022      	b.n	8005888 <HAL_UART_Transmit_IT+0x7e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005880:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d11d      	bne.n	80058ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UART_Receive_IT+0x26>
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e016      	b.n	80058ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_UART_Receive_IT+0x38>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e00f      	b.n	80058ec <HAL_UART_Receive_IT+0x58>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	461a      	mov	r2, r3
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fab5 	bl	8005e50 <UART_Start_Receive_IT>
 80058e6:	4603      	mov	r3, r0
 80058e8:	e000      	b.n	80058ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0ba      	sub	sp, #232	; 0xe8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_UART_IRQHandler+0x66>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb95 	bl	8006082 <UART_Receive_IT>
      return;
 8005958:	e256      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800595a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80de 	beq.w	8005b20 <HAL_UART_IRQHandler+0x22c>
 8005964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80d1 	beq.w	8005b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xae>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xd2>
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0202 	orr.w	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xf6>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d011      	beq.n	8005a1a <HAL_UART_IRQHandler+0x126>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d105      	bne.n	8005a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f043 0208 	orr.w	r2, r3, #8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 81ed 	beq.w	8005dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_UART_IRQHandler+0x14e>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb20 	bl	8006082 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <HAL_UART_IRQHandler+0x17a>
 8005a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d04f      	beq.n	8005b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa28 	bl	8005ec4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d141      	bne.n	8005b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1d9      	bne.n	8005a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	4a7d      	ldr	r2, [pc, #500]	; (8005cd0 <HAL_UART_IRQHandler+0x3dc>)
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fd54 	bl	8002590 <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e00e      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f990 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e00a      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f98c 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e006      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f988 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b1a:	e170      	b.n	8005dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	bf00      	nop
    return;
 8005b1e:	e16e      	b.n	8005dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f040 814a 	bne.w	8005dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8143 	beq.w	8005dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 813c 	beq.w	8005dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	f040 80b4 	bne.w	8005cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8140 	beq.w	8005e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f080 8139 	bcs.w	8005e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba2:	f000 8088 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d9      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e1      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e3      	bne.n	8005c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fc fbfd 	bl	80024b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8b6 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ccc:	e099      	b.n	8005e02 <HAL_UART_IRQHandler+0x50e>
 8005cce:	bf00      	nop
 8005cd0:	08005f8b 	.word	0x08005f8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 808b 	beq.w	8005e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8005d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e3      	bne.n	8005cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	623b      	str	r3, [r7, #32]
   return(result);
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3314      	adds	r3, #20
 8005d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d56:	633a      	str	r2, [r7, #48]	; 0x30
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e3      	bne.n	8005d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0310 	bic.w	r3, r3, #16
 8005d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d9c:	61fa      	str	r2, [r7, #28]
 8005d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	69b9      	ldr	r1, [r7, #24]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	617b      	str	r3, [r7, #20]
   return(result);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e3      	bne.n	8005d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f83e 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dbc:	e023      	b.n	8005e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <HAL_UART_IRQHandler+0x4ea>
 8005dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8eb 	bl	8005fb2 <UART_Transmit_IT>
    return;
 8005ddc:	e014      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00e      	beq.n	8005e08 <HAL_UART_IRQHandler+0x514>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f92b 	bl	8006052 <UART_EndTransmit_IT>
    return;
 8005dfc:	e004      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
    return;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
      return;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
      return;
 8005e06:	bf00      	nop
  }
}
 8005e08:	37e8      	adds	r7, #232	; 0xe8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop

08005e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2222      	movs	r2, #34	; 0x22
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0220 	orr.w	r2, r2, #32
 8005eb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b095      	sub	sp, #84	; 0x54
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eec:	643a      	str	r2, [r7, #64]	; 0x40
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e5      	bne.n	8005ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d119      	bne.n	8005f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	647b      	str	r3, [r7, #68]	; 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	61ba      	str	r2, [r7, #24]
 8005f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6979      	ldr	r1, [r7, #20]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f7e:	bf00      	nop
 8005f80:	3754      	adds	r7, #84	; 0x54
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ff3d 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b21      	cmp	r3, #33	; 0x21
 8005fc4:	d13e      	bne.n	8006044 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	d114      	bne.n	8005ffa <UART_Transmit_IT+0x48>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d110      	bne.n	8005ffa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	1c9a      	adds	r2, r3, #2
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]
 8005ff8:	e008      	b.n	800600c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6211      	str	r1, [r2, #32]
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4619      	mov	r1, r3
 800601a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10f      	bne.n	8006040 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800602e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fecc 	bl	8005e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08c      	sub	sp, #48	; 0x30
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b22      	cmp	r3, #34	; 0x22
 8006094:	f040 80ab 	bne.w	80061ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d117      	bne.n	80060d2 <UART_Receive_IT+0x50>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d113      	bne.n	80060d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	1c9a      	adds	r2, r3, #2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
 80060d0:	e026      	b.n	8006120 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	d007      	beq.n	80060f6 <UART_Receive_IT+0x74>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <UART_Receive_IT+0x82>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e008      	b.n	8006116 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29b      	uxth	r3, r3
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4619      	mov	r1, r3
 800612e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006130:	2b00      	cmp	r3, #0
 8006132:	d15a      	bne.n	80061ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0220 	bic.w	r2, r2, #32
 8006142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d135      	bne.n	80061e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	613b      	str	r3, [r7, #16]
   return(result);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f023 0310 	bic.w	r3, r3, #16
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619a:	623a      	str	r2, [r7, #32]
 800619c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	69f9      	ldr	r1, [r7, #28]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d10a      	bne.n	80061d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fe2d 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
 80061de:	e002      	b.n	80061e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fb fa21 	bl	8001628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e002      	b.n	80061f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3730      	adds	r7, #48	; 0x30
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	b09f      	sub	sp, #124	; 0x7c
 80061fe:	af00      	add	r7, sp, #0
 8006200:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	68d9      	ldr	r1, [r3, #12]
 8006210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	ea40 0301 	orr.w	r3, r0, r1
 8006218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	431a      	orrs	r2, r3
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	4313      	orrs	r3, r2
 8006230:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800623c:	f021 010c 	bic.w	r1, r1, #12
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006246:	430b      	orrs	r3, r1
 8006248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800624a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006256:	6999      	ldr	r1, [r3, #24]
 8006258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	ea40 0301 	orr.w	r3, r0, r1
 8006260:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4bc5      	ldr	r3, [pc, #788]	; (800657c <UART_SetConfig+0x384>)
 8006268:	429a      	cmp	r2, r3
 800626a:	d004      	beq.n	8006276 <UART_SetConfig+0x7e>
 800626c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4bc3      	ldr	r3, [pc, #780]	; (8006580 <UART_SetConfig+0x388>)
 8006272:	429a      	cmp	r2, r3
 8006274:	d103      	bne.n	800627e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006276:	f7fe f9a7 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 800627a:	6778      	str	r0, [r7, #116]	; 0x74
 800627c:	e002      	b.n	8006284 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800627e:	f7fe f98f 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 8006282:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	f040 80b6 	bne.w	80063fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006292:	461c      	mov	r4, r3
 8006294:	f04f 0500 	mov.w	r5, #0
 8006298:	4622      	mov	r2, r4
 800629a:	462b      	mov	r3, r5
 800629c:	1891      	adds	r1, r2, r2
 800629e:	6439      	str	r1, [r7, #64]	; 0x40
 80062a0:	415b      	adcs	r3, r3
 80062a2:	647b      	str	r3, [r7, #68]	; 0x44
 80062a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062a8:	1912      	adds	r2, r2, r4
 80062aa:	eb45 0303 	adc.w	r3, r5, r3
 80062ae:	f04f 0000 	mov.w	r0, #0
 80062b2:	f04f 0100 	mov.w	r1, #0
 80062b6:	00d9      	lsls	r1, r3, #3
 80062b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062bc:	00d0      	lsls	r0, r2, #3
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	1911      	adds	r1, r2, r4
 80062c4:	6639      	str	r1, [r7, #96]	; 0x60
 80062c6:	416b      	adcs	r3, r5
 80062c8:	667b      	str	r3, [r7, #100]	; 0x64
 80062ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	1891      	adds	r1, r2, r2
 80062d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062d8:	415b      	adcs	r3, r3
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062e4:	f7fa fcb8 	bl	8000c58 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4ba5      	ldr	r3, [pc, #660]	; (8006584 <UART_SetConfig+0x38c>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011e      	lsls	r6, r3, #4
 80062f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f8:	461c      	mov	r4, r3
 80062fa:	f04f 0500 	mov.w	r5, #0
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	6339      	str	r1, [r7, #48]	; 0x30
 8006306:	415b      	adcs	r3, r3
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
 800630a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800630e:	1912      	adds	r2, r2, r4
 8006310:	eb45 0303 	adc.w	r3, r5, r3
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f04f 0100 	mov.w	r1, #0
 800631c:	00d9      	lsls	r1, r3, #3
 800631e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006322:	00d0      	lsls	r0, r2, #3
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	1911      	adds	r1, r2, r4
 800632a:	65b9      	str	r1, [r7, #88]	; 0x58
 800632c:	416b      	adcs	r3, r5
 800632e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	461a      	mov	r2, r3
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	1891      	adds	r1, r2, r2
 800633c:	62b9      	str	r1, [r7, #40]	; 0x28
 800633e:	415b      	adcs	r3, r3
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006346:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800634a:	f7fa fc85 	bl	8000c58 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b8c      	ldr	r3, [pc, #560]	; (8006584 <UART_SetConfig+0x38c>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a87      	ldr	r2, [pc, #540]	; (8006584 <UART_SetConfig+0x38c>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006374:	441e      	add	r6, r3
 8006376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006378:	4618      	mov	r0, r3
 800637a:	f04f 0100 	mov.w	r1, #0
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	1894      	adds	r4, r2, r2
 8006384:	623c      	str	r4, [r7, #32]
 8006386:	415b      	adcs	r3, r3
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800638e:	1812      	adds	r2, r2, r0
 8006390:	eb41 0303 	adc.w	r3, r1, r3
 8006394:	f04f 0400 	mov.w	r4, #0
 8006398:	f04f 0500 	mov.w	r5, #0
 800639c:	00dd      	lsls	r5, r3, #3
 800639e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063a2:	00d4      	lsls	r4, r2, #3
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	1814      	adds	r4, r2, r0
 80063aa:	653c      	str	r4, [r7, #80]	; 0x50
 80063ac:	414b      	adcs	r3, r1
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	61b9      	str	r1, [r7, #24]
 80063be:	415b      	adcs	r3, r3
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063ca:	f7fa fc45 	bl	8000c58 <__aeabi_uldivmod>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4b6c      	ldr	r3, [pc, #432]	; (8006584 <UART_SetConfig+0x38c>)
 80063d4:	fba3 1302 	umull	r1, r3, r3, r2
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	2164      	movs	r1, #100	; 0x64
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	3332      	adds	r3, #50	; 0x32
 80063e6:	4a67      	ldr	r2, [pc, #412]	; (8006584 <UART_SetConfig+0x38c>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f003 0207 	and.w	r2, r3, #7
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4432      	add	r2, r6
 80063f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063fa:	e0b9      	b.n	8006570 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fe:	461c      	mov	r4, r3
 8006400:	f04f 0500 	mov.w	r5, #0
 8006404:	4622      	mov	r2, r4
 8006406:	462b      	mov	r3, r5
 8006408:	1891      	adds	r1, r2, r2
 800640a:	6139      	str	r1, [r7, #16]
 800640c:	415b      	adcs	r3, r3
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006414:	1912      	adds	r2, r2, r4
 8006416:	eb45 0303 	adc.w	r3, r5, r3
 800641a:	f04f 0000 	mov.w	r0, #0
 800641e:	f04f 0100 	mov.w	r1, #0
 8006422:	00d9      	lsls	r1, r3, #3
 8006424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006428:	00d0      	lsls	r0, r2, #3
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	eb12 0804 	adds.w	r8, r2, r4
 8006432:	eb43 0905 	adc.w	r9, r3, r5
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	f04f 0100 	mov.w	r1, #0
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	008b      	lsls	r3, r1, #2
 800644a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800644e:	0082      	lsls	r2, r0, #2
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fc00 	bl	8000c58 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b49      	ldr	r3, [pc, #292]	; (8006584 <UART_SetConfig+0x38c>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011e      	lsls	r6, r3, #4
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	4618      	mov	r0, r3
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	1894      	adds	r4, r2, r2
 8006474:	60bc      	str	r4, [r7, #8]
 8006476:	415b      	adcs	r3, r3
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647e:	1812      	adds	r2, r2, r0
 8006480:	eb41 0303 	adc.w	r3, r1, r3
 8006484:	f04f 0400 	mov.w	r4, #0
 8006488:	f04f 0500 	mov.w	r5, #0
 800648c:	00dd      	lsls	r5, r3, #3
 800648e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006492:	00d4      	lsls	r4, r2, #3
 8006494:	4622      	mov	r2, r4
 8006496:	462b      	mov	r3, r5
 8006498:	1814      	adds	r4, r2, r0
 800649a:	64bc      	str	r4, [r7, #72]	; 0x48
 800649c:	414b      	adcs	r3, r1
 800649e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	008b      	lsls	r3, r1, #2
 80064b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064b8:	0082      	lsls	r2, r0, #2
 80064ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064be:	f7fa fbcb 	bl	8000c58 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <UART_SetConfig+0x38c>)
 80064c8:	fba3 1302 	umull	r1, r3, r3, r2
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	2164      	movs	r1, #100	; 0x64
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	3332      	adds	r3, #50	; 0x32
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <UART_SetConfig+0x38c>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e6:	441e      	add	r6, r3
 80064e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ea:	4618      	mov	r0, r3
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	1894      	adds	r4, r2, r2
 80064f6:	603c      	str	r4, [r7, #0]
 80064f8:	415b      	adcs	r3, r3
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006500:	1812      	adds	r2, r2, r0
 8006502:	eb41 0303 	adc.w	r3, r1, r3
 8006506:	f04f 0400 	mov.w	r4, #0
 800650a:	f04f 0500 	mov.w	r5, #0
 800650e:	00dd      	lsls	r5, r3, #3
 8006510:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006514:	00d4      	lsls	r4, r2, #3
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	eb12 0a00 	adds.w	sl, r2, r0
 800651e:	eb43 0b01 	adc.w	fp, r3, r1
 8006522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	f04f 0100 	mov.w	r1, #0
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	008b      	lsls	r3, r1, #2
 8006536:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800653a:	0082      	lsls	r2, r0, #2
 800653c:	4650      	mov	r0, sl
 800653e:	4659      	mov	r1, fp
 8006540:	f7fa fb8a 	bl	8000c58 <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <UART_SetConfig+0x38c>)
 800654a:	fba3 1302 	umull	r1, r3, r3, r2
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2164      	movs	r1, #100	; 0x64
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	3332      	adds	r3, #50	; 0x32
 800655c:	4a09      	ldr	r2, [pc, #36]	; (8006584 <UART_SetConfig+0x38c>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4432      	add	r2, r6
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	377c      	adds	r7, #124	; 0x7c
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	40011000 	.word	0x40011000
 8006580:	40011400 	.word	0x40011400
 8006584:	51eb851f 	.word	0x51eb851f

08006588 <atoi>:
 8006588:	220a      	movs	r2, #10
 800658a:	2100      	movs	r1, #0
 800658c:	f000 bd40 	b.w	8007010 <strtol>

08006590 <__errno>:
 8006590:	4b01      	ldr	r3, [pc, #4]	; (8006598 <__errno+0x8>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000024 	.word	0x20000024

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	; (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	; (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	; (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	; (80065e0 <__libc_init_array+0x44>)
 80065b0:	f002 ff44 	bl	800943c <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	0800986c 	.word	0x0800986c
 80065d8:	0800986c 	.word	0x0800986c
 80065dc:	0800986c 	.word	0x0800986c
 80065e0:	08009870 	.word	0x08009870

080065e4 <memset>:
 80065e4:	4402      	add	r2, r0
 80065e6:	4603      	mov	r3, r0
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d100      	bne.n	80065ee <memset+0xa>
 80065ec:	4770      	bx	lr
 80065ee:	f803 1b01 	strb.w	r1, [r3], #1
 80065f2:	e7f9      	b.n	80065e8 <memset+0x4>

080065f4 <__cvt>:
 80065f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f8:	ec55 4b10 	vmov	r4, r5, d0
 80065fc:	2d00      	cmp	r5, #0
 80065fe:	460e      	mov	r6, r1
 8006600:	4619      	mov	r1, r3
 8006602:	462b      	mov	r3, r5
 8006604:	bfbb      	ittet	lt
 8006606:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800660a:	461d      	movlt	r5, r3
 800660c:	2300      	movge	r3, #0
 800660e:	232d      	movlt	r3, #45	; 0x2d
 8006610:	700b      	strb	r3, [r1, #0]
 8006612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006618:	4691      	mov	r9, r2
 800661a:	f023 0820 	bic.w	r8, r3, #32
 800661e:	bfbc      	itt	lt
 8006620:	4622      	movlt	r2, r4
 8006622:	4614      	movlt	r4, r2
 8006624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006628:	d005      	beq.n	8006636 <__cvt+0x42>
 800662a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800662e:	d100      	bne.n	8006632 <__cvt+0x3e>
 8006630:	3601      	adds	r6, #1
 8006632:	2102      	movs	r1, #2
 8006634:	e000      	b.n	8006638 <__cvt+0x44>
 8006636:	2103      	movs	r1, #3
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	ab02      	add	r3, sp, #8
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	ec45 4b10 	vmov	d0, r4, r5
 8006644:	4653      	mov	r3, sl
 8006646:	4632      	mov	r2, r6
 8006648:	f000 fd7a 	bl	8007140 <_dtoa_r>
 800664c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006650:	4607      	mov	r7, r0
 8006652:	d102      	bne.n	800665a <__cvt+0x66>
 8006654:	f019 0f01 	tst.w	r9, #1
 8006658:	d022      	beq.n	80066a0 <__cvt+0xac>
 800665a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800665e:	eb07 0906 	add.w	r9, r7, r6
 8006662:	d110      	bne.n	8006686 <__cvt+0x92>
 8006664:	783b      	ldrb	r3, [r7, #0]
 8006666:	2b30      	cmp	r3, #48	; 0x30
 8006668:	d10a      	bne.n	8006680 <__cvt+0x8c>
 800666a:	2200      	movs	r2, #0
 800666c:	2300      	movs	r3, #0
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7fa fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006676:	b918      	cbnz	r0, 8006680 <__cvt+0x8c>
 8006678:	f1c6 0601 	rsb	r6, r6, #1
 800667c:	f8ca 6000 	str.w	r6, [sl]
 8006680:	f8da 3000 	ldr.w	r3, [sl]
 8006684:	4499      	add	r9, r3
 8006686:	2200      	movs	r2, #0
 8006688:	2300      	movs	r3, #0
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7fa fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006692:	b108      	cbz	r0, 8006698 <__cvt+0xa4>
 8006694:	f8cd 900c 	str.w	r9, [sp, #12]
 8006698:	2230      	movs	r2, #48	; 0x30
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	454b      	cmp	r3, r9
 800669e:	d307      	bcc.n	80066b0 <__cvt+0xbc>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066a4:	1bdb      	subs	r3, r3, r7
 80066a6:	4638      	mov	r0, r7
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	b004      	add	sp, #16
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	9103      	str	r1, [sp, #12]
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e7f0      	b.n	800669a <__cvt+0xa6>

080066b8 <__exponent>:
 80066b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ba:	4603      	mov	r3, r0
 80066bc:	2900      	cmp	r1, #0
 80066be:	bfb8      	it	lt
 80066c0:	4249      	neglt	r1, r1
 80066c2:	f803 2b02 	strb.w	r2, [r3], #2
 80066c6:	bfb4      	ite	lt
 80066c8:	222d      	movlt	r2, #45	; 0x2d
 80066ca:	222b      	movge	r2, #43	; 0x2b
 80066cc:	2909      	cmp	r1, #9
 80066ce:	7042      	strb	r2, [r0, #1]
 80066d0:	dd2a      	ble.n	8006728 <__exponent+0x70>
 80066d2:	f10d 0407 	add.w	r4, sp, #7
 80066d6:	46a4      	mov	ip, r4
 80066d8:	270a      	movs	r7, #10
 80066da:	46a6      	mov	lr, r4
 80066dc:	460a      	mov	r2, r1
 80066de:	fb91 f6f7 	sdiv	r6, r1, r7
 80066e2:	fb07 1516 	mls	r5, r7, r6, r1
 80066e6:	3530      	adds	r5, #48	; 0x30
 80066e8:	2a63      	cmp	r2, #99	; 0x63
 80066ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066f2:	4631      	mov	r1, r6
 80066f4:	dcf1      	bgt.n	80066da <__exponent+0x22>
 80066f6:	3130      	adds	r1, #48	; 0x30
 80066f8:	f1ae 0502 	sub.w	r5, lr, #2
 80066fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006700:	1c44      	adds	r4, r0, #1
 8006702:	4629      	mov	r1, r5
 8006704:	4561      	cmp	r1, ip
 8006706:	d30a      	bcc.n	800671e <__exponent+0x66>
 8006708:	f10d 0209 	add.w	r2, sp, #9
 800670c:	eba2 020e 	sub.w	r2, r2, lr
 8006710:	4565      	cmp	r5, ip
 8006712:	bf88      	it	hi
 8006714:	2200      	movhi	r2, #0
 8006716:	4413      	add	r3, r2
 8006718:	1a18      	subs	r0, r3, r0
 800671a:	b003      	add	sp, #12
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006726:	e7ed      	b.n	8006704 <__exponent+0x4c>
 8006728:	2330      	movs	r3, #48	; 0x30
 800672a:	3130      	adds	r1, #48	; 0x30
 800672c:	7083      	strb	r3, [r0, #2]
 800672e:	70c1      	strb	r1, [r0, #3]
 8006730:	1d03      	adds	r3, r0, #4
 8006732:	e7f1      	b.n	8006718 <__exponent+0x60>

08006734 <_printf_float>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	ed2d 8b02 	vpush	{d8}
 800673c:	b08d      	sub	sp, #52	; 0x34
 800673e:	460c      	mov	r4, r1
 8006740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006744:	4616      	mov	r6, r2
 8006746:	461f      	mov	r7, r3
 8006748:	4605      	mov	r5, r0
 800674a:	f001 fae5 	bl	8007d18 <_localeconv_r>
 800674e:	f8d0 a000 	ldr.w	sl, [r0]
 8006752:	4650      	mov	r0, sl
 8006754:	f7f9 fd44 	bl	80001e0 <strlen>
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	; 0x28
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	9305      	str	r3, [sp, #20]
 8006760:	f8d8 3000 	ldr.w	r3, [r8]
 8006764:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006768:	3307      	adds	r3, #7
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	f103 0208 	add.w	r2, r3, #8
 8006772:	f8c8 2000 	str.w	r2, [r8]
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800677e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	f8cd 8018 	str.w	r8, [sp, #24]
 800678c:	ee08 0a10 	vmov	s16, r0
 8006790:	4b9f      	ldr	r3, [pc, #636]	; (8006a10 <_printf_float+0x2dc>)
 8006792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	f7fa f9cf 	bl	8000b3c <__aeabi_dcmpun>
 800679e:	bb88      	cbnz	r0, 8006804 <_printf_float+0xd0>
 80067a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a4:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <_printf_float+0x2dc>)
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	f7fa f9a9 	bl	8000b00 <__aeabi_dcmple>
 80067ae:	bb48      	cbnz	r0, 8006804 <_printf_float+0xd0>
 80067b0:	2200      	movs	r2, #0
 80067b2:	2300      	movs	r3, #0
 80067b4:	4640      	mov	r0, r8
 80067b6:	4649      	mov	r1, r9
 80067b8:	f7fa f998 	bl	8000aec <__aeabi_dcmplt>
 80067bc:	b110      	cbz	r0, 80067c4 <_printf_float+0x90>
 80067be:	232d      	movs	r3, #45	; 0x2d
 80067c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c4:	4b93      	ldr	r3, [pc, #588]	; (8006a14 <_printf_float+0x2e0>)
 80067c6:	4894      	ldr	r0, [pc, #592]	; (8006a18 <_printf_float+0x2e4>)
 80067c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067cc:	bf94      	ite	ls
 80067ce:	4698      	movls	r8, r3
 80067d0:	4680      	movhi	r8, r0
 80067d2:	2303      	movs	r3, #3
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	f023 0204 	bic.w	r2, r3, #4
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	f04f 0900 	mov.w	r9, #0
 80067e2:	9700      	str	r7, [sp, #0]
 80067e4:	4633      	mov	r3, r6
 80067e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f9d8 	bl	8006ba0 <_printf_common>
 80067f0:	3001      	adds	r0, #1
 80067f2:	f040 8090 	bne.w	8006916 <_printf_float+0x1e2>
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	b00d      	add	sp, #52	; 0x34
 80067fc:	ecbd 8b02 	vpop	{d8}
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7fa f996 	bl	8000b3c <__aeabi_dcmpun>
 8006810:	b140      	cbz	r0, 8006824 <_printf_float+0xf0>
 8006812:	464b      	mov	r3, r9
 8006814:	2b00      	cmp	r3, #0
 8006816:	bfbc      	itt	lt
 8006818:	232d      	movlt	r3, #45	; 0x2d
 800681a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800681e:	487f      	ldr	r0, [pc, #508]	; (8006a1c <_printf_float+0x2e8>)
 8006820:	4b7f      	ldr	r3, [pc, #508]	; (8006a20 <_printf_float+0x2ec>)
 8006822:	e7d1      	b.n	80067c8 <_printf_float+0x94>
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800682a:	9206      	str	r2, [sp, #24]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	d13f      	bne.n	80068b0 <_printf_float+0x17c>
 8006830:	2306      	movs	r3, #6
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	6861      	ldr	r1, [r4, #4]
 8006838:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800683c:	2300      	movs	r3, #0
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	ab0a      	add	r3, sp, #40	; 0x28
 8006842:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006846:	ab09      	add	r3, sp, #36	; 0x24
 8006848:	ec49 8b10 	vmov	d0, r8, r9
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6022      	str	r2, [r4, #0]
 8006850:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006854:	4628      	mov	r0, r5
 8006856:	f7ff fecd 	bl	80065f4 <__cvt>
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800685e:	2b47      	cmp	r3, #71	; 0x47
 8006860:	4680      	mov	r8, r0
 8006862:	d108      	bne.n	8006876 <_printf_float+0x142>
 8006864:	1cc8      	adds	r0, r1, #3
 8006866:	db02      	blt.n	800686e <_printf_float+0x13a>
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	4299      	cmp	r1, r3
 800686c:	dd41      	ble.n	80068f2 <_printf_float+0x1be>
 800686e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006872:	fa5f fb8b 	uxtb.w	fp, fp
 8006876:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800687a:	d820      	bhi.n	80068be <_printf_float+0x18a>
 800687c:	3901      	subs	r1, #1
 800687e:	465a      	mov	r2, fp
 8006880:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006884:	9109      	str	r1, [sp, #36]	; 0x24
 8006886:	f7ff ff17 	bl	80066b8 <__exponent>
 800688a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800688c:	1813      	adds	r3, r2, r0
 800688e:	2a01      	cmp	r2, #1
 8006890:	4681      	mov	r9, r0
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	dc02      	bgt.n	800689c <_printf_float+0x168>
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	07d2      	lsls	r2, r2, #31
 800689a:	d501      	bpl.n	80068a0 <_printf_float+0x16c>
 800689c:	3301      	adds	r3, #1
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d09c      	beq.n	80067e2 <_printf_float+0xae>
 80068a8:	232d      	movs	r3, #45	; 0x2d
 80068aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ae:	e798      	b.n	80067e2 <_printf_float+0xae>
 80068b0:	9a06      	ldr	r2, [sp, #24]
 80068b2:	2a47      	cmp	r2, #71	; 0x47
 80068b4:	d1be      	bne.n	8006834 <_printf_float+0x100>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1bc      	bne.n	8006834 <_printf_float+0x100>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7b9      	b.n	8006832 <_printf_float+0xfe>
 80068be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068c2:	d118      	bne.n	80068f6 <_printf_float+0x1c2>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	dd0b      	ble.n	80068e2 <_printf_float+0x1ae>
 80068ca:	6121      	str	r1, [r4, #16]
 80068cc:	b913      	cbnz	r3, 80068d4 <_printf_float+0x1a0>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	07d0      	lsls	r0, r2, #31
 80068d2:	d502      	bpl.n	80068da <_printf_float+0x1a6>
 80068d4:	3301      	adds	r3, #1
 80068d6:	440b      	add	r3, r1
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	65a1      	str	r1, [r4, #88]	; 0x58
 80068dc:	f04f 0900 	mov.w	r9, #0
 80068e0:	e7de      	b.n	80068a0 <_printf_float+0x16c>
 80068e2:	b913      	cbnz	r3, 80068ea <_printf_float+0x1b6>
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	07d2      	lsls	r2, r2, #31
 80068e8:	d501      	bpl.n	80068ee <_printf_float+0x1ba>
 80068ea:	3302      	adds	r3, #2
 80068ec:	e7f4      	b.n	80068d8 <_printf_float+0x1a4>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e7f2      	b.n	80068d8 <_printf_float+0x1a4>
 80068f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f8:	4299      	cmp	r1, r3
 80068fa:	db05      	blt.n	8006908 <_printf_float+0x1d4>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	6121      	str	r1, [r4, #16]
 8006900:	07d8      	lsls	r0, r3, #31
 8006902:	d5ea      	bpl.n	80068da <_printf_float+0x1a6>
 8006904:	1c4b      	adds	r3, r1, #1
 8006906:	e7e7      	b.n	80068d8 <_printf_float+0x1a4>
 8006908:	2900      	cmp	r1, #0
 800690a:	bfd4      	ite	le
 800690c:	f1c1 0202 	rsble	r2, r1, #2
 8006910:	2201      	movgt	r2, #1
 8006912:	4413      	add	r3, r2
 8006914:	e7e0      	b.n	80068d8 <_printf_float+0x1a4>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	055a      	lsls	r2, r3, #21
 800691a:	d407      	bmi.n	800692c <_printf_float+0x1f8>
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	4642      	mov	r2, r8
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	d12c      	bne.n	8006984 <_printf_float+0x250>
 800692a:	e764      	b.n	80067f6 <_printf_float+0xc2>
 800692c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006930:	f240 80e0 	bls.w	8006af4 <_printf_float+0x3c0>
 8006934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006938:	2200      	movs	r2, #0
 800693a:	2300      	movs	r3, #0
 800693c:	f7fa f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d034      	beq.n	80069ae <_printf_float+0x27a>
 8006944:	4a37      	ldr	r2, [pc, #220]	; (8006a24 <_printf_float+0x2f0>)
 8006946:	2301      	movs	r3, #1
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af51 	beq.w	80067f6 <_printf_float+0xc2>
 8006954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006958:	429a      	cmp	r2, r3
 800695a:	db02      	blt.n	8006962 <_printf_float+0x22e>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07d8      	lsls	r0, r3, #31
 8006960:	d510      	bpl.n	8006984 <_printf_float+0x250>
 8006962:	ee18 3a10 	vmov	r3, s16
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af41 	beq.w	80067f6 <_printf_float+0xc2>
 8006974:	f04f 0800 	mov.w	r8, #0
 8006978:	f104 091a 	add.w	r9, r4, #26
 800697c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697e:	3b01      	subs	r3, #1
 8006980:	4543      	cmp	r3, r8
 8006982:	dc09      	bgt.n	8006998 <_printf_float+0x264>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	f100 8105 	bmi.w	8006b96 <_printf_float+0x462>
 800698c:	68e0      	ldr	r0, [r4, #12]
 800698e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006990:	4298      	cmp	r0, r3
 8006992:	bfb8      	it	lt
 8006994:	4618      	movlt	r0, r3
 8006996:	e730      	b.n	80067fa <_printf_float+0xc6>
 8006998:	2301      	movs	r3, #1
 800699a:	464a      	mov	r2, r9
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f af27 	beq.w	80067f6 <_printf_float+0xc2>
 80069a8:	f108 0801 	add.w	r8, r8, #1
 80069ac:	e7e6      	b.n	800697c <_printf_float+0x248>
 80069ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dc39      	bgt.n	8006a28 <_printf_float+0x2f4>
 80069b4:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <_printf_float+0x2f0>)
 80069b6:	2301      	movs	r3, #1
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af19 	beq.w	80067f6 <_printf_float+0xc2>
 80069c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d102      	bne.n	80069d2 <_printf_float+0x29e>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d5d8      	bpl.n	8006984 <_printf_float+0x250>
 80069d2:	ee18 3a10 	vmov	r3, s16
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af09 	beq.w	80067f6 <_printf_float+0xc2>
 80069e4:	f04f 0900 	mov.w	r9, #0
 80069e8:	f104 0a1a 	add.w	sl, r4, #26
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	425b      	negs	r3, r3
 80069f0:	454b      	cmp	r3, r9
 80069f2:	dc01      	bgt.n	80069f8 <_printf_float+0x2c4>
 80069f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f6:	e792      	b.n	800691e <_printf_float+0x1ea>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4652      	mov	r2, sl
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f aef7 	beq.w	80067f6 <_printf_float+0xc2>
 8006a08:	f109 0901 	add.w	r9, r9, #1
 8006a0c:	e7ee      	b.n	80069ec <_printf_float+0x2b8>
 8006a0e:	bf00      	nop
 8006a10:	7fefffff 	.word	0x7fefffff
 8006a14:	08009480 	.word	0x08009480
 8006a18:	08009484 	.word	0x08009484
 8006a1c:	0800948c 	.word	0x0800948c
 8006a20:	08009488 	.word	0x08009488
 8006a24:	08009490 	.word	0x08009490
 8006a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bfa8      	it	ge
 8006a30:	461a      	movge	r2, r3
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	4691      	mov	r9, r2
 8006a36:	dc37      	bgt.n	8006aa8 <_printf_float+0x374>
 8006a38:	f04f 0b00 	mov.w	fp, #0
 8006a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a40:	f104 021a 	add.w	r2, r4, #26
 8006a44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	eba3 0309 	sub.w	r3, r3, r9
 8006a4c:	455b      	cmp	r3, fp
 8006a4e:	dc33      	bgt.n	8006ab8 <_printf_float+0x384>
 8006a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a54:	429a      	cmp	r2, r3
 8006a56:	db3b      	blt.n	8006ad0 <_printf_float+0x39c>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	07da      	lsls	r2, r3, #31
 8006a5c:	d438      	bmi.n	8006ad0 <_printf_float+0x39c>
 8006a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a60:	9b05      	ldr	r3, [sp, #20]
 8006a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	eba2 0901 	sub.w	r9, r2, r1
 8006a6a:	4599      	cmp	r9, r3
 8006a6c:	bfa8      	it	ge
 8006a6e:	4699      	movge	r9, r3
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	dc35      	bgt.n	8006ae2 <_printf_float+0x3ae>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7e:	f104 0a1a 	add.w	sl, r4, #26
 8006a82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	eba3 0309 	sub.w	r3, r3, r9
 8006a8c:	4543      	cmp	r3, r8
 8006a8e:	f77f af79 	ble.w	8006984 <_printf_float+0x250>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4652      	mov	r2, sl
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f aeaa 	beq.w	80067f6 <_printf_float+0xc2>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	e7ec      	b.n	8006a82 <_printf_float+0x34e>
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4642      	mov	r2, r8
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d1c0      	bne.n	8006a38 <_printf_float+0x304>
 8006ab6:	e69e      	b.n	80067f6 <_printf_float+0xc2>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	9205      	str	r2, [sp, #20]
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f ae97 	beq.w	80067f6 <_printf_float+0xc2>
 8006ac8:	9a05      	ldr	r2, [sp, #20]
 8006aca:	f10b 0b01 	add.w	fp, fp, #1
 8006ace:	e7b9      	b.n	8006a44 <_printf_float+0x310>
 8006ad0:	ee18 3a10 	vmov	r3, s16
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1be      	bne.n	8006a5e <_printf_float+0x32a>
 8006ae0:	e689      	b.n	80067f6 <_printf_float+0xc2>
 8006ae2:	9a05      	ldr	r2, [sp, #20]
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4442      	add	r2, r8
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	d1c1      	bne.n	8006a76 <_printf_float+0x342>
 8006af2:	e680      	b.n	80067f6 <_printf_float+0xc2>
 8006af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af6:	2a01      	cmp	r2, #1
 8006af8:	dc01      	bgt.n	8006afe <_printf_float+0x3ca>
 8006afa:	07db      	lsls	r3, r3, #31
 8006afc:	d538      	bpl.n	8006b70 <_printf_float+0x43c>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4642      	mov	r2, r8
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae74 	beq.w	80067f6 <_printf_float+0xc2>
 8006b0e:	ee18 3a10 	vmov	r3, s16
 8006b12:	4652      	mov	r2, sl
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f ae6b 	beq.w	80067f6 <_printf_float+0xc2>
 8006b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	f7f9 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b2c:	b9d8      	cbnz	r0, 8006b66 <_printf_float+0x432>
 8006b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b30:	f108 0201 	add.w	r2, r8, #1
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d10e      	bne.n	8006b5e <_printf_float+0x42a>
 8006b40:	e659      	b.n	80067f6 <_printf_float+0xc2>
 8006b42:	2301      	movs	r3, #1
 8006b44:	4652      	mov	r2, sl
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f ae52 	beq.w	80067f6 <_printf_float+0xc2>
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	4543      	cmp	r3, r8
 8006b5c:	dcf1      	bgt.n	8006b42 <_printf_float+0x40e>
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b64:	e6dc      	b.n	8006920 <_printf_float+0x1ec>
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	f104 0a1a 	add.w	sl, r4, #26
 8006b6e:	e7f2      	b.n	8006b56 <_printf_float+0x422>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4642      	mov	r2, r8
 8006b74:	e7df      	b.n	8006b36 <_printf_float+0x402>
 8006b76:	2301      	movs	r3, #1
 8006b78:	464a      	mov	r2, r9
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f ae38 	beq.w	80067f6 <_printf_float+0xc2>
 8006b86:	f108 0801 	add.w	r8, r8, #1
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b8e:	1a5b      	subs	r3, r3, r1
 8006b90:	4543      	cmp	r3, r8
 8006b92:	dcf0      	bgt.n	8006b76 <_printf_float+0x442>
 8006b94:	e6fa      	b.n	800698c <_printf_float+0x258>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	f104 0919 	add.w	r9, r4, #25
 8006b9e:	e7f4      	b.n	8006b8a <_printf_float+0x456>

08006ba0 <_printf_common>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	4699      	mov	r9, r3
 8006ba8:	688a      	ldr	r2, [r1, #8]
 8006baa:	690b      	ldr	r3, [r1, #16]
 8006bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bfb8      	it	lt
 8006bb4:	4613      	movlt	r3, r2
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b10a      	cbz	r2, 8006bc6 <_printf_common+0x26>
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	6033      	str	r3, [r6, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	0699      	lsls	r1, r3, #26
 8006bca:	bf42      	ittt	mi
 8006bcc:	6833      	ldrmi	r3, [r6, #0]
 8006bce:	3302      	addmi	r3, #2
 8006bd0:	6033      	strmi	r3, [r6, #0]
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	f015 0506 	ands.w	r5, r5, #6
 8006bd8:	d106      	bne.n	8006be8 <_printf_common+0x48>
 8006bda:	f104 0a19 	add.w	sl, r4, #25
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	6832      	ldr	r2, [r6, #0]
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dc26      	bgt.n	8006c36 <_printf_common+0x96>
 8006be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bec:	1e13      	subs	r3, r2, #0
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	bf18      	it	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	0692      	lsls	r2, r2, #26
 8006bf6:	d42b      	bmi.n	8006c50 <_printf_common+0xb0>
 8006bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c0      	blx	r8
 8006c02:	3001      	adds	r0, #1
 8006c04:	d01e      	beq.n	8006c44 <_printf_common+0xa4>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	68e5      	ldr	r5, [r4, #12]
 8006c0a:	6832      	ldr	r2, [r6, #0]
 8006c0c:	f003 0306 	and.w	r3, r3, #6
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	bf08      	it	eq
 8006c14:	1aad      	subeq	r5, r5, r2
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	6922      	ldr	r2, [r4, #16]
 8006c1a:	bf0c      	ite	eq
 8006c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c20:	2500      	movne	r5, #0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bfc4      	itt	gt
 8006c26:	1a9b      	subgt	r3, r3, r2
 8006c28:	18ed      	addgt	r5, r5, r3
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	341a      	adds	r4, #26
 8006c2e:	42b5      	cmp	r5, r6
 8006c30:	d11a      	bne.n	8006c68 <_printf_common+0xc8>
 8006c32:	2000      	movs	r0, #0
 8006c34:	e008      	b.n	8006c48 <_printf_common+0xa8>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	47c0      	blx	r8
 8006c40:	3001      	adds	r0, #1
 8006c42:	d103      	bne.n	8006c4c <_printf_common+0xac>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	e7c6      	b.n	8006bde <_printf_common+0x3e>
 8006c50:	18e1      	adds	r1, r4, r3
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	2030      	movs	r0, #48	; 0x30
 8006c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c5a:	4422      	add	r2, r4
 8006c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c64:	3302      	adds	r3, #2
 8006c66:	e7c7      	b.n	8006bf8 <_printf_common+0x58>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	3001      	adds	r0, #1
 8006c74:	d0e6      	beq.n	8006c44 <_printf_common+0xa4>
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7d9      	b.n	8006c2e <_printf_common+0x8e>
	...

08006c7c <_printf_i>:
 8006c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	4691      	mov	r9, r2
 8006c84:	7e27      	ldrb	r7, [r4, #24]
 8006c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c88:	2f78      	cmp	r7, #120	; 0x78
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	469a      	mov	sl, r3
 8006c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c92:	d807      	bhi.n	8006ca4 <_printf_i+0x28>
 8006c94:	2f62      	cmp	r7, #98	; 0x62
 8006c96:	d80a      	bhi.n	8006cae <_printf_i+0x32>
 8006c98:	2f00      	cmp	r7, #0
 8006c9a:	f000 80d8 	beq.w	8006e4e <_printf_i+0x1d2>
 8006c9e:	2f58      	cmp	r7, #88	; 0x58
 8006ca0:	f000 80a3 	beq.w	8006dea <_printf_i+0x16e>
 8006ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cac:	e03a      	b.n	8006d24 <_printf_i+0xa8>
 8006cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cb2:	2b15      	cmp	r3, #21
 8006cb4:	d8f6      	bhi.n	8006ca4 <_printf_i+0x28>
 8006cb6:	a001      	add	r0, pc, #4	; (adr r0, 8006cbc <_printf_i+0x40>)
 8006cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cbc:	08006d15 	.word	0x08006d15
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006ca5 	.word	0x08006ca5
 8006cc8:	08006ca5 	.word	0x08006ca5
 8006ccc:	08006ca5 	.word	0x08006ca5
 8006cd0:	08006ca5 	.word	0x08006ca5
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006ca5 	.word	0x08006ca5
 8006cdc:	08006ca5 	.word	0x08006ca5
 8006ce0:	08006ca5 	.word	0x08006ca5
 8006ce4:	08006ca5 	.word	0x08006ca5
 8006ce8:	08006e35 	.word	0x08006e35
 8006cec:	08006d59 	.word	0x08006d59
 8006cf0:	08006e17 	.word	0x08006e17
 8006cf4:	08006ca5 	.word	0x08006ca5
 8006cf8:	08006ca5 	.word	0x08006ca5
 8006cfc:	08006e57 	.word	0x08006e57
 8006d00:	08006ca5 	.word	0x08006ca5
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006ca5 	.word	0x08006ca5
 8006d0c:	08006ca5 	.word	0x08006ca5
 8006d10:	08006e1f 	.word	0x08006e1f
 8006d14:	680b      	ldr	r3, [r1, #0]
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	600a      	str	r2, [r1, #0]
 8006d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0a3      	b.n	8006e70 <_printf_i+0x1f4>
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	6808      	ldr	r0, [r1, #0]
 8006d2c:	062e      	lsls	r6, r5, #24
 8006d2e:	f100 0304 	add.w	r3, r0, #4
 8006d32:	d50a      	bpl.n	8006d4a <_printf_i+0xce>
 8006d34:	6805      	ldr	r5, [r0, #0]
 8006d36:	600b      	str	r3, [r1, #0]
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	da03      	bge.n	8006d44 <_printf_i+0xc8>
 8006d3c:	232d      	movs	r3, #45	; 0x2d
 8006d3e:	426d      	negs	r5, r5
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d44:	485e      	ldr	r0, [pc, #376]	; (8006ec0 <_printf_i+0x244>)
 8006d46:	230a      	movs	r3, #10
 8006d48:	e019      	b.n	8006d7e <_printf_i+0x102>
 8006d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d4e:	6805      	ldr	r5, [r0, #0]
 8006d50:	600b      	str	r3, [r1, #0]
 8006d52:	bf18      	it	ne
 8006d54:	b22d      	sxthne	r5, r5
 8006d56:	e7ef      	b.n	8006d38 <_printf_i+0xbc>
 8006d58:	680b      	ldr	r3, [r1, #0]
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	1d18      	adds	r0, r3, #4
 8006d5e:	6008      	str	r0, [r1, #0]
 8006d60:	0628      	lsls	r0, r5, #24
 8006d62:	d501      	bpl.n	8006d68 <_printf_i+0xec>
 8006d64:	681d      	ldr	r5, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <_printf_i+0xf2>
 8006d68:	0669      	lsls	r1, r5, #25
 8006d6a:	d5fb      	bpl.n	8006d64 <_printf_i+0xe8>
 8006d6c:	881d      	ldrh	r5, [r3, #0]
 8006d6e:	4854      	ldr	r0, [pc, #336]	; (8006ec0 <_printf_i+0x244>)
 8006d70:	2f6f      	cmp	r7, #111	; 0x6f
 8006d72:	bf0c      	ite	eq
 8006d74:	2308      	moveq	r3, #8
 8006d76:	230a      	movne	r3, #10
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d7e:	6866      	ldr	r6, [r4, #4]
 8006d80:	60a6      	str	r6, [r4, #8]
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	bfa2      	ittt	ge
 8006d86:	6821      	ldrge	r1, [r4, #0]
 8006d88:	f021 0104 	bicge.w	r1, r1, #4
 8006d8c:	6021      	strge	r1, [r4, #0]
 8006d8e:	b90d      	cbnz	r5, 8006d94 <_printf_i+0x118>
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d04d      	beq.n	8006e30 <_printf_i+0x1b4>
 8006d94:	4616      	mov	r6, r2
 8006d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d9e:	5dc7      	ldrb	r7, [r0, r7]
 8006da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006da4:	462f      	mov	r7, r5
 8006da6:	42bb      	cmp	r3, r7
 8006da8:	460d      	mov	r5, r1
 8006daa:	d9f4      	bls.n	8006d96 <_printf_i+0x11a>
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d10b      	bne.n	8006dc8 <_printf_i+0x14c>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	07df      	lsls	r7, r3, #31
 8006db4:	d508      	bpl.n	8006dc8 <_printf_i+0x14c>
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	6861      	ldr	r1, [r4, #4]
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	bfde      	ittt	le
 8006dbe:	2330      	movle	r3, #48	; 0x30
 8006dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dc8:	1b92      	subs	r2, r2, r6
 8006dca:	6122      	str	r2, [r4, #16]
 8006dcc:	f8cd a000 	str.w	sl, [sp]
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	aa03      	add	r2, sp, #12
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	f7ff fee2 	bl	8006ba0 <_printf_common>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d14c      	bne.n	8006e7a <_printf_i+0x1fe>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	b004      	add	sp, #16
 8006de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dea:	4835      	ldr	r0, [pc, #212]	; (8006ec0 <_printf_i+0x244>)
 8006dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	680e      	ldr	r6, [r1, #0]
 8006df4:	061f      	lsls	r7, r3, #24
 8006df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dfa:	600e      	str	r6, [r1, #0]
 8006dfc:	d514      	bpl.n	8006e28 <_printf_i+0x1ac>
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	bf44      	itt	mi
 8006e02:	f043 0320 	orrmi.w	r3, r3, #32
 8006e06:	6023      	strmi	r3, [r4, #0]
 8006e08:	b91d      	cbnz	r5, 8006e12 <_printf_i+0x196>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f023 0320 	bic.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	2310      	movs	r3, #16
 8006e14:	e7b0      	b.n	8006d78 <_printf_i+0xfc>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f043 0320 	orr.w	r3, r3, #32
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	2378      	movs	r3, #120	; 0x78
 8006e20:	4828      	ldr	r0, [pc, #160]	; (8006ec4 <_printf_i+0x248>)
 8006e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e26:	e7e3      	b.n	8006df0 <_printf_i+0x174>
 8006e28:	065e      	lsls	r6, r3, #25
 8006e2a:	bf48      	it	mi
 8006e2c:	b2ad      	uxthmi	r5, r5
 8006e2e:	e7e6      	b.n	8006dfe <_printf_i+0x182>
 8006e30:	4616      	mov	r6, r2
 8006e32:	e7bb      	b.n	8006dac <_printf_i+0x130>
 8006e34:	680b      	ldr	r3, [r1, #0]
 8006e36:	6826      	ldr	r6, [r4, #0]
 8006e38:	6960      	ldr	r0, [r4, #20]
 8006e3a:	1d1d      	adds	r5, r3, #4
 8006e3c:	600d      	str	r5, [r1, #0]
 8006e3e:	0635      	lsls	r5, r6, #24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	d501      	bpl.n	8006e48 <_printf_i+0x1cc>
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <_printf_i+0x1d2>
 8006e48:	0671      	lsls	r1, r6, #25
 8006e4a:	d5fb      	bpl.n	8006e44 <_printf_i+0x1c8>
 8006e4c:	8018      	strh	r0, [r3, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	4616      	mov	r6, r2
 8006e54:	e7ba      	b.n	8006dcc <_printf_i+0x150>
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	600a      	str	r2, [r1, #0]
 8006e5c:	681e      	ldr	r6, [r3, #0]
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	2100      	movs	r1, #0
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7f9 f9c4 	bl	80001f0 <memchr>
 8006e68:	b108      	cbz	r0, 8006e6e <_printf_i+0x1f2>
 8006e6a:	1b80      	subs	r0, r0, r6
 8006e6c:	6060      	str	r0, [r4, #4]
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	2300      	movs	r3, #0
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e78:	e7a8      	b.n	8006dcc <_printf_i+0x150>
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4649      	mov	r1, r9
 8006e80:	4640      	mov	r0, r8
 8006e82:	47d0      	blx	sl
 8006e84:	3001      	adds	r0, #1
 8006e86:	d0ab      	beq.n	8006de0 <_printf_i+0x164>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	079b      	lsls	r3, r3, #30
 8006e8c:	d413      	bmi.n	8006eb6 <_printf_i+0x23a>
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	4298      	cmp	r0, r3
 8006e94:	bfb8      	it	lt
 8006e96:	4618      	movlt	r0, r3
 8006e98:	e7a4      	b.n	8006de4 <_printf_i+0x168>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	47d0      	blx	sl
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d09b      	beq.n	8006de0 <_printf_i+0x164>
 8006ea8:	3501      	adds	r5, #1
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	9903      	ldr	r1, [sp, #12]
 8006eae:	1a5b      	subs	r3, r3, r1
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dcf2      	bgt.n	8006e9a <_printf_i+0x21e>
 8006eb4:	e7eb      	b.n	8006e8e <_printf_i+0x212>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	f104 0619 	add.w	r6, r4, #25
 8006ebc:	e7f5      	b.n	8006eaa <_printf_i+0x22e>
 8006ebe:	bf00      	nop
 8006ec0:	08009492 	.word	0x08009492
 8006ec4:	080094a3 	.word	0x080094a3

08006ec8 <siprintf>:
 8006ec8:	b40e      	push	{r1, r2, r3}
 8006eca:	b500      	push	{lr}
 8006ecc:	b09c      	sub	sp, #112	; 0x70
 8006ece:	ab1d      	add	r3, sp, #116	; 0x74
 8006ed0:	9002      	str	r0, [sp, #8]
 8006ed2:	9006      	str	r0, [sp, #24]
 8006ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ed8:	4809      	ldr	r0, [pc, #36]	; (8006f00 <siprintf+0x38>)
 8006eda:	9107      	str	r1, [sp, #28]
 8006edc:	9104      	str	r1, [sp, #16]
 8006ede:	4909      	ldr	r1, [pc, #36]	; (8006f04 <siprintf+0x3c>)
 8006ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee4:	9105      	str	r1, [sp, #20]
 8006ee6:	6800      	ldr	r0, [r0, #0]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	a902      	add	r1, sp, #8
 8006eec:	f001 fbc2 	bl	8008674 <_svfiprintf_r>
 8006ef0:	9b02      	ldr	r3, [sp, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	b01c      	add	sp, #112	; 0x70
 8006ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006efc:	b003      	add	sp, #12
 8006efe:	4770      	bx	lr
 8006f00:	20000024 	.word	0x20000024
 8006f04:	ffff0208 	.word	0xffff0208

08006f08 <_strtol_l.isra.0>:
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0e:	d001      	beq.n	8006f14 <_strtol_l.isra.0+0xc>
 8006f10:	2b24      	cmp	r3, #36	; 0x24
 8006f12:	d906      	bls.n	8006f22 <_strtol_l.isra.0+0x1a>
 8006f14:	f7ff fb3c 	bl	8006590 <__errno>
 8006f18:	2316      	movs	r3, #22
 8006f1a:	6003      	str	r3, [r0, #0]
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	4f3a      	ldr	r7, [pc, #232]	; (800700c <_strtol_l.isra.0+0x104>)
 8006f24:	468e      	mov	lr, r1
 8006f26:	4676      	mov	r6, lr
 8006f28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f2c:	5de5      	ldrb	r5, [r4, r7]
 8006f2e:	f015 0508 	ands.w	r5, r5, #8
 8006f32:	d1f8      	bne.n	8006f26 <_strtol_l.isra.0+0x1e>
 8006f34:	2c2d      	cmp	r4, #45	; 0x2d
 8006f36:	d134      	bne.n	8006fa2 <_strtol_l.isra.0+0x9a>
 8006f38:	f89e 4000 	ldrb.w	r4, [lr]
 8006f3c:	f04f 0801 	mov.w	r8, #1
 8006f40:	f106 0e02 	add.w	lr, r6, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05c      	beq.n	8007002 <_strtol_l.isra.0+0xfa>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d10c      	bne.n	8006f66 <_strtol_l.isra.0+0x5e>
 8006f4c:	2c30      	cmp	r4, #48	; 0x30
 8006f4e:	d10a      	bne.n	8006f66 <_strtol_l.isra.0+0x5e>
 8006f50:	f89e 4000 	ldrb.w	r4, [lr]
 8006f54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006f58:	2c58      	cmp	r4, #88	; 0x58
 8006f5a:	d14d      	bne.n	8006ff8 <_strtol_l.isra.0+0xf0>
 8006f5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006f60:	2310      	movs	r3, #16
 8006f62:	f10e 0e02 	add.w	lr, lr, #2
 8006f66:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006f6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f6e:	2600      	movs	r6, #0
 8006f70:	fbbc f9f3 	udiv	r9, ip, r3
 8006f74:	4635      	mov	r5, r6
 8006f76:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006f7e:	2f09      	cmp	r7, #9
 8006f80:	d818      	bhi.n	8006fb4 <_strtol_l.isra.0+0xac>
 8006f82:	463c      	mov	r4, r7
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	dd24      	ble.n	8006fd2 <_strtol_l.isra.0+0xca>
 8006f88:	2e00      	cmp	r6, #0
 8006f8a:	db1f      	blt.n	8006fcc <_strtol_l.isra.0+0xc4>
 8006f8c:	45a9      	cmp	r9, r5
 8006f8e:	d31d      	bcc.n	8006fcc <_strtol_l.isra.0+0xc4>
 8006f90:	d101      	bne.n	8006f96 <_strtol_l.isra.0+0x8e>
 8006f92:	45a2      	cmp	sl, r4
 8006f94:	db1a      	blt.n	8006fcc <_strtol_l.isra.0+0xc4>
 8006f96:	fb05 4503 	mla	r5, r5, r3, r4
 8006f9a:	2601      	movs	r6, #1
 8006f9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006fa0:	e7eb      	b.n	8006f7a <_strtol_l.isra.0+0x72>
 8006fa2:	2c2b      	cmp	r4, #43	; 0x2b
 8006fa4:	bf08      	it	eq
 8006fa6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006faa:	46a8      	mov	r8, r5
 8006fac:	bf08      	it	eq
 8006fae:	f106 0e02 	addeq.w	lr, r6, #2
 8006fb2:	e7c7      	b.n	8006f44 <_strtol_l.isra.0+0x3c>
 8006fb4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006fb8:	2f19      	cmp	r7, #25
 8006fba:	d801      	bhi.n	8006fc0 <_strtol_l.isra.0+0xb8>
 8006fbc:	3c37      	subs	r4, #55	; 0x37
 8006fbe:	e7e1      	b.n	8006f84 <_strtol_l.isra.0+0x7c>
 8006fc0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006fc4:	2f19      	cmp	r7, #25
 8006fc6:	d804      	bhi.n	8006fd2 <_strtol_l.isra.0+0xca>
 8006fc8:	3c57      	subs	r4, #87	; 0x57
 8006fca:	e7db      	b.n	8006f84 <_strtol_l.isra.0+0x7c>
 8006fcc:	f04f 36ff 	mov.w	r6, #4294967295
 8006fd0:	e7e4      	b.n	8006f9c <_strtol_l.isra.0+0x94>
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	da05      	bge.n	8006fe2 <_strtol_l.isra.0+0xda>
 8006fd6:	2322      	movs	r3, #34	; 0x22
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	4665      	mov	r5, ip
 8006fdc:	b942      	cbnz	r2, 8006ff0 <_strtol_l.isra.0+0xe8>
 8006fde:	4628      	mov	r0, r5
 8006fe0:	e79d      	b.n	8006f1e <_strtol_l.isra.0+0x16>
 8006fe2:	f1b8 0f00 	cmp.w	r8, #0
 8006fe6:	d000      	beq.n	8006fea <_strtol_l.isra.0+0xe2>
 8006fe8:	426d      	negs	r5, r5
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	d0f7      	beq.n	8006fde <_strtol_l.isra.0+0xd6>
 8006fee:	b10e      	cbz	r6, 8006ff4 <_strtol_l.isra.0+0xec>
 8006ff0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	e7f2      	b.n	8006fde <_strtol_l.isra.0+0xd6>
 8006ff8:	2430      	movs	r4, #48	; 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1b3      	bne.n	8006f66 <_strtol_l.isra.0+0x5e>
 8006ffe:	2308      	movs	r3, #8
 8007000:	e7b1      	b.n	8006f66 <_strtol_l.isra.0+0x5e>
 8007002:	2c30      	cmp	r4, #48	; 0x30
 8007004:	d0a4      	beq.n	8006f50 <_strtol_l.isra.0+0x48>
 8007006:	230a      	movs	r3, #10
 8007008:	e7ad      	b.n	8006f66 <_strtol_l.isra.0+0x5e>
 800700a:	bf00      	nop
 800700c:	080094b5 	.word	0x080094b5

08007010 <strtol>:
 8007010:	4613      	mov	r3, r2
 8007012:	460a      	mov	r2, r1
 8007014:	4601      	mov	r1, r0
 8007016:	4802      	ldr	r0, [pc, #8]	; (8007020 <strtol+0x10>)
 8007018:	6800      	ldr	r0, [r0, #0]
 800701a:	f7ff bf75 	b.w	8006f08 <_strtol_l.isra.0>
 800701e:	bf00      	nop
 8007020:	20000024 	.word	0x20000024

08007024 <quorem>:
 8007024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	6903      	ldr	r3, [r0, #16]
 800702a:	690c      	ldr	r4, [r1, #16]
 800702c:	42a3      	cmp	r3, r4
 800702e:	4607      	mov	r7, r0
 8007030:	f2c0 8081 	blt.w	8007136 <quorem+0x112>
 8007034:	3c01      	subs	r4, #1
 8007036:	f101 0814 	add.w	r8, r1, #20
 800703a:	f100 0514 	add.w	r5, r0, #20
 800703e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704c:	3301      	adds	r3, #1
 800704e:	429a      	cmp	r2, r3
 8007050:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007058:	fbb2 f6f3 	udiv	r6, r2, r3
 800705c:	d331      	bcc.n	80070c2 <quorem+0x9e>
 800705e:	f04f 0e00 	mov.w	lr, #0
 8007062:	4640      	mov	r0, r8
 8007064:	46ac      	mov	ip, r5
 8007066:	46f2      	mov	sl, lr
 8007068:	f850 2b04 	ldr.w	r2, [r0], #4
 800706c:	b293      	uxth	r3, r2
 800706e:	fb06 e303 	mla	r3, r6, r3, lr
 8007072:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	ebaa 0303 	sub.w	r3, sl, r3
 800707c:	0c12      	lsrs	r2, r2, #16
 800707e:	f8dc a000 	ldr.w	sl, [ip]
 8007082:	fb06 e202 	mla	r2, r6, r2, lr
 8007086:	fa13 f38a 	uxtah	r3, r3, sl
 800708a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800708e:	fa1f fa82 	uxth.w	sl, r2
 8007092:	f8dc 2000 	ldr.w	r2, [ip]
 8007096:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800709a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a4:	4581      	cmp	r9, r0
 80070a6:	f84c 3b04 	str.w	r3, [ip], #4
 80070aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ae:	d2db      	bcs.n	8007068 <quorem+0x44>
 80070b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80070b4:	b92b      	cbnz	r3, 80070c2 <quorem+0x9e>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	3b04      	subs	r3, #4
 80070ba:	429d      	cmp	r5, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	d32e      	bcc.n	800711e <quorem+0xfa>
 80070c0:	613c      	str	r4, [r7, #16]
 80070c2:	4638      	mov	r0, r7
 80070c4:	f001 f8c0 	bl	8008248 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	db24      	blt.n	8007116 <quorem+0xf2>
 80070cc:	3601      	adds	r6, #1
 80070ce:	4628      	mov	r0, r5
 80070d0:	f04f 0c00 	mov.w	ip, #0
 80070d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80070d8:	f8d0 e000 	ldr.w	lr, [r0]
 80070dc:	b293      	uxth	r3, r2
 80070de:	ebac 0303 	sub.w	r3, ip, r3
 80070e2:	0c12      	lsrs	r2, r2, #16
 80070e4:	fa13 f38e 	uxtah	r3, r3, lr
 80070e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f6:	45c1      	cmp	r9, r8
 80070f8:	f840 3b04 	str.w	r3, [r0], #4
 80070fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007100:	d2e8      	bcs.n	80070d4 <quorem+0xb0>
 8007102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800710a:	b922      	cbnz	r2, 8007116 <quorem+0xf2>
 800710c:	3b04      	subs	r3, #4
 800710e:	429d      	cmp	r5, r3
 8007110:	461a      	mov	r2, r3
 8007112:	d30a      	bcc.n	800712a <quorem+0x106>
 8007114:	613c      	str	r4, [r7, #16]
 8007116:	4630      	mov	r0, r6
 8007118:	b003      	add	sp, #12
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	3b04      	subs	r3, #4
 8007122:	2a00      	cmp	r2, #0
 8007124:	d1cc      	bne.n	80070c0 <quorem+0x9c>
 8007126:	3c01      	subs	r4, #1
 8007128:	e7c7      	b.n	80070ba <quorem+0x96>
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	3b04      	subs	r3, #4
 800712e:	2a00      	cmp	r2, #0
 8007130:	d1f0      	bne.n	8007114 <quorem+0xf0>
 8007132:	3c01      	subs	r4, #1
 8007134:	e7eb      	b.n	800710e <quorem+0xea>
 8007136:	2000      	movs	r0, #0
 8007138:	e7ee      	b.n	8007118 <quorem+0xf4>
 800713a:	0000      	movs	r0, r0
 800713c:	0000      	movs	r0, r0
	...

08007140 <_dtoa_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	ec57 6b10 	vmov	r6, r7, d0
 800714c:	b095      	sub	sp, #84	; 0x54
 800714e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800715a:	4604      	mov	r4, r0
 800715c:	9209      	str	r2, [sp, #36]	; 0x24
 800715e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007160:	b975      	cbnz	r5, 8007180 <_dtoa_r+0x40>
 8007162:	2010      	movs	r0, #16
 8007164:	f000 fddc 	bl	8007d20 <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	6260      	str	r0, [r4, #36]	; 0x24
 800716c:	b920      	cbnz	r0, 8007178 <_dtoa_r+0x38>
 800716e:	4bb2      	ldr	r3, [pc, #712]	; (8007438 <_dtoa_r+0x2f8>)
 8007170:	21ea      	movs	r1, #234	; 0xea
 8007172:	48b2      	ldr	r0, [pc, #712]	; (800743c <_dtoa_r+0x2fc>)
 8007174:	f001 fb8e 	bl	8008894 <__assert_func>
 8007178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800717c:	6005      	str	r5, [r0, #0]
 800717e:	60c5      	str	r5, [r0, #12]
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	b151      	cbz	r1, 800719c <_dtoa_r+0x5c>
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	604a      	str	r2, [r1, #4]
 800718a:	2301      	movs	r3, #1
 800718c:	4093      	lsls	r3, r2
 800718e:	608b      	str	r3, [r1, #8]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fe1b 	bl	8007dcc <_Bfree>
 8007196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	1e3b      	subs	r3, r7, #0
 800719e:	bfb9      	ittee	lt
 80071a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	9303      	strlt	r3, [sp, #12]
 80071a6:	2300      	movge	r3, #0
 80071a8:	f8c8 3000 	strge.w	r3, [r8]
 80071ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071b0:	4ba3      	ldr	r3, [pc, #652]	; (8007440 <_dtoa_r+0x300>)
 80071b2:	bfbc      	itt	lt
 80071b4:	2201      	movlt	r2, #1
 80071b6:	f8c8 2000 	strlt.w	r2, [r8]
 80071ba:	ea33 0309 	bics.w	r3, r3, r9
 80071be:	d11b      	bne.n	80071f8 <_dtoa_r+0xb8>
 80071c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071cc:	4333      	orrs	r3, r6
 80071ce:	f000 857a 	beq.w	8007cc6 <_dtoa_r+0xb86>
 80071d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d4:	b963      	cbnz	r3, 80071f0 <_dtoa_r+0xb0>
 80071d6:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <_dtoa_r+0x304>)
 80071d8:	e024      	b.n	8007224 <_dtoa_r+0xe4>
 80071da:	4b9b      	ldr	r3, [pc, #620]	; (8007448 <_dtoa_r+0x308>)
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	9800      	ldr	r0, [sp, #0]
 80071e6:	b015      	add	sp, #84	; 0x54
 80071e8:	ecbd 8b02 	vpop	{d8}
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	4b94      	ldr	r3, [pc, #592]	; (8007444 <_dtoa_r+0x304>)
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	3303      	adds	r3, #3
 80071f6:	e7f3      	b.n	80071e0 <_dtoa_r+0xa0>
 80071f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	ec51 0b17 	vmov	r0, r1, d7
 8007202:	2300      	movs	r3, #0
 8007204:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007208:	f7f9 fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800720c:	4680      	mov	r8, r0
 800720e:	b158      	cbz	r0, 8007228 <_dtoa_r+0xe8>
 8007210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007212:	2301      	movs	r3, #1
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8551 	beq.w	8007cc0 <_dtoa_r+0xb80>
 800721e:	488b      	ldr	r0, [pc, #556]	; (800744c <_dtoa_r+0x30c>)
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	e7dd      	b.n	80071e4 <_dtoa_r+0xa4>
 8007228:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800722c:	aa12      	add	r2, sp, #72	; 0x48
 800722e:	a913      	add	r1, sp, #76	; 0x4c
 8007230:	4620      	mov	r0, r4
 8007232:	f001 f8ad 	bl	8008390 <__d2b>
 8007236:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800723a:	4683      	mov	fp, r0
 800723c:	2d00      	cmp	r5, #0
 800723e:	d07c      	beq.n	800733a <_dtoa_r+0x1fa>
 8007240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007242:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800724a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800724e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800725a:	4b7d      	ldr	r3, [pc, #500]	; (8007450 <_dtoa_r+0x310>)
 800725c:	2200      	movs	r2, #0
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 f819 	bl	8000298 <__aeabi_dsub>
 8007266:	a36e      	add	r3, pc, #440	; (adr r3, 8007420 <_dtoa_r+0x2e0>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9cc 	bl	8000608 <__aeabi_dmul>
 8007270:	a36d      	add	r3, pc, #436	; (adr r3, 8007428 <_dtoa_r+0x2e8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f811 	bl	800029c <__adddf3>
 800727a:	4606      	mov	r6, r0
 800727c:	4628      	mov	r0, r5
 800727e:	460f      	mov	r7, r1
 8007280:	f7f9 f958 	bl	8000534 <__aeabi_i2d>
 8007284:	a36a      	add	r3, pc, #424	; (adr r3, 8007430 <_dtoa_r+0x2f0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f9bd 	bl	8000608 <__aeabi_dmul>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 f801 	bl	800029c <__adddf3>
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f7f9 fc63 	bl	8000b68 <__aeabi_d2iz>
 80072a2:	2200      	movs	r2, #0
 80072a4:	4682      	mov	sl, r0
 80072a6:	2300      	movs	r3, #0
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc1e 	bl	8000aec <__aeabi_dcmplt>
 80072b0:	b148      	cbz	r0, 80072c6 <_dtoa_r+0x186>
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7f9 f93e 	bl	8000534 <__aeabi_i2d>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80072c0:	b908      	cbnz	r0, 80072c6 <_dtoa_r+0x186>
 80072c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c6:	f1ba 0f16 	cmp.w	sl, #22
 80072ca:	d854      	bhi.n	8007376 <_dtoa_r+0x236>
 80072cc:	4b61      	ldr	r3, [pc, #388]	; (8007454 <_dtoa_r+0x314>)
 80072ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072da:	f7f9 fc07 	bl	8000aec <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d04b      	beq.n	800737a <_dtoa_r+0x23a>
 80072e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072e6:	2300      	movs	r3, #0
 80072e8:	930e      	str	r3, [sp, #56]	; 0x38
 80072ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ec:	1b5d      	subs	r5, r3, r5
 80072ee:	1e6b      	subs	r3, r5, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	bf43      	ittte	mi
 80072f4:	2300      	movmi	r3, #0
 80072f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80072fa:	9304      	strmi	r3, [sp, #16]
 80072fc:	f04f 0800 	movpl.w	r8, #0
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	db3b      	blt.n	800737e <_dtoa_r+0x23e>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800730c:	4453      	add	r3, sl
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	2300      	movs	r3, #0
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	2b09      	cmp	r3, #9
 8007318:	d869      	bhi.n	80073ee <_dtoa_r+0x2ae>
 800731a:	2b05      	cmp	r3, #5
 800731c:	bfc4      	itt	gt
 800731e:	3b04      	subgt	r3, #4
 8007320:	9305      	strgt	r3, [sp, #20]
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	f1a3 0302 	sub.w	r3, r3, #2
 8007328:	bfcc      	ite	gt
 800732a:	2500      	movgt	r5, #0
 800732c:	2501      	movle	r5, #1
 800732e:	2b03      	cmp	r3, #3
 8007330:	d869      	bhi.n	8007406 <_dtoa_r+0x2c6>
 8007332:	e8df f003 	tbb	[pc, r3]
 8007336:	4e2c      	.short	0x4e2c
 8007338:	5a4c      	.short	0x5a4c
 800733a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800733e:	441d      	add	r5, r3
 8007340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007344:	2b20      	cmp	r3, #32
 8007346:	bfc1      	itttt	gt
 8007348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800734c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007350:	fa09 f303 	lslgt.w	r3, r9, r3
 8007354:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007358:	bfda      	itte	le
 800735a:	f1c3 0320 	rsble	r3, r3, #32
 800735e:	fa06 f003 	lslle.w	r0, r6, r3
 8007362:	4318      	orrgt	r0, r3
 8007364:	f7f9 f8d6 	bl	8000514 <__aeabi_ui2d>
 8007368:	2301      	movs	r3, #1
 800736a:	4606      	mov	r6, r0
 800736c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007370:	3d01      	subs	r5, #1
 8007372:	9310      	str	r3, [sp, #64]	; 0x40
 8007374:	e771      	b.n	800725a <_dtoa_r+0x11a>
 8007376:	2301      	movs	r3, #1
 8007378:	e7b6      	b.n	80072e8 <_dtoa_r+0x1a8>
 800737a:	900e      	str	r0, [sp, #56]	; 0x38
 800737c:	e7b5      	b.n	80072ea <_dtoa_r+0x1aa>
 800737e:	f1ca 0300 	rsb	r3, sl, #0
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	2300      	movs	r3, #0
 8007386:	eba8 080a 	sub.w	r8, r8, sl
 800738a:	930d      	str	r3, [sp, #52]	; 0x34
 800738c:	e7c2      	b.n	8007314 <_dtoa_r+0x1d4>
 800738e:	2300      	movs	r3, #0
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc39      	bgt.n	800740c <_dtoa_r+0x2cc>
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	f8cd 9004 	str.w	r9, [sp, #4]
 80073a0:	464b      	mov	r3, r9
 80073a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80073a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	6042      	str	r2, [r0, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f102 0614 	add.w	r6, r2, #20
 80073b2:	429e      	cmp	r6, r3
 80073b4:	6841      	ldr	r1, [r0, #4]
 80073b6:	d92f      	bls.n	8007418 <_dtoa_r+0x2d8>
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fcc7 	bl	8007d4c <_Balloc>
 80073be:	9000      	str	r0, [sp, #0]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d14b      	bne.n	800745c <_dtoa_r+0x31c>
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <_dtoa_r+0x318>)
 80073c6:	4602      	mov	r2, r0
 80073c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073cc:	e6d1      	b.n	8007172 <_dtoa_r+0x32>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7de      	b.n	8007390 <_dtoa_r+0x250>
 80073d2:	2300      	movs	r3, #0
 80073d4:	9308      	str	r3, [sp, #32]
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	eb0a 0903 	add.w	r9, sl, r3
 80073dc:	f109 0301 	add.w	r3, r9, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	bfb8      	it	lt
 80073e6:	2301      	movlt	r3, #1
 80073e8:	e7dd      	b.n	80073a6 <_dtoa_r+0x266>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f2      	b.n	80073d4 <_dtoa_r+0x294>
 80073ee:	2501      	movs	r5, #1
 80073f0:	2300      	movs	r3, #0
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	9508      	str	r5, [sp, #32]
 80073f6:	f04f 39ff 	mov.w	r9, #4294967295
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007400:	2312      	movs	r3, #18
 8007402:	9209      	str	r2, [sp, #36]	; 0x24
 8007404:	e7cf      	b.n	80073a6 <_dtoa_r+0x266>
 8007406:	2301      	movs	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	e7f4      	b.n	80073f6 <_dtoa_r+0x2b6>
 800740c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007410:	f8cd 9004 	str.w	r9, [sp, #4]
 8007414:	464b      	mov	r3, r9
 8007416:	e7c6      	b.n	80073a6 <_dtoa_r+0x266>
 8007418:	3101      	adds	r1, #1
 800741a:	6041      	str	r1, [r0, #4]
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	e7c6      	b.n	80073ae <_dtoa_r+0x26e>
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	080095c2 	.word	0x080095c2
 800743c:	080095d9 	.word	0x080095d9
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	080095be 	.word	0x080095be
 8007448:	080095b5 	.word	0x080095b5
 800744c:	08009491 	.word	0x08009491
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	080096d8 	.word	0x080096d8
 8007458:	08009638 	.word	0x08009638
 800745c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745e:	9a00      	ldr	r2, [sp, #0]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	2b0e      	cmp	r3, #14
 8007466:	f200 80ad 	bhi.w	80075c4 <_dtoa_r+0x484>
 800746a:	2d00      	cmp	r5, #0
 800746c:	f000 80aa 	beq.w	80075c4 <_dtoa_r+0x484>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	dd36      	ble.n	80074e4 <_dtoa_r+0x3a4>
 8007476:	4ac3      	ldr	r2, [pc, #780]	; (8007784 <_dtoa_r+0x644>)
 8007478:	f00a 030f 	and.w	r3, sl, #15
 800747c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007480:	ed93 7b00 	vldr	d7, [r3]
 8007484:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007488:	ea4f 172a 	mov.w	r7, sl, asr #4
 800748c:	eeb0 8a47 	vmov.f32	s16, s14
 8007490:	eef0 8a67 	vmov.f32	s17, s15
 8007494:	d016      	beq.n	80074c4 <_dtoa_r+0x384>
 8007496:	4bbc      	ldr	r3, [pc, #752]	; (8007788 <_dtoa_r+0x648>)
 8007498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800749c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a0:	f7f9 f9dc 	bl	800085c <__aeabi_ddiv>
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	f007 070f 	and.w	r7, r7, #15
 80074ac:	2503      	movs	r5, #3
 80074ae:	4eb6      	ldr	r6, [pc, #728]	; (8007788 <_dtoa_r+0x648>)
 80074b0:	b957      	cbnz	r7, 80074c8 <_dtoa_r+0x388>
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	ec53 2b18 	vmov	r2, r3, d8
 80074ba:	f7f9 f9cf 	bl	800085c <__aeabi_ddiv>
 80074be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c2:	e029      	b.n	8007518 <_dtoa_r+0x3d8>
 80074c4:	2502      	movs	r5, #2
 80074c6:	e7f2      	b.n	80074ae <_dtoa_r+0x36e>
 80074c8:	07f9      	lsls	r1, r7, #31
 80074ca:	d508      	bpl.n	80074de <_dtoa_r+0x39e>
 80074cc:	ec51 0b18 	vmov	r0, r1, d8
 80074d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074d4:	f7f9 f898 	bl	8000608 <__aeabi_dmul>
 80074d8:	ec41 0b18 	vmov	d8, r0, r1
 80074dc:	3501      	adds	r5, #1
 80074de:	107f      	asrs	r7, r7, #1
 80074e0:	3608      	adds	r6, #8
 80074e2:	e7e5      	b.n	80074b0 <_dtoa_r+0x370>
 80074e4:	f000 80a6 	beq.w	8007634 <_dtoa_r+0x4f4>
 80074e8:	f1ca 0600 	rsb	r6, sl, #0
 80074ec:	4ba5      	ldr	r3, [pc, #660]	; (8007784 <_dtoa_r+0x644>)
 80074ee:	4fa6      	ldr	r7, [pc, #664]	; (8007788 <_dtoa_r+0x648>)
 80074f0:	f006 020f 	and.w	r2, r6, #15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007500:	f7f9 f882 	bl	8000608 <__aeabi_dmul>
 8007504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007508:	1136      	asrs	r6, r6, #4
 800750a:	2300      	movs	r3, #0
 800750c:	2502      	movs	r5, #2
 800750e:	2e00      	cmp	r6, #0
 8007510:	f040 8085 	bne.w	800761e <_dtoa_r+0x4de>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1d2      	bne.n	80074be <_dtoa_r+0x37e>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 808c 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007524:	4b99      	ldr	r3, [pc, #612]	; (800778c <_dtoa_r+0x64c>)
 8007526:	2200      	movs	r2, #0
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 fade 	bl	8000aec <__aeabi_dcmplt>
 8007530:	2800      	cmp	r0, #0
 8007532:	f000 8081 	beq.w	8007638 <_dtoa_r+0x4f8>
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d07d      	beq.n	8007638 <_dtoa_r+0x4f8>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dd3c      	ble.n	80075bc <_dtoa_r+0x47c>
 8007542:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	2200      	movs	r2, #0
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_dtoa_r+0x650>)
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 f85a 	bl	8000608 <__aeabi_dmul>
 8007554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007558:	3501      	adds	r5, #1
 800755a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800755e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 ffe6 	bl	8000534 <__aeabi_i2d>
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	f7f9 f84c 	bl	8000608 <__aeabi_dmul>
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <_dtoa_r+0x654>)
 8007572:	2200      	movs	r2, #0
 8007574:	f7f8 fe92 	bl	800029c <__adddf3>
 8007578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800757c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d15c      	bne.n	8007642 <_dtoa_r+0x502>
 8007588:	4b83      	ldr	r3, [pc, #524]	; (8007798 <_dtoa_r+0x658>)
 800758a:	2200      	movs	r2, #0
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 fe82 	bl	8000298 <__aeabi_dsub>
 8007594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007598:	4606      	mov	r6, r0
 800759a:	460f      	mov	r7, r1
 800759c:	f7f9 fac4 	bl	8000b28 <__aeabi_dcmpgt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 8296 	bne.w	8007ad2 <_dtoa_r+0x992>
 80075a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075aa:	4630      	mov	r0, r6
 80075ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f9 fa9b 	bl	8000aec <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8288 	bne.w	8007acc <_dtoa_r+0x98c>
 80075bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f2c0 8158 	blt.w	800787c <_dtoa_r+0x73c>
 80075cc:	f1ba 0f0e 	cmp.w	sl, #14
 80075d0:	f300 8154 	bgt.w	800787c <_dtoa_r+0x73c>
 80075d4:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <_dtoa_r+0x644>)
 80075d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f280 80e3 	bge.w	80077ac <_dtoa_r+0x66c>
 80075e6:	9b01      	ldr	r3, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f300 80df 	bgt.w	80077ac <_dtoa_r+0x66c>
 80075ee:	f040 826d 	bne.w	8007acc <_dtoa_r+0x98c>
 80075f2:	4b69      	ldr	r3, [pc, #420]	; (8007798 <_dtoa_r+0x658>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f9 f805 	bl	8000608 <__aeabi_dmul>
 80075fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007602:	f7f9 fa87 	bl	8000b14 <__aeabi_dcmpge>
 8007606:	9e01      	ldr	r6, [sp, #4]
 8007608:	4637      	mov	r7, r6
 800760a:	2800      	cmp	r0, #0
 800760c:	f040 8243 	bne.w	8007a96 <_dtoa_r+0x956>
 8007610:	9d00      	ldr	r5, [sp, #0]
 8007612:	2331      	movs	r3, #49	; 0x31
 8007614:	f805 3b01 	strb.w	r3, [r5], #1
 8007618:	f10a 0a01 	add.w	sl, sl, #1
 800761c:	e23f      	b.n	8007a9e <_dtoa_r+0x95e>
 800761e:	07f2      	lsls	r2, r6, #31
 8007620:	d505      	bpl.n	800762e <_dtoa_r+0x4ee>
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	f7f8 ffef 	bl	8000608 <__aeabi_dmul>
 800762a:	3501      	adds	r5, #1
 800762c:	2301      	movs	r3, #1
 800762e:	1076      	asrs	r6, r6, #1
 8007630:	3708      	adds	r7, #8
 8007632:	e76c      	b.n	800750e <_dtoa_r+0x3ce>
 8007634:	2502      	movs	r5, #2
 8007636:	e76f      	b.n	8007518 <_dtoa_r+0x3d8>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	f8cd a01c 	str.w	sl, [sp, #28]
 800763e:	930c      	str	r3, [sp, #48]	; 0x30
 8007640:	e78d      	b.n	800755e <_dtoa_r+0x41e>
 8007642:	9900      	ldr	r1, [sp, #0]
 8007644:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007648:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <_dtoa_r+0x644>)
 800764a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800764e:	4401      	add	r1, r0
 8007650:	9102      	str	r1, [sp, #8]
 8007652:	9908      	ldr	r1, [sp, #32]
 8007654:	eeb0 8a47 	vmov.f32	s16, s14
 8007658:	eef0 8a67 	vmov.f32	s17, s15
 800765c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007664:	2900      	cmp	r1, #0
 8007666:	d045      	beq.n	80076f4 <_dtoa_r+0x5b4>
 8007668:	494c      	ldr	r1, [pc, #304]	; (800779c <_dtoa_r+0x65c>)
 800766a:	2000      	movs	r0, #0
 800766c:	f7f9 f8f6 	bl	800085c <__aeabi_ddiv>
 8007670:	ec53 2b18 	vmov	r2, r3, d8
 8007674:	f7f8 fe10 	bl	8000298 <__aeabi_dsub>
 8007678:	9d00      	ldr	r5, [sp, #0]
 800767a:	ec41 0b18 	vmov	d8, r0, r1
 800767e:	4639      	mov	r1, r7
 8007680:	4630      	mov	r0, r6
 8007682:	f7f9 fa71 	bl	8000b68 <__aeabi_d2iz>
 8007686:	900c      	str	r0, [sp, #48]	; 0x30
 8007688:	f7f8 ff54 	bl	8000534 <__aeabi_i2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f8 fe00 	bl	8000298 <__aeabi_dsub>
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	3330      	adds	r3, #48	; 0x30
 800769c:	f805 3b01 	strb.w	r3, [r5], #1
 80076a0:	ec53 2b18 	vmov	r2, r3, d8
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	f7f9 fa20 	bl	8000aec <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d165      	bne.n	800777c <_dtoa_r+0x63c>
 80076b0:	4632      	mov	r2, r6
 80076b2:	463b      	mov	r3, r7
 80076b4:	4935      	ldr	r1, [pc, #212]	; (800778c <_dtoa_r+0x64c>)
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fdee 	bl	8000298 <__aeabi_dsub>
 80076bc:	ec53 2b18 	vmov	r2, r3, d8
 80076c0:	f7f9 fa14 	bl	8000aec <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 80b9 	bne.w	800783c <_dtoa_r+0x6fc>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	429d      	cmp	r5, r3
 80076ce:	f43f af75 	beq.w	80075bc <_dtoa_r+0x47c>
 80076d2:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <_dtoa_r+0x650>)
 80076d4:	ec51 0b18 	vmov	r0, r1, d8
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ff95 	bl	8000608 <__aeabi_dmul>
 80076de:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <_dtoa_r+0x650>)
 80076e0:	ec41 0b18 	vmov	d8, r0, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f8 ff8d 	bl	8000608 <__aeabi_dmul>
 80076ee:	4606      	mov	r6, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	e7c4      	b.n	800767e <_dtoa_r+0x53e>
 80076f4:	ec51 0b17 	vmov	r0, r1, d7
 80076f8:	f7f8 ff86 	bl	8000608 <__aeabi_dmul>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	9d00      	ldr	r5, [sp, #0]
 8007700:	930c      	str	r3, [sp, #48]	; 0x30
 8007702:	ec41 0b18 	vmov	d8, r0, r1
 8007706:	4639      	mov	r1, r7
 8007708:	4630      	mov	r0, r6
 800770a:	f7f9 fa2d 	bl	8000b68 <__aeabi_d2iz>
 800770e:	9011      	str	r0, [sp, #68]	; 0x44
 8007710:	f7f8 ff10 	bl	8000534 <__aeabi_i2d>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f8 fdbc 	bl	8000298 <__aeabi_dsub>
 8007720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007722:	3330      	adds	r3, #48	; 0x30
 8007724:	f805 3b01 	strb.w	r3, [r5], #1
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	429d      	cmp	r5, r3
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	d134      	bne.n	80077a0 <_dtoa_r+0x660>
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <_dtoa_r+0x65c>)
 8007738:	ec51 0b18 	vmov	r0, r1, d8
 800773c:	f7f8 fdae 	bl	800029c <__adddf3>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f9 f9ee 	bl	8000b28 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d175      	bne.n	800783c <_dtoa_r+0x6fc>
 8007750:	ec53 2b18 	vmov	r2, r3, d8
 8007754:	4911      	ldr	r1, [pc, #68]	; (800779c <_dtoa_r+0x65c>)
 8007756:	2000      	movs	r0, #0
 8007758:	f7f8 fd9e 	bl	8000298 <__aeabi_dsub>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f9 f9c2 	bl	8000aec <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	f43f af27 	beq.w	80075bc <_dtoa_r+0x47c>
 800776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007770:	1e6b      	subs	r3, r5, #1
 8007772:	930c      	str	r3, [sp, #48]	; 0x30
 8007774:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d0f8      	beq.n	800776e <_dtoa_r+0x62e>
 800777c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007780:	e04a      	b.n	8007818 <_dtoa_r+0x6d8>
 8007782:	bf00      	nop
 8007784:	080096d8 	.word	0x080096d8
 8007788:	080096b0 	.word	0x080096b0
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	401c0000 	.word	0x401c0000
 8007798:	40140000 	.word	0x40140000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	4baf      	ldr	r3, [pc, #700]	; (8007a60 <_dtoa_r+0x920>)
 80077a2:	f7f8 ff31 	bl	8000608 <__aeabi_dmul>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	e7ac      	b.n	8007706 <_dtoa_r+0x5c6>
 80077ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077b0:	9d00      	ldr	r5, [sp, #0]
 80077b2:	4642      	mov	r2, r8
 80077b4:	464b      	mov	r3, r9
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f84f 	bl	800085c <__aeabi_ddiv>
 80077be:	f7f9 f9d3 	bl	8000b68 <__aeabi_d2iz>
 80077c2:	9002      	str	r0, [sp, #8]
 80077c4:	f7f8 feb6 	bl	8000534 <__aeabi_i2d>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	f7f8 ff1c 	bl	8000608 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd5e 	bl	8000298 <__aeabi_dsub>
 80077dc:	9e02      	ldr	r6, [sp, #8]
 80077de:	9f01      	ldr	r7, [sp, #4]
 80077e0:	3630      	adds	r6, #48	; 0x30
 80077e2:	f805 6b01 	strb.w	r6, [r5], #1
 80077e6:	9e00      	ldr	r6, [sp, #0]
 80077e8:	1bae      	subs	r6, r5, r6
 80077ea:	42b7      	cmp	r7, r6
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	d137      	bne.n	8007862 <_dtoa_r+0x722>
 80077f2:	f7f8 fd53 	bl	800029c <__adddf3>
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	f7f9 f993 	bl	8000b28 <__aeabi_dcmpgt>
 8007802:	b9c8      	cbnz	r0, 8007838 <_dtoa_r+0x6f8>
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f9 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8007810:	b110      	cbz	r0, 8007818 <_dtoa_r+0x6d8>
 8007812:	9b02      	ldr	r3, [sp, #8]
 8007814:	07d9      	lsls	r1, r3, #31
 8007816:	d40f      	bmi.n	8007838 <_dtoa_r+0x6f8>
 8007818:	4620      	mov	r0, r4
 800781a:	4659      	mov	r1, fp
 800781c:	f000 fad6 	bl	8007dcc <_Bfree>
 8007820:	2300      	movs	r3, #0
 8007822:	702b      	strb	r3, [r5, #0]
 8007824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007826:	f10a 0001 	add.w	r0, sl, #1
 800782a:	6018      	str	r0, [r3, #0]
 800782c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800782e:	2b00      	cmp	r3, #0
 8007830:	f43f acd8 	beq.w	80071e4 <_dtoa_r+0xa4>
 8007834:	601d      	str	r5, [r3, #0]
 8007836:	e4d5      	b.n	80071e4 <_dtoa_r+0xa4>
 8007838:	f8cd a01c 	str.w	sl, [sp, #28]
 800783c:	462b      	mov	r3, r5
 800783e:	461d      	mov	r5, r3
 8007840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007844:	2a39      	cmp	r2, #57	; 0x39
 8007846:	d108      	bne.n	800785a <_dtoa_r+0x71a>
 8007848:	9a00      	ldr	r2, [sp, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d1f7      	bne.n	800783e <_dtoa_r+0x6fe>
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	9900      	ldr	r1, [sp, #0]
 8007852:	3201      	adds	r2, #1
 8007854:	9207      	str	r2, [sp, #28]
 8007856:	2230      	movs	r2, #48	; 0x30
 8007858:	700a      	strb	r2, [r1, #0]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	3201      	adds	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e78c      	b.n	800777c <_dtoa_r+0x63c>
 8007862:	4b7f      	ldr	r3, [pc, #508]	; (8007a60 <_dtoa_r+0x920>)
 8007864:	2200      	movs	r2, #0
 8007866:	f7f8 fecf 	bl	8000608 <__aeabi_dmul>
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	4606      	mov	r6, r0
 8007870:	460f      	mov	r7, r1
 8007872:	f7f9 f931 	bl	8000ad8 <__aeabi_dcmpeq>
 8007876:	2800      	cmp	r0, #0
 8007878:	d09b      	beq.n	80077b2 <_dtoa_r+0x672>
 800787a:	e7cd      	b.n	8007818 <_dtoa_r+0x6d8>
 800787c:	9a08      	ldr	r2, [sp, #32]
 800787e:	2a00      	cmp	r2, #0
 8007880:	f000 80c4 	beq.w	8007a0c <_dtoa_r+0x8cc>
 8007884:	9a05      	ldr	r2, [sp, #20]
 8007886:	2a01      	cmp	r2, #1
 8007888:	f300 80a8 	bgt.w	80079dc <_dtoa_r+0x89c>
 800788c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800788e:	2a00      	cmp	r2, #0
 8007890:	f000 80a0 	beq.w	80079d4 <_dtoa_r+0x894>
 8007894:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007898:	9e06      	ldr	r6, [sp, #24]
 800789a:	4645      	mov	r5, r8
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	2101      	movs	r1, #1
 80078a0:	441a      	add	r2, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	4498      	add	r8, r3
 80078a6:	9204      	str	r2, [sp, #16]
 80078a8:	f000 fb4c 	bl	8007f44 <__i2b>
 80078ac:	4607      	mov	r7, r0
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	dd0b      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dd08      	ble.n	80078ca <_dtoa_r+0x78a>
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	9a04      	ldr	r2, [sp, #16]
 80078bc:	bfa8      	it	ge
 80078be:	462b      	movge	r3, r5
 80078c0:	eba8 0803 	sub.w	r8, r8, r3
 80078c4:	1aed      	subs	r5, r5, r3
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	b1fb      	cbz	r3, 800790e <_dtoa_r+0x7ce>
 80078ce:	9b08      	ldr	r3, [sp, #32]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 809f 	beq.w	8007a14 <_dtoa_r+0x8d4>
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	dd11      	ble.n	80078fe <_dtoa_r+0x7be>
 80078da:	4639      	mov	r1, r7
 80078dc:	4632      	mov	r2, r6
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 fbec 	bl	80080bc <__pow5mult>
 80078e4:	465a      	mov	r2, fp
 80078e6:	4601      	mov	r1, r0
 80078e8:	4607      	mov	r7, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fb40 	bl	8007f70 <__multiply>
 80078f0:	4659      	mov	r1, fp
 80078f2:	9007      	str	r0, [sp, #28]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fa69 	bl	8007dcc <_Bfree>
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	469b      	mov	fp, r3
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	1b9a      	subs	r2, r3, r6
 8007902:	d004      	beq.n	800790e <_dtoa_r+0x7ce>
 8007904:	4659      	mov	r1, fp
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fbd8 	bl	80080bc <__pow5mult>
 800790c:	4683      	mov	fp, r0
 800790e:	2101      	movs	r1, #1
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fb17 	bl	8007f44 <__i2b>
 8007916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007918:	2b00      	cmp	r3, #0
 800791a:	4606      	mov	r6, r0
 800791c:	dd7c      	ble.n	8007a18 <_dtoa_r+0x8d8>
 800791e:	461a      	mov	r2, r3
 8007920:	4601      	mov	r1, r0
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fbca 	bl	80080bc <__pow5mult>
 8007928:	9b05      	ldr	r3, [sp, #20]
 800792a:	2b01      	cmp	r3, #1
 800792c:	4606      	mov	r6, r0
 800792e:	dd76      	ble.n	8007a1e <_dtoa_r+0x8de>
 8007930:	2300      	movs	r3, #0
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	6933      	ldr	r3, [r6, #16]
 8007936:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800793a:	6918      	ldr	r0, [r3, #16]
 800793c:	f000 fab2 	bl	8007ea4 <__hi0bits>
 8007940:	f1c0 0020 	rsb	r0, r0, #32
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4418      	add	r0, r3
 8007948:	f010 001f 	ands.w	r0, r0, #31
 800794c:	f000 8086 	beq.w	8007a5c <_dtoa_r+0x91c>
 8007950:	f1c0 0320 	rsb	r3, r0, #32
 8007954:	2b04      	cmp	r3, #4
 8007956:	dd7f      	ble.n	8007a58 <_dtoa_r+0x918>
 8007958:	f1c0 001c 	rsb	r0, r0, #28
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4403      	add	r3, r0
 8007960:	4480      	add	r8, r0
 8007962:	4405      	add	r5, r0
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	dd05      	ble.n	8007978 <_dtoa_r+0x838>
 800796c:	4659      	mov	r1, fp
 800796e:	4642      	mov	r2, r8
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fbfd 	bl	8008170 <__lshift>
 8007976:	4683      	mov	fp, r0
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd05      	ble.n	800798a <_dtoa_r+0x84a>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fbf4 	bl	8008170 <__lshift>
 8007988:	4606      	mov	r6, r0
 800798a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d069      	beq.n	8007a64 <_dtoa_r+0x924>
 8007990:	4631      	mov	r1, r6
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fc58 	bl	8008248 <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	da63      	bge.n	8007a64 <_dtoa_r+0x924>
 800799c:	2300      	movs	r3, #0
 800799e:	4659      	mov	r1, fp
 80079a0:	220a      	movs	r2, #10
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fa34 	bl	8007e10 <__multadd>
 80079a8:	9b08      	ldr	r3, [sp, #32]
 80079aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ae:	4683      	mov	fp, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 818f 	beq.w	8007cd4 <_dtoa_r+0xb94>
 80079b6:	4639      	mov	r1, r7
 80079b8:	2300      	movs	r3, #0
 80079ba:	220a      	movs	r2, #10
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fa27 	bl	8007e10 <__multadd>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	4607      	mov	r7, r0
 80079c8:	f300 808e 	bgt.w	8007ae8 <_dtoa_r+0x9a8>
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	dc50      	bgt.n	8007a74 <_dtoa_r+0x934>
 80079d2:	e089      	b.n	8007ae8 <_dtoa_r+0x9a8>
 80079d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079da:	e75d      	b.n	8007898 <_dtoa_r+0x758>
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	1e5e      	subs	r6, r3, #1
 80079e0:	9b06      	ldr	r3, [sp, #24]
 80079e2:	42b3      	cmp	r3, r6
 80079e4:	bfbf      	itttt	lt
 80079e6:	9b06      	ldrlt	r3, [sp, #24]
 80079e8:	9606      	strlt	r6, [sp, #24]
 80079ea:	1af2      	sublt	r2, r6, r3
 80079ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80079ee:	bfb6      	itet	lt
 80079f0:	189b      	addlt	r3, r3, r2
 80079f2:	1b9e      	subge	r6, r3, r6
 80079f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	bfb8      	it	lt
 80079fa:	2600      	movlt	r6, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfb5      	itete	lt
 8007a00:	eba8 0503 	sublt.w	r5, r8, r3
 8007a04:	9b01      	ldrge	r3, [sp, #4]
 8007a06:	2300      	movlt	r3, #0
 8007a08:	4645      	movge	r5, r8
 8007a0a:	e747      	b.n	800789c <_dtoa_r+0x75c>
 8007a0c:	9e06      	ldr	r6, [sp, #24]
 8007a0e:	9f08      	ldr	r7, [sp, #32]
 8007a10:	4645      	mov	r5, r8
 8007a12:	e74c      	b.n	80078ae <_dtoa_r+0x76e>
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	e775      	b.n	8007904 <_dtoa_r+0x7c4>
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	dc18      	bgt.n	8007a50 <_dtoa_r+0x910>
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	b9b3      	cbnz	r3, 8007a50 <_dtoa_r+0x910>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a28:	b9a3      	cbnz	r3, 8007a54 <_dtoa_r+0x914>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a30:	0d1b      	lsrs	r3, r3, #20
 8007a32:	051b      	lsls	r3, r3, #20
 8007a34:	b12b      	cbz	r3, 8007a42 <_dtoa_r+0x902>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	f108 0801 	add.w	r8, r8, #1
 8007a40:	2301      	movs	r3, #1
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f47f af74 	bne.w	8007934 <_dtoa_r+0x7f4>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	e779      	b.n	8007944 <_dtoa_r+0x804>
 8007a50:	2300      	movs	r3, #0
 8007a52:	e7f6      	b.n	8007a42 <_dtoa_r+0x902>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	e7f4      	b.n	8007a42 <_dtoa_r+0x902>
 8007a58:	d085      	beq.n	8007966 <_dtoa_r+0x826>
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	301c      	adds	r0, #28
 8007a5e:	e77d      	b.n	800795c <_dtoa_r+0x81c>
 8007a60:	40240000 	.word	0x40240000
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc38      	bgt.n	8007adc <_dtoa_r+0x99c>
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	dd35      	ble.n	8007adc <_dtoa_r+0x99c>
 8007a70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a74:	f1b9 0f00 	cmp.w	r9, #0
 8007a78:	d10d      	bne.n	8007a96 <_dtoa_r+0x956>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	2205      	movs	r2, #5
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f9c5 	bl	8007e10 <__multadd>
 8007a86:	4601      	mov	r1, r0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fbdc 	bl	8008248 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f73f adbd 	bgt.w	8007610 <_dtoa_r+0x4d0>
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	9d00      	ldr	r5, [sp, #0]
 8007a9a:	ea6f 0a03 	mvn.w	sl, r3
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f991 	bl	8007dcc <_Bfree>
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	f43f aeb4 	beq.w	8007818 <_dtoa_r+0x6d8>
 8007ab0:	f1b8 0f00 	cmp.w	r8, #0
 8007ab4:	d005      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007ab6:	45b8      	cmp	r8, r7
 8007ab8:	d003      	beq.n	8007ac2 <_dtoa_r+0x982>
 8007aba:	4641      	mov	r1, r8
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 f985 	bl	8007dcc <_Bfree>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 f981 	bl	8007dcc <_Bfree>
 8007aca:	e6a5      	b.n	8007818 <_dtoa_r+0x6d8>
 8007acc:	2600      	movs	r6, #0
 8007ace:	4637      	mov	r7, r6
 8007ad0:	e7e1      	b.n	8007a96 <_dtoa_r+0x956>
 8007ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ad4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ad8:	4637      	mov	r7, r6
 8007ada:	e599      	b.n	8007610 <_dtoa_r+0x4d0>
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80fd 	beq.w	8007ce2 <_dtoa_r+0xba2>
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	dd05      	ble.n	8007af8 <_dtoa_r+0x9b8>
 8007aec:	4639      	mov	r1, r7
 8007aee:	462a      	mov	r2, r5
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fb3d 	bl	8008170 <__lshift>
 8007af6:	4607      	mov	r7, r0
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d05c      	beq.n	8007bb8 <_dtoa_r+0xa78>
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 f923 	bl	8007d4c <_Balloc>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <_dtoa_r+0x9d6>
 8007b0a:	4b80      	ldr	r3, [pc, #512]	; (8007d0c <_dtoa_r+0xbcc>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b12:	f7ff bb2e 	b.w	8007172 <_dtoa_r+0x32>
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	3202      	adds	r2, #2
 8007b1a:	0092      	lsls	r2, r2, #2
 8007b1c:	f107 010c 	add.w	r1, r7, #12
 8007b20:	300c      	adds	r0, #12
 8007b22:	f000 f905 	bl	8007d30 <memcpy>
 8007b26:	2201      	movs	r2, #1
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb20 	bl	8008170 <__lshift>
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	444b      	add	r3, r9
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	46b8      	mov	r8, r7
 8007b44:	9306      	str	r3, [sp, #24]
 8007b46:	4607      	mov	r7, r0
 8007b48:	9b01      	ldr	r3, [sp, #4]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	4658      	mov	r0, fp
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	f7ff fa67 	bl	8007024 <quorem>
 8007b56:	4603      	mov	r3, r0
 8007b58:	3330      	adds	r3, #48	; 0x30
 8007b5a:	9004      	str	r0, [sp, #16]
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	4658      	mov	r0, fp
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	f000 fb71 	bl	8008248 <__mcmp>
 8007b66:	463a      	mov	r2, r7
 8007b68:	4681      	mov	r9, r0
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fb87 	bl	8008280 <__mdiff>
 8007b72:	68c2      	ldr	r2, [r0, #12]
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	4605      	mov	r5, r0
 8007b78:	bb02      	cbnz	r2, 8007bbc <_dtoa_r+0xa7c>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f000 fb63 	bl	8008248 <__mcmp>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	4602      	mov	r2, r0
 8007b86:	4629      	mov	r1, r5
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b8e:	f000 f91d 	bl	8007dcc <_Bfree>
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b96:	9d01      	ldr	r5, [sp, #4]
 8007b98:	ea43 0102 	orr.w	r1, r3, r2
 8007b9c:	9b06      	ldr	r3, [sp, #24]
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	d10d      	bne.n	8007bc0 <_dtoa_r+0xa80>
 8007ba4:	2b39      	cmp	r3, #57	; 0x39
 8007ba6:	d029      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007ba8:	f1b9 0f00 	cmp.w	r9, #0
 8007bac:	dd01      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3331      	adds	r3, #49	; 0x31
 8007bb2:	9a02      	ldr	r2, [sp, #8]
 8007bb4:	7013      	strb	r3, [r2, #0]
 8007bb6:	e774      	b.n	8007aa2 <_dtoa_r+0x962>
 8007bb8:	4638      	mov	r0, r7
 8007bba:	e7b9      	b.n	8007b30 <_dtoa_r+0x9f0>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	e7e2      	b.n	8007b86 <_dtoa_r+0xa46>
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	db06      	blt.n	8007bd4 <_dtoa_r+0xa94>
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	ea41 0909 	orr.w	r9, r1, r9
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	ea59 0101 	orrs.w	r1, r9, r1
 8007bd2:	d120      	bne.n	8007c16 <_dtoa_r+0xad6>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	ddec      	ble.n	8007bb2 <_dtoa_r+0xa72>
 8007bd8:	4659      	mov	r1, fp
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	f000 fac6 	bl	8008170 <__lshift>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4683      	mov	fp, r0
 8007be8:	f000 fb2e 	bl	8008248 <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	dc02      	bgt.n	8007bf8 <_dtoa_r+0xab8>
 8007bf2:	d1de      	bne.n	8007bb2 <_dtoa_r+0xa72>
 8007bf4:	07da      	lsls	r2, r3, #31
 8007bf6:	d5dc      	bpl.n	8007bb2 <_dtoa_r+0xa72>
 8007bf8:	2b39      	cmp	r3, #57	; 0x39
 8007bfa:	d1d8      	bne.n	8007bae <_dtoa_r+0xa6e>
 8007bfc:	9a02      	ldr	r2, [sp, #8]
 8007bfe:	2339      	movs	r3, #57	; 0x39
 8007c00:	7013      	strb	r3, [r2, #0]
 8007c02:	462b      	mov	r3, r5
 8007c04:	461d      	mov	r5, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c0c:	2a39      	cmp	r2, #57	; 0x39
 8007c0e:	d050      	beq.n	8007cb2 <_dtoa_r+0xb72>
 8007c10:	3201      	adds	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e745      	b.n	8007aa2 <_dtoa_r+0x962>
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	dd03      	ble.n	8007c22 <_dtoa_r+0xae2>
 8007c1a:	2b39      	cmp	r3, #57	; 0x39
 8007c1c:	d0ee      	beq.n	8007bfc <_dtoa_r+0xabc>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	e7c7      	b.n	8007bb2 <_dtoa_r+0xa72>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	9907      	ldr	r1, [sp, #28]
 8007c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c2a:	428a      	cmp	r2, r1
 8007c2c:	d02a      	beq.n	8007c84 <_dtoa_r+0xb44>
 8007c2e:	4659      	mov	r1, fp
 8007c30:	2300      	movs	r3, #0
 8007c32:	220a      	movs	r2, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f8eb 	bl	8007e10 <__multadd>
 8007c3a:	45b8      	cmp	r8, r7
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	f04f 020a 	mov.w	r2, #10
 8007c46:	4641      	mov	r1, r8
 8007c48:	4620      	mov	r0, r4
 8007c4a:	d107      	bne.n	8007c5c <_dtoa_r+0xb1c>
 8007c4c:	f000 f8e0 	bl	8007e10 <__multadd>
 8007c50:	4680      	mov	r8, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	e775      	b.n	8007b48 <_dtoa_r+0xa08>
 8007c5c:	f000 f8d8 	bl	8007e10 <__multadd>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4680      	mov	r8, r0
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 f8d1 	bl	8007e10 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	e7f0      	b.n	8007c54 <_dtoa_r+0xb14>
 8007c72:	f1b9 0f00 	cmp.w	r9, #0
 8007c76:	9a00      	ldr	r2, [sp, #0]
 8007c78:	bfcc      	ite	gt
 8007c7a:	464d      	movgt	r5, r9
 8007c7c:	2501      	movle	r5, #1
 8007c7e:	4415      	add	r5, r2
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	4659      	mov	r1, fp
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f000 fa70 	bl	8008170 <__lshift>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4683      	mov	fp, r0
 8007c94:	f000 fad8 	bl	8008248 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dcb2      	bgt.n	8007c02 <_dtoa_r+0xac2>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb64>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d4ae      	bmi.n	8007c02 <_dtoa_r+0xac2>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb66>
 8007cb0:	e6f7      	b.n	8007aa2 <_dtoa_r+0x962>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1a5      	bne.n	8007c04 <_dtoa_r+0xac4>
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	2331      	movs	r3, #49	; 0x31
 8007cbe:	e779      	b.n	8007bb4 <_dtoa_r+0xa74>
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <_dtoa_r+0xbd0>)
 8007cc2:	f7ff baaf 	b.w	8007224 <_dtoa_r+0xe4>
 8007cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f47f aa86 	bne.w	80071da <_dtoa_r+0x9a>
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <_dtoa_r+0xbd4>)
 8007cd0:	f7ff baa8 	b.w	8007224 <_dtoa_r+0xe4>
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	dc03      	bgt.n	8007ce2 <_dtoa_r+0xba2>
 8007cda:	9b05      	ldr	r3, [sp, #20]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f73f aec9 	bgt.w	8007a74 <_dtoa_r+0x934>
 8007ce2:	9d00      	ldr	r5, [sp, #0]
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f7ff f99c 	bl	8007024 <quorem>
 8007cec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf4:	9a00      	ldr	r2, [sp, #0]
 8007cf6:	1aaa      	subs	r2, r5, r2
 8007cf8:	4591      	cmp	r9, r2
 8007cfa:	ddba      	ble.n	8007c72 <_dtoa_r+0xb32>
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f884 	bl	8007e10 <__multadd>
 8007d08:	4683      	mov	fp, r0
 8007d0a:	e7eb      	b.n	8007ce4 <_dtoa_r+0xba4>
 8007d0c:	08009638 	.word	0x08009638
 8007d10:	08009490 	.word	0x08009490
 8007d14:	080095b5 	.word	0x080095b5

08007d18 <_localeconv_r>:
 8007d18:	4800      	ldr	r0, [pc, #0]	; (8007d1c <_localeconv_r+0x4>)
 8007d1a:	4770      	bx	lr
 8007d1c:	20000178 	.word	0x20000178

08007d20 <malloc>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <malloc+0xc>)
 8007d22:	4601      	mov	r1, r0
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f000 bbef 	b.w	8008508 <_malloc_r>
 8007d2a:	bf00      	nop
 8007d2c:	20000024 	.word	0x20000024

08007d30 <memcpy>:
 8007d30:	440a      	add	r2, r1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xc>
 8007d3a:	4770      	bx	lr
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d1f9      	bne.n	8007d3e <memcpy+0xe>
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <_Balloc>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	b976      	cbnz	r6, 8007d74 <_Balloc+0x28>
 8007d56:	2010      	movs	r0, #16
 8007d58:	f7ff ffe2 	bl	8007d20 <malloc>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8007d60:	b920      	cbnz	r0, 8007d6c <_Balloc+0x20>
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <_Balloc+0x78>)
 8007d64:	4818      	ldr	r0, [pc, #96]	; (8007dc8 <_Balloc+0x7c>)
 8007d66:	2166      	movs	r1, #102	; 0x66
 8007d68:	f000 fd94 	bl	8008894 <__assert_func>
 8007d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d70:	6006      	str	r6, [r0, #0]
 8007d72:	60c6      	str	r6, [r0, #12]
 8007d74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d76:	68f3      	ldr	r3, [r6, #12]
 8007d78:	b183      	cbz	r3, 8007d9c <_Balloc+0x50>
 8007d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d82:	b9b8      	cbnz	r0, 8007db4 <_Balloc+0x68>
 8007d84:	2101      	movs	r1, #1
 8007d86:	fa01 f605 	lsl.w	r6, r1, r5
 8007d8a:	1d72      	adds	r2, r6, #5
 8007d8c:	0092      	lsls	r2, r2, #2
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fb5a 	bl	8008448 <_calloc_r>
 8007d94:	b160      	cbz	r0, 8007db0 <_Balloc+0x64>
 8007d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d9a:	e00e      	b.n	8007dba <_Balloc+0x6e>
 8007d9c:	2221      	movs	r2, #33	; 0x21
 8007d9e:	2104      	movs	r1, #4
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fb51 	bl	8008448 <_calloc_r>
 8007da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da8:	60f0      	str	r0, [r6, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <_Balloc+0x2e>
 8007db0:	2000      	movs	r0, #0
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	6802      	ldr	r2, [r0, #0]
 8007db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dc0:	e7f7      	b.n	8007db2 <_Balloc+0x66>
 8007dc2:	bf00      	nop
 8007dc4:	080095c2 	.word	0x080095c2
 8007dc8:	08009649 	.word	0x08009649

08007dcc <_Bfree>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	b976      	cbnz	r6, 8007df4 <_Bfree+0x28>
 8007dd6:	2010      	movs	r0, #16
 8007dd8:	f7ff ffa2 	bl	8007d20 <malloc>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6268      	str	r0, [r5, #36]	; 0x24
 8007de0:	b920      	cbnz	r0, 8007dec <_Bfree+0x20>
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <_Bfree+0x3c>)
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <_Bfree+0x40>)
 8007de6:	218a      	movs	r1, #138	; 0x8a
 8007de8:	f000 fd54 	bl	8008894 <__assert_func>
 8007dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df0:	6006      	str	r6, [r0, #0]
 8007df2:	60c6      	str	r6, [r0, #12]
 8007df4:	b13c      	cbz	r4, 8007e06 <_Bfree+0x3a>
 8007df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df8:	6862      	ldr	r2, [r4, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e00:	6021      	str	r1, [r4, #0]
 8007e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	080095c2 	.word	0x080095c2
 8007e0c:	08009649 	.word	0x08009649

08007e10 <__multadd>:
 8007e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	690e      	ldr	r6, [r1, #16]
 8007e16:	4607      	mov	r7, r0
 8007e18:	4698      	mov	r8, r3
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	f101 0014 	add.w	r0, r1, #20
 8007e20:	2300      	movs	r3, #0
 8007e22:	6805      	ldr	r5, [r0, #0]
 8007e24:	b2a9      	uxth	r1, r5
 8007e26:	fb02 8101 	mla	r1, r2, r1, r8
 8007e2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e2e:	0c2d      	lsrs	r5, r5, #16
 8007e30:	fb02 c505 	mla	r5, r2, r5, ip
 8007e34:	b289      	uxth	r1, r1
 8007e36:	3301      	adds	r3, #1
 8007e38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007e3c:	429e      	cmp	r6, r3
 8007e3e:	f840 1b04 	str.w	r1, [r0], #4
 8007e42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007e46:	dcec      	bgt.n	8007e22 <__multadd+0x12>
 8007e48:	f1b8 0f00 	cmp.w	r8, #0
 8007e4c:	d022      	beq.n	8007e94 <__multadd+0x84>
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	42b3      	cmp	r3, r6
 8007e52:	dc19      	bgt.n	8007e88 <__multadd+0x78>
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	4638      	mov	r0, r7
 8007e58:	3101      	adds	r1, #1
 8007e5a:	f7ff ff77 	bl	8007d4c <_Balloc>
 8007e5e:	4605      	mov	r5, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <__multadd+0x5e>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <__multadd+0x8c>)
 8007e66:	480e      	ldr	r0, [pc, #56]	; (8007ea0 <__multadd+0x90>)
 8007e68:	21b5      	movs	r1, #181	; 0xb5
 8007e6a:	f000 fd13 	bl	8008894 <__assert_func>
 8007e6e:	6922      	ldr	r2, [r4, #16]
 8007e70:	3202      	adds	r2, #2
 8007e72:	f104 010c 	add.w	r1, r4, #12
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	300c      	adds	r0, #12
 8007e7a:	f7ff ff59 	bl	8007d30 <memcpy>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff ffa3 	bl	8007dcc <_Bfree>
 8007e86:	462c      	mov	r4, r5
 8007e88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007e8c:	3601      	adds	r6, #1
 8007e8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007e92:	6126      	str	r6, [r4, #16]
 8007e94:	4620      	mov	r0, r4
 8007e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9a:	bf00      	nop
 8007e9c:	08009638 	.word	0x08009638
 8007ea0:	08009649 	.word	0x08009649

08007ea4 <__hi0bits>:
 8007ea4:	0c03      	lsrs	r3, r0, #16
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	b9d3      	cbnz	r3, 8007ee0 <__hi0bits+0x3c>
 8007eaa:	0400      	lsls	r0, r0, #16
 8007eac:	2310      	movs	r3, #16
 8007eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007eb2:	bf04      	itt	eq
 8007eb4:	0200      	lsleq	r0, r0, #8
 8007eb6:	3308      	addeq	r3, #8
 8007eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ebc:	bf04      	itt	eq
 8007ebe:	0100      	lsleq	r0, r0, #4
 8007ec0:	3304      	addeq	r3, #4
 8007ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ec6:	bf04      	itt	eq
 8007ec8:	0080      	lsleq	r0, r0, #2
 8007eca:	3302      	addeq	r3, #2
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	db05      	blt.n	8007edc <__hi0bits+0x38>
 8007ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ed4:	f103 0301 	add.w	r3, r3, #1
 8007ed8:	bf08      	it	eq
 8007eda:	2320      	moveq	r3, #32
 8007edc:	4618      	mov	r0, r3
 8007ede:	4770      	bx	lr
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e7e4      	b.n	8007eae <__hi0bits+0xa>

08007ee4 <__lo0bits>:
 8007ee4:	6803      	ldr	r3, [r0, #0]
 8007ee6:	f013 0207 	ands.w	r2, r3, #7
 8007eea:	4601      	mov	r1, r0
 8007eec:	d00b      	beq.n	8007f06 <__lo0bits+0x22>
 8007eee:	07da      	lsls	r2, r3, #31
 8007ef0:	d424      	bmi.n	8007f3c <__lo0bits+0x58>
 8007ef2:	0798      	lsls	r0, r3, #30
 8007ef4:	bf49      	itett	mi
 8007ef6:	085b      	lsrmi	r3, r3, #1
 8007ef8:	089b      	lsrpl	r3, r3, #2
 8007efa:	2001      	movmi	r0, #1
 8007efc:	600b      	strmi	r3, [r1, #0]
 8007efe:	bf5c      	itt	pl
 8007f00:	600b      	strpl	r3, [r1, #0]
 8007f02:	2002      	movpl	r0, #2
 8007f04:	4770      	bx	lr
 8007f06:	b298      	uxth	r0, r3
 8007f08:	b9b0      	cbnz	r0, 8007f38 <__lo0bits+0x54>
 8007f0a:	0c1b      	lsrs	r3, r3, #16
 8007f0c:	2010      	movs	r0, #16
 8007f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f12:	bf04      	itt	eq
 8007f14:	0a1b      	lsreq	r3, r3, #8
 8007f16:	3008      	addeq	r0, #8
 8007f18:	071a      	lsls	r2, r3, #28
 8007f1a:	bf04      	itt	eq
 8007f1c:	091b      	lsreq	r3, r3, #4
 8007f1e:	3004      	addeq	r0, #4
 8007f20:	079a      	lsls	r2, r3, #30
 8007f22:	bf04      	itt	eq
 8007f24:	089b      	lsreq	r3, r3, #2
 8007f26:	3002      	addeq	r0, #2
 8007f28:	07da      	lsls	r2, r3, #31
 8007f2a:	d403      	bmi.n	8007f34 <__lo0bits+0x50>
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	f100 0001 	add.w	r0, r0, #1
 8007f32:	d005      	beq.n	8007f40 <__lo0bits+0x5c>
 8007f34:	600b      	str	r3, [r1, #0]
 8007f36:	4770      	bx	lr
 8007f38:	4610      	mov	r0, r2
 8007f3a:	e7e8      	b.n	8007f0e <__lo0bits+0x2a>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4770      	bx	lr
 8007f40:	2020      	movs	r0, #32
 8007f42:	4770      	bx	lr

08007f44 <__i2b>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	2101      	movs	r1, #1
 8007f4a:	f7ff feff 	bl	8007d4c <_Balloc>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	b928      	cbnz	r0, 8007f5e <__i2b+0x1a>
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <__i2b+0x24>)
 8007f54:	4805      	ldr	r0, [pc, #20]	; (8007f6c <__i2b+0x28>)
 8007f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f5a:	f000 fc9b 	bl	8008894 <__assert_func>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	6144      	str	r4, [r0, #20]
 8007f62:	6103      	str	r3, [r0, #16]
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	bf00      	nop
 8007f68:	08009638 	.word	0x08009638
 8007f6c:	08009649 	.word	0x08009649

08007f70 <__multiply>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	4614      	mov	r4, r2
 8007f76:	690a      	ldr	r2, [r1, #16]
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bfb8      	it	lt
 8007f7e:	460b      	movlt	r3, r1
 8007f80:	460d      	mov	r5, r1
 8007f82:	bfbc      	itt	lt
 8007f84:	4625      	movlt	r5, r4
 8007f86:	461c      	movlt	r4, r3
 8007f88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f90:	68ab      	ldr	r3, [r5, #8]
 8007f92:	6869      	ldr	r1, [r5, #4]
 8007f94:	eb0a 0709 	add.w	r7, sl, r9
 8007f98:	42bb      	cmp	r3, r7
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	bfb8      	it	lt
 8007f9e:	3101      	addlt	r1, #1
 8007fa0:	f7ff fed4 	bl	8007d4c <_Balloc>
 8007fa4:	b930      	cbnz	r0, 8007fb4 <__multiply+0x44>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	4b42      	ldr	r3, [pc, #264]	; (80080b4 <__multiply+0x144>)
 8007faa:	4843      	ldr	r0, [pc, #268]	; (80080b8 <__multiply+0x148>)
 8007fac:	f240 115d 	movw	r1, #349	; 0x15d
 8007fb0:	f000 fc70 	bl	8008894 <__assert_func>
 8007fb4:	f100 0614 	add.w	r6, r0, #20
 8007fb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007fbc:	4633      	mov	r3, r6
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4543      	cmp	r3, r8
 8007fc2:	d31e      	bcc.n	8008002 <__multiply+0x92>
 8007fc4:	f105 0c14 	add.w	ip, r5, #20
 8007fc8:	f104 0314 	add.w	r3, r4, #20
 8007fcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007fd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007fd4:	9202      	str	r2, [sp, #8]
 8007fd6:	ebac 0205 	sub.w	r2, ip, r5
 8007fda:	3a15      	subs	r2, #21
 8007fdc:	f022 0203 	bic.w	r2, r2, #3
 8007fe0:	3204      	adds	r2, #4
 8007fe2:	f105 0115 	add.w	r1, r5, #21
 8007fe6:	458c      	cmp	ip, r1
 8007fe8:	bf38      	it	cc
 8007fea:	2204      	movcc	r2, #4
 8007fec:	9201      	str	r2, [sp, #4]
 8007fee:	9a02      	ldr	r2, [sp, #8]
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d808      	bhi.n	8008008 <__multiply+0x98>
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	dc55      	bgt.n	80080a6 <__multiply+0x136>
 8007ffa:	6107      	str	r7, [r0, #16]
 8007ffc:	b005      	add	sp, #20
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	f843 2b04 	str.w	r2, [r3], #4
 8008006:	e7db      	b.n	8007fc0 <__multiply+0x50>
 8008008:	f8b3 a000 	ldrh.w	sl, [r3]
 800800c:	f1ba 0f00 	cmp.w	sl, #0
 8008010:	d020      	beq.n	8008054 <__multiply+0xe4>
 8008012:	f105 0e14 	add.w	lr, r5, #20
 8008016:	46b1      	mov	r9, r6
 8008018:	2200      	movs	r2, #0
 800801a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800801e:	f8d9 b000 	ldr.w	fp, [r9]
 8008022:	b2a1      	uxth	r1, r4
 8008024:	fa1f fb8b 	uxth.w	fp, fp
 8008028:	fb0a b101 	mla	r1, sl, r1, fp
 800802c:	4411      	add	r1, r2
 800802e:	f8d9 2000 	ldr.w	r2, [r9]
 8008032:	0c24      	lsrs	r4, r4, #16
 8008034:	0c12      	lsrs	r2, r2, #16
 8008036:	fb0a 2404 	mla	r4, sl, r4, r2
 800803a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800803e:	b289      	uxth	r1, r1
 8008040:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008044:	45f4      	cmp	ip, lr
 8008046:	f849 1b04 	str.w	r1, [r9], #4
 800804a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800804e:	d8e4      	bhi.n	800801a <__multiply+0xaa>
 8008050:	9901      	ldr	r1, [sp, #4]
 8008052:	5072      	str	r2, [r6, r1]
 8008054:	9a03      	ldr	r2, [sp, #12]
 8008056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800805a:	3304      	adds	r3, #4
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	d01f      	beq.n	80080a2 <__multiply+0x132>
 8008062:	6834      	ldr	r4, [r6, #0]
 8008064:	f105 0114 	add.w	r1, r5, #20
 8008068:	46b6      	mov	lr, r6
 800806a:	f04f 0a00 	mov.w	sl, #0
 800806e:	880a      	ldrh	r2, [r1, #0]
 8008070:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008074:	fb09 b202 	mla	r2, r9, r2, fp
 8008078:	4492      	add	sl, r2
 800807a:	b2a4      	uxth	r4, r4
 800807c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008080:	f84e 4b04 	str.w	r4, [lr], #4
 8008084:	f851 4b04 	ldr.w	r4, [r1], #4
 8008088:	f8be 2000 	ldrh.w	r2, [lr]
 800808c:	0c24      	lsrs	r4, r4, #16
 800808e:	fb09 2404 	mla	r4, r9, r4, r2
 8008092:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008096:	458c      	cmp	ip, r1
 8008098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800809c:	d8e7      	bhi.n	800806e <__multiply+0xfe>
 800809e:	9a01      	ldr	r2, [sp, #4]
 80080a0:	50b4      	str	r4, [r6, r2]
 80080a2:	3604      	adds	r6, #4
 80080a4:	e7a3      	b.n	8007fee <__multiply+0x7e>
 80080a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1a5      	bne.n	8007ffa <__multiply+0x8a>
 80080ae:	3f01      	subs	r7, #1
 80080b0:	e7a1      	b.n	8007ff6 <__multiply+0x86>
 80080b2:	bf00      	nop
 80080b4:	08009638 	.word	0x08009638
 80080b8:	08009649 	.word	0x08009649

080080bc <__pow5mult>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4615      	mov	r5, r2
 80080c2:	f012 0203 	ands.w	r2, r2, #3
 80080c6:	4606      	mov	r6, r0
 80080c8:	460f      	mov	r7, r1
 80080ca:	d007      	beq.n	80080dc <__pow5mult+0x20>
 80080cc:	4c25      	ldr	r4, [pc, #148]	; (8008164 <__pow5mult+0xa8>)
 80080ce:	3a01      	subs	r2, #1
 80080d0:	2300      	movs	r3, #0
 80080d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080d6:	f7ff fe9b 	bl	8007e10 <__multadd>
 80080da:	4607      	mov	r7, r0
 80080dc:	10ad      	asrs	r5, r5, #2
 80080de:	d03d      	beq.n	800815c <__pow5mult+0xa0>
 80080e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080e2:	b97c      	cbnz	r4, 8008104 <__pow5mult+0x48>
 80080e4:	2010      	movs	r0, #16
 80080e6:	f7ff fe1b 	bl	8007d20 <malloc>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6270      	str	r0, [r6, #36]	; 0x24
 80080ee:	b928      	cbnz	r0, 80080fc <__pow5mult+0x40>
 80080f0:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <__pow5mult+0xac>)
 80080f2:	481e      	ldr	r0, [pc, #120]	; (800816c <__pow5mult+0xb0>)
 80080f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80080f8:	f000 fbcc 	bl	8008894 <__assert_func>
 80080fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008100:	6004      	str	r4, [r0, #0]
 8008102:	60c4      	str	r4, [r0, #12]
 8008104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800810c:	b94c      	cbnz	r4, 8008122 <__pow5mult+0x66>
 800810e:	f240 2171 	movw	r1, #625	; 0x271
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ff16 	bl	8007f44 <__i2b>
 8008118:	2300      	movs	r3, #0
 800811a:	f8c8 0008 	str.w	r0, [r8, #8]
 800811e:	4604      	mov	r4, r0
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	07eb      	lsls	r3, r5, #31
 8008128:	d50a      	bpl.n	8008140 <__pow5mult+0x84>
 800812a:	4639      	mov	r1, r7
 800812c:	4622      	mov	r2, r4
 800812e:	4630      	mov	r0, r6
 8008130:	f7ff ff1e 	bl	8007f70 <__multiply>
 8008134:	4639      	mov	r1, r7
 8008136:	4680      	mov	r8, r0
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff fe47 	bl	8007dcc <_Bfree>
 800813e:	4647      	mov	r7, r8
 8008140:	106d      	asrs	r5, r5, #1
 8008142:	d00b      	beq.n	800815c <__pow5mult+0xa0>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	b938      	cbnz	r0, 8008158 <__pow5mult+0x9c>
 8008148:	4622      	mov	r2, r4
 800814a:	4621      	mov	r1, r4
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ff0f 	bl	8007f70 <__multiply>
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	f8c0 9000 	str.w	r9, [r0]
 8008158:	4604      	mov	r4, r0
 800815a:	e7e4      	b.n	8008126 <__pow5mult+0x6a>
 800815c:	4638      	mov	r0, r7
 800815e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008162:	bf00      	nop
 8008164:	080097a0 	.word	0x080097a0
 8008168:	080095c2 	.word	0x080095c2
 800816c:	08009649 	.word	0x08009649

08008170 <__lshift>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	460c      	mov	r4, r1
 8008176:	6849      	ldr	r1, [r1, #4]
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	4607      	mov	r7, r0
 8008182:	4691      	mov	r9, r2
 8008184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008188:	f108 0601 	add.w	r6, r8, #1
 800818c:	42b3      	cmp	r3, r6
 800818e:	db0b      	blt.n	80081a8 <__lshift+0x38>
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff fddb 	bl	8007d4c <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b948      	cbnz	r0, 80081ae <__lshift+0x3e>
 800819a:	4602      	mov	r2, r0
 800819c:	4b28      	ldr	r3, [pc, #160]	; (8008240 <__lshift+0xd0>)
 800819e:	4829      	ldr	r0, [pc, #164]	; (8008244 <__lshift+0xd4>)
 80081a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081a4:	f000 fb76 	bl	8008894 <__assert_func>
 80081a8:	3101      	adds	r1, #1
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	e7ee      	b.n	800818c <__lshift+0x1c>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f100 0114 	add.w	r1, r0, #20
 80081b4:	f100 0210 	add.w	r2, r0, #16
 80081b8:	4618      	mov	r0, r3
 80081ba:	4553      	cmp	r3, sl
 80081bc:	db33      	blt.n	8008226 <__lshift+0xb6>
 80081be:	6920      	ldr	r0, [r4, #16]
 80081c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081c4:	f104 0314 	add.w	r3, r4, #20
 80081c8:	f019 091f 	ands.w	r9, r9, #31
 80081cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081d4:	d02b      	beq.n	800822e <__lshift+0xbe>
 80081d6:	f1c9 0e20 	rsb	lr, r9, #32
 80081da:	468a      	mov	sl, r1
 80081dc:	2200      	movs	r2, #0
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	fa00 f009 	lsl.w	r0, r0, r9
 80081e4:	4302      	orrs	r2, r0
 80081e6:	f84a 2b04 	str.w	r2, [sl], #4
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	459c      	cmp	ip, r3
 80081f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80081f4:	d8f3      	bhi.n	80081de <__lshift+0x6e>
 80081f6:	ebac 0304 	sub.w	r3, ip, r4
 80081fa:	3b15      	subs	r3, #21
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	3304      	adds	r3, #4
 8008202:	f104 0015 	add.w	r0, r4, #21
 8008206:	4584      	cmp	ip, r0
 8008208:	bf38      	it	cc
 800820a:	2304      	movcc	r3, #4
 800820c:	50ca      	str	r2, [r1, r3]
 800820e:	b10a      	cbz	r2, 8008214 <__lshift+0xa4>
 8008210:	f108 0602 	add.w	r6, r8, #2
 8008214:	3e01      	subs	r6, #1
 8008216:	4638      	mov	r0, r7
 8008218:	612e      	str	r6, [r5, #16]
 800821a:	4621      	mov	r1, r4
 800821c:	f7ff fdd6 	bl	8007dcc <_Bfree>
 8008220:	4628      	mov	r0, r5
 8008222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008226:	f842 0f04 	str.w	r0, [r2, #4]!
 800822a:	3301      	adds	r3, #1
 800822c:	e7c5      	b.n	80081ba <__lshift+0x4a>
 800822e:	3904      	subs	r1, #4
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	f841 2f04 	str.w	r2, [r1, #4]!
 8008238:	459c      	cmp	ip, r3
 800823a:	d8f9      	bhi.n	8008230 <__lshift+0xc0>
 800823c:	e7ea      	b.n	8008214 <__lshift+0xa4>
 800823e:	bf00      	nop
 8008240:	08009638 	.word	0x08009638
 8008244:	08009649 	.word	0x08009649

08008248 <__mcmp>:
 8008248:	b530      	push	{r4, r5, lr}
 800824a:	6902      	ldr	r2, [r0, #16]
 800824c:	690c      	ldr	r4, [r1, #16]
 800824e:	1b12      	subs	r2, r2, r4
 8008250:	d10e      	bne.n	8008270 <__mcmp+0x28>
 8008252:	f100 0314 	add.w	r3, r0, #20
 8008256:	3114      	adds	r1, #20
 8008258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800825c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008268:	42a5      	cmp	r5, r4
 800826a:	d003      	beq.n	8008274 <__mcmp+0x2c>
 800826c:	d305      	bcc.n	800827a <__mcmp+0x32>
 800826e:	2201      	movs	r2, #1
 8008270:	4610      	mov	r0, r2
 8008272:	bd30      	pop	{r4, r5, pc}
 8008274:	4283      	cmp	r3, r0
 8008276:	d3f3      	bcc.n	8008260 <__mcmp+0x18>
 8008278:	e7fa      	b.n	8008270 <__mcmp+0x28>
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	e7f7      	b.n	8008270 <__mcmp+0x28>

08008280 <__mdiff>:
 8008280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	460c      	mov	r4, r1
 8008286:	4606      	mov	r6, r0
 8008288:	4611      	mov	r1, r2
 800828a:	4620      	mov	r0, r4
 800828c:	4617      	mov	r7, r2
 800828e:	f7ff ffdb 	bl	8008248 <__mcmp>
 8008292:	1e05      	subs	r5, r0, #0
 8008294:	d110      	bne.n	80082b8 <__mdiff+0x38>
 8008296:	4629      	mov	r1, r5
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fd57 	bl	8007d4c <_Balloc>
 800829e:	b930      	cbnz	r0, 80082ae <__mdiff+0x2e>
 80082a0:	4b39      	ldr	r3, [pc, #228]	; (8008388 <__mdiff+0x108>)
 80082a2:	4602      	mov	r2, r0
 80082a4:	f240 2132 	movw	r1, #562	; 0x232
 80082a8:	4838      	ldr	r0, [pc, #224]	; (800838c <__mdiff+0x10c>)
 80082aa:	f000 faf3 	bl	8008894 <__assert_func>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	bfa4      	itt	ge
 80082ba:	463b      	movge	r3, r7
 80082bc:	4627      	movge	r7, r4
 80082be:	4630      	mov	r0, r6
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	bfa6      	itte	ge
 80082c4:	461c      	movge	r4, r3
 80082c6:	2500      	movge	r5, #0
 80082c8:	2501      	movlt	r5, #1
 80082ca:	f7ff fd3f 	bl	8007d4c <_Balloc>
 80082ce:	b920      	cbnz	r0, 80082da <__mdiff+0x5a>
 80082d0:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <__mdiff+0x108>)
 80082d2:	4602      	mov	r2, r0
 80082d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80082d8:	e7e6      	b.n	80082a8 <__mdiff+0x28>
 80082da:	693e      	ldr	r6, [r7, #16]
 80082dc:	60c5      	str	r5, [r0, #12]
 80082de:	6925      	ldr	r5, [r4, #16]
 80082e0:	f107 0114 	add.w	r1, r7, #20
 80082e4:	f104 0914 	add.w	r9, r4, #20
 80082e8:	f100 0e14 	add.w	lr, r0, #20
 80082ec:	f107 0210 	add.w	r2, r7, #16
 80082f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80082f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80082f8:	46f2      	mov	sl, lr
 80082fa:	2700      	movs	r7, #0
 80082fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008304:	fa1f f883 	uxth.w	r8, r3
 8008308:	fa17 f78b 	uxtah	r7, r7, fp
 800830c:	0c1b      	lsrs	r3, r3, #16
 800830e:	eba7 0808 	sub.w	r8, r7, r8
 8008312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800831a:	fa1f f888 	uxth.w	r8, r8
 800831e:	141f      	asrs	r7, r3, #16
 8008320:	454d      	cmp	r5, r9
 8008322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008326:	f84a 3b04 	str.w	r3, [sl], #4
 800832a:	d8e7      	bhi.n	80082fc <__mdiff+0x7c>
 800832c:	1b2b      	subs	r3, r5, r4
 800832e:	3b15      	subs	r3, #21
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	3304      	adds	r3, #4
 8008336:	3415      	adds	r4, #21
 8008338:	42a5      	cmp	r5, r4
 800833a:	bf38      	it	cc
 800833c:	2304      	movcc	r3, #4
 800833e:	4419      	add	r1, r3
 8008340:	4473      	add	r3, lr
 8008342:	469e      	mov	lr, r3
 8008344:	460d      	mov	r5, r1
 8008346:	4565      	cmp	r5, ip
 8008348:	d30e      	bcc.n	8008368 <__mdiff+0xe8>
 800834a:	f10c 0203 	add.w	r2, ip, #3
 800834e:	1a52      	subs	r2, r2, r1
 8008350:	f022 0203 	bic.w	r2, r2, #3
 8008354:	3903      	subs	r1, #3
 8008356:	458c      	cmp	ip, r1
 8008358:	bf38      	it	cc
 800835a:	2200      	movcc	r2, #0
 800835c:	441a      	add	r2, r3
 800835e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008362:	b17b      	cbz	r3, 8008384 <__mdiff+0x104>
 8008364:	6106      	str	r6, [r0, #16]
 8008366:	e7a5      	b.n	80082b4 <__mdiff+0x34>
 8008368:	f855 8b04 	ldr.w	r8, [r5], #4
 800836c:	fa17 f488 	uxtah	r4, r7, r8
 8008370:	1422      	asrs	r2, r4, #16
 8008372:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008376:	b2a4      	uxth	r4, r4
 8008378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800837c:	f84e 4b04 	str.w	r4, [lr], #4
 8008380:	1417      	asrs	r7, r2, #16
 8008382:	e7e0      	b.n	8008346 <__mdiff+0xc6>
 8008384:	3e01      	subs	r6, #1
 8008386:	e7ea      	b.n	800835e <__mdiff+0xde>
 8008388:	08009638 	.word	0x08009638
 800838c:	08009649 	.word	0x08009649

08008390 <__d2b>:
 8008390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4689      	mov	r9, r1
 8008396:	2101      	movs	r1, #1
 8008398:	ec57 6b10 	vmov	r6, r7, d0
 800839c:	4690      	mov	r8, r2
 800839e:	f7ff fcd5 	bl	8007d4c <_Balloc>
 80083a2:	4604      	mov	r4, r0
 80083a4:	b930      	cbnz	r0, 80083b4 <__d2b+0x24>
 80083a6:	4602      	mov	r2, r0
 80083a8:	4b25      	ldr	r3, [pc, #148]	; (8008440 <__d2b+0xb0>)
 80083aa:	4826      	ldr	r0, [pc, #152]	; (8008444 <__d2b+0xb4>)
 80083ac:	f240 310a 	movw	r1, #778	; 0x30a
 80083b0:	f000 fa70 	bl	8008894 <__assert_func>
 80083b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083bc:	bb35      	cbnz	r5, 800840c <__d2b+0x7c>
 80083be:	2e00      	cmp	r6, #0
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	d028      	beq.n	8008416 <__d2b+0x86>
 80083c4:	4668      	mov	r0, sp
 80083c6:	9600      	str	r6, [sp, #0]
 80083c8:	f7ff fd8c 	bl	8007ee4 <__lo0bits>
 80083cc:	9900      	ldr	r1, [sp, #0]
 80083ce:	b300      	cbz	r0, 8008412 <__d2b+0x82>
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	f1c0 0320 	rsb	r3, r0, #32
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	430b      	orrs	r3, r1
 80083dc:	40c2      	lsrs	r2, r0
 80083de:	6163      	str	r3, [r4, #20]
 80083e0:	9201      	str	r2, [sp, #4]
 80083e2:	9b01      	ldr	r3, [sp, #4]
 80083e4:	61a3      	str	r3, [r4, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bf14      	ite	ne
 80083ea:	2202      	movne	r2, #2
 80083ec:	2201      	moveq	r2, #1
 80083ee:	6122      	str	r2, [r4, #16]
 80083f0:	b1d5      	cbz	r5, 8008428 <__d2b+0x98>
 80083f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083f6:	4405      	add	r5, r0
 80083f8:	f8c9 5000 	str.w	r5, [r9]
 80083fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008400:	f8c8 0000 	str.w	r0, [r8]
 8008404:	4620      	mov	r0, r4
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008410:	e7d5      	b.n	80083be <__d2b+0x2e>
 8008412:	6161      	str	r1, [r4, #20]
 8008414:	e7e5      	b.n	80083e2 <__d2b+0x52>
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fd64 	bl	8007ee4 <__lo0bits>
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	6163      	str	r3, [r4, #20]
 8008420:	2201      	movs	r2, #1
 8008422:	6122      	str	r2, [r4, #16]
 8008424:	3020      	adds	r0, #32
 8008426:	e7e3      	b.n	80083f0 <__d2b+0x60>
 8008428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800842c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008430:	f8c9 0000 	str.w	r0, [r9]
 8008434:	6918      	ldr	r0, [r3, #16]
 8008436:	f7ff fd35 	bl	8007ea4 <__hi0bits>
 800843a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800843e:	e7df      	b.n	8008400 <__d2b+0x70>
 8008440:	08009638 	.word	0x08009638
 8008444:	08009649 	.word	0x08009649

08008448 <_calloc_r>:
 8008448:	b513      	push	{r0, r1, r4, lr}
 800844a:	434a      	muls	r2, r1
 800844c:	4611      	mov	r1, r2
 800844e:	9201      	str	r2, [sp, #4]
 8008450:	f000 f85a 	bl	8008508 <_malloc_r>
 8008454:	4604      	mov	r4, r0
 8008456:	b118      	cbz	r0, 8008460 <_calloc_r+0x18>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	2100      	movs	r1, #0
 800845c:	f7fe f8c2 	bl	80065e4 <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	b002      	add	sp, #8
 8008464:	bd10      	pop	{r4, pc}
	...

08008468 <_free_r>:
 8008468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800846a:	2900      	cmp	r1, #0
 800846c:	d048      	beq.n	8008500 <_free_r+0x98>
 800846e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008472:	9001      	str	r0, [sp, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f1a1 0404 	sub.w	r4, r1, #4
 800847a:	bfb8      	it	lt
 800847c:	18e4      	addlt	r4, r4, r3
 800847e:	f000 fa65 	bl	800894c <__malloc_lock>
 8008482:	4a20      	ldr	r2, [pc, #128]	; (8008504 <_free_r+0x9c>)
 8008484:	9801      	ldr	r0, [sp, #4]
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	4615      	mov	r5, r2
 800848a:	b933      	cbnz	r3, 800849a <_free_r+0x32>
 800848c:	6063      	str	r3, [r4, #4]
 800848e:	6014      	str	r4, [r2, #0]
 8008490:	b003      	add	sp, #12
 8008492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008496:	f000 ba5f 	b.w	8008958 <__malloc_unlock>
 800849a:	42a3      	cmp	r3, r4
 800849c:	d90b      	bls.n	80084b6 <_free_r+0x4e>
 800849e:	6821      	ldr	r1, [r4, #0]
 80084a0:	1862      	adds	r2, r4, r1
 80084a2:	4293      	cmp	r3, r2
 80084a4:	bf04      	itt	eq
 80084a6:	681a      	ldreq	r2, [r3, #0]
 80084a8:	685b      	ldreq	r3, [r3, #4]
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	bf04      	itt	eq
 80084ae:	1852      	addeq	r2, r2, r1
 80084b0:	6022      	streq	r2, [r4, #0]
 80084b2:	602c      	str	r4, [r5, #0]
 80084b4:	e7ec      	b.n	8008490 <_free_r+0x28>
 80084b6:	461a      	mov	r2, r3
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	b10b      	cbz	r3, 80084c0 <_free_r+0x58>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d9fa      	bls.n	80084b6 <_free_r+0x4e>
 80084c0:	6811      	ldr	r1, [r2, #0]
 80084c2:	1855      	adds	r5, r2, r1
 80084c4:	42a5      	cmp	r5, r4
 80084c6:	d10b      	bne.n	80084e0 <_free_r+0x78>
 80084c8:	6824      	ldr	r4, [r4, #0]
 80084ca:	4421      	add	r1, r4
 80084cc:	1854      	adds	r4, r2, r1
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	d1dd      	bne.n	8008490 <_free_r+0x28>
 80084d4:	681c      	ldr	r4, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	6053      	str	r3, [r2, #4]
 80084da:	4421      	add	r1, r4
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	e7d7      	b.n	8008490 <_free_r+0x28>
 80084e0:	d902      	bls.n	80084e8 <_free_r+0x80>
 80084e2:	230c      	movs	r3, #12
 80084e4:	6003      	str	r3, [r0, #0]
 80084e6:	e7d3      	b.n	8008490 <_free_r+0x28>
 80084e8:	6825      	ldr	r5, [r4, #0]
 80084ea:	1961      	adds	r1, r4, r5
 80084ec:	428b      	cmp	r3, r1
 80084ee:	bf04      	itt	eq
 80084f0:	6819      	ldreq	r1, [r3, #0]
 80084f2:	685b      	ldreq	r3, [r3, #4]
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	bf04      	itt	eq
 80084f8:	1949      	addeq	r1, r1, r5
 80084fa:	6021      	streq	r1, [r4, #0]
 80084fc:	6054      	str	r4, [r2, #4]
 80084fe:	e7c7      	b.n	8008490 <_free_r+0x28>
 8008500:	b003      	add	sp, #12
 8008502:	bd30      	pop	{r4, r5, pc}
 8008504:	20000218 	.word	0x20000218

08008508 <_malloc_r>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	1ccd      	adds	r5, r1, #3
 800850c:	f025 0503 	bic.w	r5, r5, #3
 8008510:	3508      	adds	r5, #8
 8008512:	2d0c      	cmp	r5, #12
 8008514:	bf38      	it	cc
 8008516:	250c      	movcc	r5, #12
 8008518:	2d00      	cmp	r5, #0
 800851a:	4606      	mov	r6, r0
 800851c:	db01      	blt.n	8008522 <_malloc_r+0x1a>
 800851e:	42a9      	cmp	r1, r5
 8008520:	d903      	bls.n	800852a <_malloc_r+0x22>
 8008522:	230c      	movs	r3, #12
 8008524:	6033      	str	r3, [r6, #0]
 8008526:	2000      	movs	r0, #0
 8008528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800852a:	f000 fa0f 	bl	800894c <__malloc_lock>
 800852e:	4921      	ldr	r1, [pc, #132]	; (80085b4 <_malloc_r+0xac>)
 8008530:	680a      	ldr	r2, [r1, #0]
 8008532:	4614      	mov	r4, r2
 8008534:	b99c      	cbnz	r4, 800855e <_malloc_r+0x56>
 8008536:	4f20      	ldr	r7, [pc, #128]	; (80085b8 <_malloc_r+0xb0>)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	b923      	cbnz	r3, 8008546 <_malloc_r+0x3e>
 800853c:	4621      	mov	r1, r4
 800853e:	4630      	mov	r0, r6
 8008540:	f000 f998 	bl	8008874 <_sbrk_r>
 8008544:	6038      	str	r0, [r7, #0]
 8008546:	4629      	mov	r1, r5
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f993 	bl	8008874 <_sbrk_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d123      	bne.n	800859a <_malloc_r+0x92>
 8008552:	230c      	movs	r3, #12
 8008554:	6033      	str	r3, [r6, #0]
 8008556:	4630      	mov	r0, r6
 8008558:	f000 f9fe 	bl	8008958 <__malloc_unlock>
 800855c:	e7e3      	b.n	8008526 <_malloc_r+0x1e>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	1b5b      	subs	r3, r3, r5
 8008562:	d417      	bmi.n	8008594 <_malloc_r+0x8c>
 8008564:	2b0b      	cmp	r3, #11
 8008566:	d903      	bls.n	8008570 <_malloc_r+0x68>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	441c      	add	r4, r3
 800856c:	6025      	str	r5, [r4, #0]
 800856e:	e004      	b.n	800857a <_malloc_r+0x72>
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	42a2      	cmp	r2, r4
 8008574:	bf0c      	ite	eq
 8008576:	600b      	streq	r3, [r1, #0]
 8008578:	6053      	strne	r3, [r2, #4]
 800857a:	4630      	mov	r0, r6
 800857c:	f000 f9ec 	bl	8008958 <__malloc_unlock>
 8008580:	f104 000b 	add.w	r0, r4, #11
 8008584:	1d23      	adds	r3, r4, #4
 8008586:	f020 0007 	bic.w	r0, r0, #7
 800858a:	1ac2      	subs	r2, r0, r3
 800858c:	d0cc      	beq.n	8008528 <_malloc_r+0x20>
 800858e:	1a1b      	subs	r3, r3, r0
 8008590:	50a3      	str	r3, [r4, r2]
 8008592:	e7c9      	b.n	8008528 <_malloc_r+0x20>
 8008594:	4622      	mov	r2, r4
 8008596:	6864      	ldr	r4, [r4, #4]
 8008598:	e7cc      	b.n	8008534 <_malloc_r+0x2c>
 800859a:	1cc4      	adds	r4, r0, #3
 800859c:	f024 0403 	bic.w	r4, r4, #3
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d0e3      	beq.n	800856c <_malloc_r+0x64>
 80085a4:	1a21      	subs	r1, r4, r0
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f964 	bl	8008874 <_sbrk_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d1dd      	bne.n	800856c <_malloc_r+0x64>
 80085b0:	e7cf      	b.n	8008552 <_malloc_r+0x4a>
 80085b2:	bf00      	nop
 80085b4:	20000218 	.word	0x20000218
 80085b8:	2000021c 	.word	0x2000021c

080085bc <__ssputs_r>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	688e      	ldr	r6, [r1, #8]
 80085c2:	429e      	cmp	r6, r3
 80085c4:	4682      	mov	sl, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4690      	mov	r8, r2
 80085ca:	461f      	mov	r7, r3
 80085cc:	d838      	bhi.n	8008640 <__ssputs_r+0x84>
 80085ce:	898a      	ldrh	r2, [r1, #12]
 80085d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d4:	d032      	beq.n	800863c <__ssputs_r+0x80>
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	6909      	ldr	r1, [r1, #16]
 80085da:	eba5 0901 	sub.w	r9, r5, r1
 80085de:	6965      	ldr	r5, [r4, #20]
 80085e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085e8:	3301      	adds	r3, #1
 80085ea:	444b      	add	r3, r9
 80085ec:	106d      	asrs	r5, r5, #1
 80085ee:	429d      	cmp	r5, r3
 80085f0:	bf38      	it	cc
 80085f2:	461d      	movcc	r5, r3
 80085f4:	0553      	lsls	r3, r2, #21
 80085f6:	d531      	bpl.n	800865c <__ssputs_r+0xa0>
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7ff ff85 	bl	8008508 <_malloc_r>
 80085fe:	4606      	mov	r6, r0
 8008600:	b950      	cbnz	r0, 8008618 <__ssputs_r+0x5c>
 8008602:	230c      	movs	r3, #12
 8008604:	f8ca 3000 	str.w	r3, [sl]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	6921      	ldr	r1, [r4, #16]
 800861a:	464a      	mov	r2, r9
 800861c:	f7ff fb88 	bl	8007d30 <memcpy>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	6126      	str	r6, [r4, #16]
 800862e:	6165      	str	r5, [r4, #20]
 8008630:	444e      	add	r6, r9
 8008632:	eba5 0509 	sub.w	r5, r5, r9
 8008636:	6026      	str	r6, [r4, #0]
 8008638:	60a5      	str	r5, [r4, #8]
 800863a:	463e      	mov	r6, r7
 800863c:	42be      	cmp	r6, r7
 800863e:	d900      	bls.n	8008642 <__ssputs_r+0x86>
 8008640:	463e      	mov	r6, r7
 8008642:	4632      	mov	r2, r6
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4641      	mov	r1, r8
 8008648:	f000 f966 	bl	8008918 <memmove>
 800864c:	68a3      	ldr	r3, [r4, #8]
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	1b9b      	subs	r3, r3, r6
 8008652:	4432      	add	r2, r6
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	2000      	movs	r0, #0
 800865a:	e7db      	b.n	8008614 <__ssputs_r+0x58>
 800865c:	462a      	mov	r2, r5
 800865e:	f000 f981 	bl	8008964 <_realloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d1e1      	bne.n	800862c <__ssputs_r+0x70>
 8008668:	6921      	ldr	r1, [r4, #16]
 800866a:	4650      	mov	r0, sl
 800866c:	f7ff fefc 	bl	8008468 <_free_r>
 8008670:	e7c7      	b.n	8008602 <__ssputs_r+0x46>
	...

08008674 <_svfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	4698      	mov	r8, r3
 800867a:	898b      	ldrh	r3, [r1, #12]
 800867c:	061b      	lsls	r3, r3, #24
 800867e:	b09d      	sub	sp, #116	; 0x74
 8008680:	4607      	mov	r7, r0
 8008682:	460d      	mov	r5, r1
 8008684:	4614      	mov	r4, r2
 8008686:	d50e      	bpl.n	80086a6 <_svfiprintf_r+0x32>
 8008688:	690b      	ldr	r3, [r1, #16]
 800868a:	b963      	cbnz	r3, 80086a6 <_svfiprintf_r+0x32>
 800868c:	2140      	movs	r1, #64	; 0x40
 800868e:	f7ff ff3b 	bl	8008508 <_malloc_r>
 8008692:	6028      	str	r0, [r5, #0]
 8008694:	6128      	str	r0, [r5, #16]
 8008696:	b920      	cbnz	r0, 80086a2 <_svfiprintf_r+0x2e>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e0d1      	b.n	8008846 <_svfiprintf_r+0x1d2>
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	616b      	str	r3, [r5, #20]
 80086a6:	2300      	movs	r3, #0
 80086a8:	9309      	str	r3, [sp, #36]	; 0x24
 80086aa:	2320      	movs	r3, #32
 80086ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b4:	2330      	movs	r3, #48	; 0x30
 80086b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008860 <_svfiprintf_r+0x1ec>
 80086ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086be:	f04f 0901 	mov.w	r9, #1
 80086c2:	4623      	mov	r3, r4
 80086c4:	469a      	mov	sl, r3
 80086c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ca:	b10a      	cbz	r2, 80086d0 <_svfiprintf_r+0x5c>
 80086cc:	2a25      	cmp	r2, #37	; 0x25
 80086ce:	d1f9      	bne.n	80086c4 <_svfiprintf_r+0x50>
 80086d0:	ebba 0b04 	subs.w	fp, sl, r4
 80086d4:	d00b      	beq.n	80086ee <_svfiprintf_r+0x7a>
 80086d6:	465b      	mov	r3, fp
 80086d8:	4622      	mov	r2, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff ff6d 	bl	80085bc <__ssputs_r>
 80086e2:	3001      	adds	r0, #1
 80086e4:	f000 80aa 	beq.w	800883c <_svfiprintf_r+0x1c8>
 80086e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ea:	445a      	add	r2, fp
 80086ec:	9209      	str	r2, [sp, #36]	; 0x24
 80086ee:	f89a 3000 	ldrb.w	r3, [sl]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80a2 	beq.w	800883c <_svfiprintf_r+0x1c8>
 80086f8:	2300      	movs	r3, #0
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008702:	f10a 0a01 	add.w	sl, sl, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	9307      	str	r3, [sp, #28]
 800870a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870e:	931a      	str	r3, [sp, #104]	; 0x68
 8008710:	4654      	mov	r4, sl
 8008712:	2205      	movs	r2, #5
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	4851      	ldr	r0, [pc, #324]	; (8008860 <_svfiprintf_r+0x1ec>)
 800871a:	f7f7 fd69 	bl	80001f0 <memchr>
 800871e:	9a04      	ldr	r2, [sp, #16]
 8008720:	b9d8      	cbnz	r0, 800875a <_svfiprintf_r+0xe6>
 8008722:	06d0      	lsls	r0, r2, #27
 8008724:	bf44      	itt	mi
 8008726:	2320      	movmi	r3, #32
 8008728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872c:	0711      	lsls	r1, r2, #28
 800872e:	bf44      	itt	mi
 8008730:	232b      	movmi	r3, #43	; 0x2b
 8008732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008736:	f89a 3000 	ldrb.w	r3, [sl]
 800873a:	2b2a      	cmp	r3, #42	; 0x2a
 800873c:	d015      	beq.n	800876a <_svfiprintf_r+0xf6>
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	4654      	mov	r4, sl
 8008742:	2000      	movs	r0, #0
 8008744:	f04f 0c0a 	mov.w	ip, #10
 8008748:	4621      	mov	r1, r4
 800874a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800874e:	3b30      	subs	r3, #48	; 0x30
 8008750:	2b09      	cmp	r3, #9
 8008752:	d94e      	bls.n	80087f2 <_svfiprintf_r+0x17e>
 8008754:	b1b0      	cbz	r0, 8008784 <_svfiprintf_r+0x110>
 8008756:	9207      	str	r2, [sp, #28]
 8008758:	e014      	b.n	8008784 <_svfiprintf_r+0x110>
 800875a:	eba0 0308 	sub.w	r3, r0, r8
 800875e:	fa09 f303 	lsl.w	r3, r9, r3
 8008762:	4313      	orrs	r3, r2
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	46a2      	mov	sl, r4
 8008768:	e7d2      	b.n	8008710 <_svfiprintf_r+0x9c>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	1d19      	adds	r1, r3, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	9103      	str	r1, [sp, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfbb      	ittet	lt
 8008776:	425b      	neglt	r3, r3
 8008778:	f042 0202 	orrlt.w	r2, r2, #2
 800877c:	9307      	strge	r3, [sp, #28]
 800877e:	9307      	strlt	r3, [sp, #28]
 8008780:	bfb8      	it	lt
 8008782:	9204      	strlt	r2, [sp, #16]
 8008784:	7823      	ldrb	r3, [r4, #0]
 8008786:	2b2e      	cmp	r3, #46	; 0x2e
 8008788:	d10c      	bne.n	80087a4 <_svfiprintf_r+0x130>
 800878a:	7863      	ldrb	r3, [r4, #1]
 800878c:	2b2a      	cmp	r3, #42	; 0x2a
 800878e:	d135      	bne.n	80087fc <_svfiprintf_r+0x188>
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	9203      	str	r2, [sp, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfb8      	it	lt
 800879c:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a0:	3402      	adds	r4, #2
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008870 <_svfiprintf_r+0x1fc>
 80087a8:	7821      	ldrb	r1, [r4, #0]
 80087aa:	2203      	movs	r2, #3
 80087ac:	4650      	mov	r0, sl
 80087ae:	f7f7 fd1f 	bl	80001f0 <memchr>
 80087b2:	b140      	cbz	r0, 80087c6 <_svfiprintf_r+0x152>
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	eba0 000a 	sub.w	r0, r0, sl
 80087ba:	fa03 f000 	lsl.w	r0, r3, r0
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	4303      	orrs	r3, r0
 80087c2:	3401      	adds	r4, #1
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ca:	4826      	ldr	r0, [pc, #152]	; (8008864 <_svfiprintf_r+0x1f0>)
 80087cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d0:	2206      	movs	r2, #6
 80087d2:	f7f7 fd0d 	bl	80001f0 <memchr>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d038      	beq.n	800884c <_svfiprintf_r+0x1d8>
 80087da:	4b23      	ldr	r3, [pc, #140]	; (8008868 <_svfiprintf_r+0x1f4>)
 80087dc:	bb1b      	cbnz	r3, 8008826 <_svfiprintf_r+0x1b2>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	f023 0307 	bic.w	r3, r3, #7
 80087e6:	3308      	adds	r3, #8
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ec:	4433      	add	r3, r6
 80087ee:	9309      	str	r3, [sp, #36]	; 0x24
 80087f0:	e767      	b.n	80086c2 <_svfiprintf_r+0x4e>
 80087f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f6:	460c      	mov	r4, r1
 80087f8:	2001      	movs	r0, #1
 80087fa:	e7a5      	b.n	8008748 <_svfiprintf_r+0xd4>
 80087fc:	2300      	movs	r3, #0
 80087fe:	3401      	adds	r4, #1
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0c0a 	mov.w	ip, #10
 8008808:	4620      	mov	r0, r4
 800880a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880e:	3a30      	subs	r2, #48	; 0x30
 8008810:	2a09      	cmp	r2, #9
 8008812:	d903      	bls.n	800881c <_svfiprintf_r+0x1a8>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0c5      	beq.n	80087a4 <_svfiprintf_r+0x130>
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	e7c3      	b.n	80087a4 <_svfiprintf_r+0x130>
 800881c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008820:	4604      	mov	r4, r0
 8008822:	2301      	movs	r3, #1
 8008824:	e7f0      	b.n	8008808 <_svfiprintf_r+0x194>
 8008826:	ab03      	add	r3, sp, #12
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	462a      	mov	r2, r5
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <_svfiprintf_r+0x1f8>)
 800882e:	a904      	add	r1, sp, #16
 8008830:	4638      	mov	r0, r7
 8008832:	f7fd ff7f 	bl	8006734 <_printf_float>
 8008836:	1c42      	adds	r2, r0, #1
 8008838:	4606      	mov	r6, r0
 800883a:	d1d6      	bne.n	80087ea <_svfiprintf_r+0x176>
 800883c:	89ab      	ldrh	r3, [r5, #12]
 800883e:	065b      	lsls	r3, r3, #25
 8008840:	f53f af2c 	bmi.w	800869c <_svfiprintf_r+0x28>
 8008844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008846:	b01d      	add	sp, #116	; 0x74
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	ab03      	add	r3, sp, #12
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	462a      	mov	r2, r5
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <_svfiprintf_r+0x1f8>)
 8008854:	a904      	add	r1, sp, #16
 8008856:	4638      	mov	r0, r7
 8008858:	f7fe fa10 	bl	8006c7c <_printf_i>
 800885c:	e7eb      	b.n	8008836 <_svfiprintf_r+0x1c2>
 800885e:	bf00      	nop
 8008860:	080097ac 	.word	0x080097ac
 8008864:	080097b6 	.word	0x080097b6
 8008868:	08006735 	.word	0x08006735
 800886c:	080085bd 	.word	0x080085bd
 8008870:	080097b2 	.word	0x080097b2

08008874 <_sbrk_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_sbrk_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f9 f91e 	bl	8001ac0 <_sbrk>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_sbrk_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_sbrk_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	2000041c 	.word	0x2000041c

08008894 <__assert_func>:
 8008894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008896:	4614      	mov	r4, r2
 8008898:	461a      	mov	r2, r3
 800889a:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <__assert_func+0x2c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4605      	mov	r5, r0
 80088a0:	68d8      	ldr	r0, [r3, #12]
 80088a2:	b14c      	cbz	r4, 80088b8 <__assert_func+0x24>
 80088a4:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <__assert_func+0x30>)
 80088a6:	9100      	str	r1, [sp, #0]
 80088a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088ac:	4906      	ldr	r1, [pc, #24]	; (80088c8 <__assert_func+0x34>)
 80088ae:	462b      	mov	r3, r5
 80088b0:	f000 f80e 	bl	80088d0 <fiprintf>
 80088b4:	f000 faa4 	bl	8008e00 <abort>
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <__assert_func+0x38>)
 80088ba:	461c      	mov	r4, r3
 80088bc:	e7f3      	b.n	80088a6 <__assert_func+0x12>
 80088be:	bf00      	nop
 80088c0:	20000024 	.word	0x20000024
 80088c4:	080097bd 	.word	0x080097bd
 80088c8:	080097ca 	.word	0x080097ca
 80088cc:	080097f8 	.word	0x080097f8

080088d0 <fiprintf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b503      	push	{r0, r1, lr}
 80088d4:	4601      	mov	r1, r0
 80088d6:	ab03      	add	r3, sp, #12
 80088d8:	4805      	ldr	r0, [pc, #20]	; (80088f0 <fiprintf+0x20>)
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	6800      	ldr	r0, [r0, #0]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	f000 f88f 	bl	8008a04 <_vfiprintf_r>
 80088e6:	b002      	add	sp, #8
 80088e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ec:	b003      	add	sp, #12
 80088ee:	4770      	bx	lr
 80088f0:	20000024 	.word	0x20000024

080088f4 <__ascii_mbtowc>:
 80088f4:	b082      	sub	sp, #8
 80088f6:	b901      	cbnz	r1, 80088fa <__ascii_mbtowc+0x6>
 80088f8:	a901      	add	r1, sp, #4
 80088fa:	b142      	cbz	r2, 800890e <__ascii_mbtowc+0x1a>
 80088fc:	b14b      	cbz	r3, 8008912 <__ascii_mbtowc+0x1e>
 80088fe:	7813      	ldrb	r3, [r2, #0]
 8008900:	600b      	str	r3, [r1, #0]
 8008902:	7812      	ldrb	r2, [r2, #0]
 8008904:	1e10      	subs	r0, r2, #0
 8008906:	bf18      	it	ne
 8008908:	2001      	movne	r0, #1
 800890a:	b002      	add	sp, #8
 800890c:	4770      	bx	lr
 800890e:	4610      	mov	r0, r2
 8008910:	e7fb      	b.n	800890a <__ascii_mbtowc+0x16>
 8008912:	f06f 0001 	mvn.w	r0, #1
 8008916:	e7f8      	b.n	800890a <__ascii_mbtowc+0x16>

08008918 <memmove>:
 8008918:	4288      	cmp	r0, r1
 800891a:	b510      	push	{r4, lr}
 800891c:	eb01 0402 	add.w	r4, r1, r2
 8008920:	d902      	bls.n	8008928 <memmove+0x10>
 8008922:	4284      	cmp	r4, r0
 8008924:	4623      	mov	r3, r4
 8008926:	d807      	bhi.n	8008938 <memmove+0x20>
 8008928:	1e43      	subs	r3, r0, #1
 800892a:	42a1      	cmp	r1, r4
 800892c:	d008      	beq.n	8008940 <memmove+0x28>
 800892e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008936:	e7f8      	b.n	800892a <memmove+0x12>
 8008938:	4402      	add	r2, r0
 800893a:	4601      	mov	r1, r0
 800893c:	428a      	cmp	r2, r1
 800893e:	d100      	bne.n	8008942 <memmove+0x2a>
 8008940:	bd10      	pop	{r4, pc}
 8008942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800894a:	e7f7      	b.n	800893c <memmove+0x24>

0800894c <__malloc_lock>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__malloc_lock+0x8>)
 800894e:	f000 bc17 	b.w	8009180 <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	20000424 	.word	0x20000424

08008958 <__malloc_unlock>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__malloc_unlock+0x8>)
 800895a:	f000 bc12 	b.w	8009182 <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	20000424 	.word	0x20000424

08008964 <_realloc_r>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	4607      	mov	r7, r0
 8008968:	4614      	mov	r4, r2
 800896a:	460e      	mov	r6, r1
 800896c:	b921      	cbnz	r1, 8008978 <_realloc_r+0x14>
 800896e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008972:	4611      	mov	r1, r2
 8008974:	f7ff bdc8 	b.w	8008508 <_malloc_r>
 8008978:	b922      	cbnz	r2, 8008984 <_realloc_r+0x20>
 800897a:	f7ff fd75 	bl	8008468 <_free_r>
 800897e:	4625      	mov	r5, r4
 8008980:	4628      	mov	r0, r5
 8008982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008984:	f000 fc62 	bl	800924c <_malloc_usable_size_r>
 8008988:	42a0      	cmp	r0, r4
 800898a:	d20f      	bcs.n	80089ac <_realloc_r+0x48>
 800898c:	4621      	mov	r1, r4
 800898e:	4638      	mov	r0, r7
 8008990:	f7ff fdba 	bl	8008508 <_malloc_r>
 8008994:	4605      	mov	r5, r0
 8008996:	2800      	cmp	r0, #0
 8008998:	d0f2      	beq.n	8008980 <_realloc_r+0x1c>
 800899a:	4631      	mov	r1, r6
 800899c:	4622      	mov	r2, r4
 800899e:	f7ff f9c7 	bl	8007d30 <memcpy>
 80089a2:	4631      	mov	r1, r6
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff fd5f 	bl	8008468 <_free_r>
 80089aa:	e7e9      	b.n	8008980 <_realloc_r+0x1c>
 80089ac:	4635      	mov	r5, r6
 80089ae:	e7e7      	b.n	8008980 <_realloc_r+0x1c>

080089b0 <__sfputc_r>:
 80089b0:	6893      	ldr	r3, [r2, #8]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	b410      	push	{r4}
 80089b8:	6093      	str	r3, [r2, #8]
 80089ba:	da08      	bge.n	80089ce <__sfputc_r+0x1e>
 80089bc:	6994      	ldr	r4, [r2, #24]
 80089be:	42a3      	cmp	r3, r4
 80089c0:	db01      	blt.n	80089c6 <__sfputc_r+0x16>
 80089c2:	290a      	cmp	r1, #10
 80089c4:	d103      	bne.n	80089ce <__sfputc_r+0x1e>
 80089c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ca:	f000 b94b 	b.w	8008c64 <__swbuf_r>
 80089ce:	6813      	ldr	r3, [r2, #0]
 80089d0:	1c58      	adds	r0, r3, #1
 80089d2:	6010      	str	r0, [r2, #0]
 80089d4:	7019      	strb	r1, [r3, #0]
 80089d6:	4608      	mov	r0, r1
 80089d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089dc:	4770      	bx	lr

080089de <__sfputs_r>:
 80089de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	18d5      	adds	r5, r2, r3
 80089e8:	42ac      	cmp	r4, r5
 80089ea:	d101      	bne.n	80089f0 <__sfputs_r+0x12>
 80089ec:	2000      	movs	r0, #0
 80089ee:	e007      	b.n	8008a00 <__sfputs_r+0x22>
 80089f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f4:	463a      	mov	r2, r7
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ffda 	bl	80089b0 <__sfputc_r>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d1f3      	bne.n	80089e8 <__sfputs_r+0xa>
 8008a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a04 <_vfiprintf_r>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	460d      	mov	r5, r1
 8008a0a:	b09d      	sub	sp, #116	; 0x74
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4698      	mov	r8, r3
 8008a10:	4606      	mov	r6, r0
 8008a12:	b118      	cbz	r0, 8008a1c <_vfiprintf_r+0x18>
 8008a14:	6983      	ldr	r3, [r0, #24]
 8008a16:	b90b      	cbnz	r3, 8008a1c <_vfiprintf_r+0x18>
 8008a18:	f000 fb14 	bl	8009044 <__sinit>
 8008a1c:	4b89      	ldr	r3, [pc, #548]	; (8008c44 <_vfiprintf_r+0x240>)
 8008a1e:	429d      	cmp	r5, r3
 8008a20:	d11b      	bne.n	8008a5a <_vfiprintf_r+0x56>
 8008a22:	6875      	ldr	r5, [r6, #4]
 8008a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a26:	07d9      	lsls	r1, r3, #31
 8008a28:	d405      	bmi.n	8008a36 <_vfiprintf_r+0x32>
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	059a      	lsls	r2, r3, #22
 8008a2e:	d402      	bmi.n	8008a36 <_vfiprintf_r+0x32>
 8008a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a32:	f000 fba5 	bl	8009180 <__retarget_lock_acquire_recursive>
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	071b      	lsls	r3, r3, #28
 8008a3a:	d501      	bpl.n	8008a40 <_vfiprintf_r+0x3c>
 8008a3c:	692b      	ldr	r3, [r5, #16]
 8008a3e:	b9eb      	cbnz	r3, 8008a7c <_vfiprintf_r+0x78>
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f000 f96e 	bl	8008d24 <__swsetup_r>
 8008a48:	b1c0      	cbz	r0, 8008a7c <_vfiprintf_r+0x78>
 8008a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a4c:	07dc      	lsls	r4, r3, #31
 8008a4e:	d50e      	bpl.n	8008a6e <_vfiprintf_r+0x6a>
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	b01d      	add	sp, #116	; 0x74
 8008a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5a:	4b7b      	ldr	r3, [pc, #492]	; (8008c48 <_vfiprintf_r+0x244>)
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	d101      	bne.n	8008a64 <_vfiprintf_r+0x60>
 8008a60:	68b5      	ldr	r5, [r6, #8]
 8008a62:	e7df      	b.n	8008a24 <_vfiprintf_r+0x20>
 8008a64:	4b79      	ldr	r3, [pc, #484]	; (8008c4c <_vfiprintf_r+0x248>)
 8008a66:	429d      	cmp	r5, r3
 8008a68:	bf08      	it	eq
 8008a6a:	68f5      	ldreq	r5, [r6, #12]
 8008a6c:	e7da      	b.n	8008a24 <_vfiprintf_r+0x20>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	0598      	lsls	r0, r3, #22
 8008a72:	d4ed      	bmi.n	8008a50 <_vfiprintf_r+0x4c>
 8008a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a76:	f000 fb84 	bl	8009182 <__retarget_lock_release_recursive>
 8008a7a:	e7e9      	b.n	8008a50 <_vfiprintf_r+0x4c>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a80:	2320      	movs	r3, #32
 8008a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a8a:	2330      	movs	r3, #48	; 0x30
 8008a8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c50 <_vfiprintf_r+0x24c>
 8008a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a94:	f04f 0901 	mov.w	r9, #1
 8008a98:	4623      	mov	r3, r4
 8008a9a:	469a      	mov	sl, r3
 8008a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa0:	b10a      	cbz	r2, 8008aa6 <_vfiprintf_r+0xa2>
 8008aa2:	2a25      	cmp	r2, #37	; 0x25
 8008aa4:	d1f9      	bne.n	8008a9a <_vfiprintf_r+0x96>
 8008aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8008aaa:	d00b      	beq.n	8008ac4 <_vfiprintf_r+0xc0>
 8008aac:	465b      	mov	r3, fp
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff ff93 	bl	80089de <__sfputs_r>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f000 80aa 	beq.w	8008c12 <_vfiprintf_r+0x20e>
 8008abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac0:	445a      	add	r2, fp
 8008ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 80a2 	beq.w	8008c12 <_vfiprintf_r+0x20e>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad8:	f10a 0a01 	add.w	sl, sl, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae6:	4654      	mov	r4, sl
 8008ae8:	2205      	movs	r2, #5
 8008aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aee:	4858      	ldr	r0, [pc, #352]	; (8008c50 <_vfiprintf_r+0x24c>)
 8008af0:	f7f7 fb7e 	bl	80001f0 <memchr>
 8008af4:	9a04      	ldr	r2, [sp, #16]
 8008af6:	b9d8      	cbnz	r0, 8008b30 <_vfiprintf_r+0x12c>
 8008af8:	06d1      	lsls	r1, r2, #27
 8008afa:	bf44      	itt	mi
 8008afc:	2320      	movmi	r3, #32
 8008afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b02:	0713      	lsls	r3, r2, #28
 8008b04:	bf44      	itt	mi
 8008b06:	232b      	movmi	r3, #43	; 0x2b
 8008b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b10:	2b2a      	cmp	r3, #42	; 0x2a
 8008b12:	d015      	beq.n	8008b40 <_vfiprintf_r+0x13c>
 8008b14:	9a07      	ldr	r2, [sp, #28]
 8008b16:	4654      	mov	r4, sl
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f04f 0c0a 	mov.w	ip, #10
 8008b1e:	4621      	mov	r1, r4
 8008b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b24:	3b30      	subs	r3, #48	; 0x30
 8008b26:	2b09      	cmp	r3, #9
 8008b28:	d94e      	bls.n	8008bc8 <_vfiprintf_r+0x1c4>
 8008b2a:	b1b0      	cbz	r0, 8008b5a <_vfiprintf_r+0x156>
 8008b2c:	9207      	str	r2, [sp, #28]
 8008b2e:	e014      	b.n	8008b5a <_vfiprintf_r+0x156>
 8008b30:	eba0 0308 	sub.w	r3, r0, r8
 8008b34:	fa09 f303 	lsl.w	r3, r9, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	46a2      	mov	sl, r4
 8008b3e:	e7d2      	b.n	8008ae6 <_vfiprintf_r+0xe2>
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	1d19      	adds	r1, r3, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	9103      	str	r1, [sp, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bfbb      	ittet	lt
 8008b4c:	425b      	neglt	r3, r3
 8008b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b52:	9307      	strge	r3, [sp, #28]
 8008b54:	9307      	strlt	r3, [sp, #28]
 8008b56:	bfb8      	it	lt
 8008b58:	9204      	strlt	r2, [sp, #16]
 8008b5a:	7823      	ldrb	r3, [r4, #0]
 8008b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5e:	d10c      	bne.n	8008b7a <_vfiprintf_r+0x176>
 8008b60:	7863      	ldrb	r3, [r4, #1]
 8008b62:	2b2a      	cmp	r3, #42	; 0x2a
 8008b64:	d135      	bne.n	8008bd2 <_vfiprintf_r+0x1ce>
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	1d1a      	adds	r2, r3, #4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	9203      	str	r2, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfb8      	it	lt
 8008b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b76:	3402      	adds	r4, #2
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c60 <_vfiprintf_r+0x25c>
 8008b7e:	7821      	ldrb	r1, [r4, #0]
 8008b80:	2203      	movs	r2, #3
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7f7 fb34 	bl	80001f0 <memchr>
 8008b88:	b140      	cbz	r0, 8008b9c <_vfiprintf_r+0x198>
 8008b8a:	2340      	movs	r3, #64	; 0x40
 8008b8c:	eba0 000a 	sub.w	r0, r0, sl
 8008b90:	fa03 f000 	lsl.w	r0, r3, r0
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	4303      	orrs	r3, r0
 8008b98:	3401      	adds	r4, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba0:	482c      	ldr	r0, [pc, #176]	; (8008c54 <_vfiprintf_r+0x250>)
 8008ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba6:	2206      	movs	r2, #6
 8008ba8:	f7f7 fb22 	bl	80001f0 <memchr>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d03f      	beq.n	8008c30 <_vfiprintf_r+0x22c>
 8008bb0:	4b29      	ldr	r3, [pc, #164]	; (8008c58 <_vfiprintf_r+0x254>)
 8008bb2:	bb1b      	cbnz	r3, 8008bfc <_vfiprintf_r+0x1f8>
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	3307      	adds	r3, #7
 8008bb8:	f023 0307 	bic.w	r3, r3, #7
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	443b      	add	r3, r7
 8008bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc6:	e767      	b.n	8008a98 <_vfiprintf_r+0x94>
 8008bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bcc:	460c      	mov	r4, r1
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e7a5      	b.n	8008b1e <_vfiprintf_r+0x11a>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	3401      	adds	r4, #1
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	f04f 0c0a 	mov.w	ip, #10
 8008bde:	4620      	mov	r0, r4
 8008be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be4:	3a30      	subs	r2, #48	; 0x30
 8008be6:	2a09      	cmp	r2, #9
 8008be8:	d903      	bls.n	8008bf2 <_vfiprintf_r+0x1ee>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0c5      	beq.n	8008b7a <_vfiprintf_r+0x176>
 8008bee:	9105      	str	r1, [sp, #20]
 8008bf0:	e7c3      	b.n	8008b7a <_vfiprintf_r+0x176>
 8008bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e7f0      	b.n	8008bde <_vfiprintf_r+0x1da>
 8008bfc:	ab03      	add	r3, sp, #12
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <_vfiprintf_r+0x258>)
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7fd fd94 	bl	8006734 <_printf_float>
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	1c78      	adds	r0, r7, #1
 8008c10:	d1d6      	bne.n	8008bc0 <_vfiprintf_r+0x1bc>
 8008c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c14:	07d9      	lsls	r1, r3, #31
 8008c16:	d405      	bmi.n	8008c24 <_vfiprintf_r+0x220>
 8008c18:	89ab      	ldrh	r3, [r5, #12]
 8008c1a:	059a      	lsls	r2, r3, #22
 8008c1c:	d402      	bmi.n	8008c24 <_vfiprintf_r+0x220>
 8008c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c20:	f000 faaf 	bl	8009182 <__retarget_lock_release_recursive>
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	065b      	lsls	r3, r3, #25
 8008c28:	f53f af12 	bmi.w	8008a50 <_vfiprintf_r+0x4c>
 8008c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c2e:	e711      	b.n	8008a54 <_vfiprintf_r+0x50>
 8008c30:	ab03      	add	r3, sp, #12
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	462a      	mov	r2, r5
 8008c36:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <_vfiprintf_r+0x258>)
 8008c38:	a904      	add	r1, sp, #16
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7fe f81e 	bl	8006c7c <_printf_i>
 8008c40:	e7e4      	b.n	8008c0c <_vfiprintf_r+0x208>
 8008c42:	bf00      	nop
 8008c44:	08009824 	.word	0x08009824
 8008c48:	08009844 	.word	0x08009844
 8008c4c:	08009804 	.word	0x08009804
 8008c50:	080097ac 	.word	0x080097ac
 8008c54:	080097b6 	.word	0x080097b6
 8008c58:	08006735 	.word	0x08006735
 8008c5c:	080089df 	.word	0x080089df
 8008c60:	080097b2 	.word	0x080097b2

08008c64 <__swbuf_r>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	460e      	mov	r6, r1
 8008c68:	4614      	mov	r4, r2
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	b118      	cbz	r0, 8008c76 <__swbuf_r+0x12>
 8008c6e:	6983      	ldr	r3, [r0, #24]
 8008c70:	b90b      	cbnz	r3, 8008c76 <__swbuf_r+0x12>
 8008c72:	f000 f9e7 	bl	8009044 <__sinit>
 8008c76:	4b21      	ldr	r3, [pc, #132]	; (8008cfc <__swbuf_r+0x98>)
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	d12b      	bne.n	8008cd4 <__swbuf_r+0x70>
 8008c7c:	686c      	ldr	r4, [r5, #4]
 8008c7e:	69a3      	ldr	r3, [r4, #24]
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	071a      	lsls	r2, r3, #28
 8008c86:	d52f      	bpl.n	8008ce8 <__swbuf_r+0x84>
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	b36b      	cbz	r3, 8008ce8 <__swbuf_r+0x84>
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	6820      	ldr	r0, [r4, #0]
 8008c90:	1ac0      	subs	r0, r0, r3
 8008c92:	6963      	ldr	r3, [r4, #20]
 8008c94:	b2f6      	uxtb	r6, r6
 8008c96:	4283      	cmp	r3, r0
 8008c98:	4637      	mov	r7, r6
 8008c9a:	dc04      	bgt.n	8008ca6 <__swbuf_r+0x42>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f93c 	bl	8008f1c <_fflush_r>
 8008ca4:	bb30      	cbnz	r0, 8008cf4 <__swbuf_r+0x90>
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	60a3      	str	r3, [r4, #8]
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	701e      	strb	r6, [r3, #0]
 8008cb4:	6963      	ldr	r3, [r4, #20]
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	4283      	cmp	r3, r0
 8008cba:	d004      	beq.n	8008cc6 <__swbuf_r+0x62>
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	07db      	lsls	r3, r3, #31
 8008cc0:	d506      	bpl.n	8008cd0 <__swbuf_r+0x6c>
 8008cc2:	2e0a      	cmp	r6, #10
 8008cc4:	d104      	bne.n	8008cd0 <__swbuf_r+0x6c>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 f927 	bl	8008f1c <_fflush_r>
 8008cce:	b988      	cbnz	r0, 8008cf4 <__swbuf_r+0x90>
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <__swbuf_r+0x9c>)
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d101      	bne.n	8008cde <__swbuf_r+0x7a>
 8008cda:	68ac      	ldr	r4, [r5, #8]
 8008cdc:	e7cf      	b.n	8008c7e <__swbuf_r+0x1a>
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <__swbuf_r+0xa0>)
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	bf08      	it	eq
 8008ce4:	68ec      	ldreq	r4, [r5, #12]
 8008ce6:	e7ca      	b.n	8008c7e <__swbuf_r+0x1a>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 f81a 	bl	8008d24 <__swsetup_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d0cb      	beq.n	8008c8c <__swbuf_r+0x28>
 8008cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8008cf8:	e7ea      	b.n	8008cd0 <__swbuf_r+0x6c>
 8008cfa:	bf00      	nop
 8008cfc:	08009824 	.word	0x08009824
 8008d00:	08009844 	.word	0x08009844
 8008d04:	08009804 	.word	0x08009804

08008d08 <__ascii_wctomb>:
 8008d08:	b149      	cbz	r1, 8008d1e <__ascii_wctomb+0x16>
 8008d0a:	2aff      	cmp	r2, #255	; 0xff
 8008d0c:	bf85      	ittet	hi
 8008d0e:	238a      	movhi	r3, #138	; 0x8a
 8008d10:	6003      	strhi	r3, [r0, #0]
 8008d12:	700a      	strbls	r2, [r1, #0]
 8008d14:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d18:	bf98      	it	ls
 8008d1a:	2001      	movls	r0, #1
 8008d1c:	4770      	bx	lr
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4770      	bx	lr
	...

08008d24 <__swsetup_r>:
 8008d24:	4b32      	ldr	r3, [pc, #200]	; (8008df0 <__swsetup_r+0xcc>)
 8008d26:	b570      	push	{r4, r5, r6, lr}
 8008d28:	681d      	ldr	r5, [r3, #0]
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	b125      	cbz	r5, 8008d3a <__swsetup_r+0x16>
 8008d30:	69ab      	ldr	r3, [r5, #24]
 8008d32:	b913      	cbnz	r3, 8008d3a <__swsetup_r+0x16>
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 f985 	bl	8009044 <__sinit>
 8008d3a:	4b2e      	ldr	r3, [pc, #184]	; (8008df4 <__swsetup_r+0xd0>)
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d10f      	bne.n	8008d60 <__swsetup_r+0x3c>
 8008d40:	686c      	ldr	r4, [r5, #4]
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d48:	0719      	lsls	r1, r3, #28
 8008d4a:	d42c      	bmi.n	8008da6 <__swsetup_r+0x82>
 8008d4c:	06dd      	lsls	r5, r3, #27
 8008d4e:	d411      	bmi.n	8008d74 <__swsetup_r+0x50>
 8008d50:	2309      	movs	r3, #9
 8008d52:	6033      	str	r3, [r6, #0]
 8008d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5e:	e03e      	b.n	8008dde <__swsetup_r+0xba>
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <__swsetup_r+0xd4>)
 8008d62:	429c      	cmp	r4, r3
 8008d64:	d101      	bne.n	8008d6a <__swsetup_r+0x46>
 8008d66:	68ac      	ldr	r4, [r5, #8]
 8008d68:	e7eb      	b.n	8008d42 <__swsetup_r+0x1e>
 8008d6a:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <__swsetup_r+0xd8>)
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	bf08      	it	eq
 8008d70:	68ec      	ldreq	r4, [r5, #12]
 8008d72:	e7e6      	b.n	8008d42 <__swsetup_r+0x1e>
 8008d74:	0758      	lsls	r0, r3, #29
 8008d76:	d512      	bpl.n	8008d9e <__swsetup_r+0x7a>
 8008d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7a:	b141      	cbz	r1, 8008d8e <__swsetup_r+0x6a>
 8008d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d80:	4299      	cmp	r1, r3
 8008d82:	d002      	beq.n	8008d8a <__swsetup_r+0x66>
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff fb6f 	bl	8008468 <_free_r>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	2300      	movs	r3, #0
 8008d98:	6063      	str	r3, [r4, #4]
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	f043 0308 	orr.w	r3, r3, #8
 8008da4:	81a3      	strh	r3, [r4, #12]
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	b94b      	cbnz	r3, 8008dbe <__swsetup_r+0x9a>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008db4:	d003      	beq.n	8008dbe <__swsetup_r+0x9a>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 fa07 	bl	80091cc <__smakebuf_r>
 8008dbe:	89a0      	ldrh	r0, [r4, #12]
 8008dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc4:	f010 0301 	ands.w	r3, r0, #1
 8008dc8:	d00a      	beq.n	8008de0 <__swsetup_r+0xbc>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	6963      	ldr	r3, [r4, #20]
 8008dd0:	425b      	negs	r3, r3
 8008dd2:	61a3      	str	r3, [r4, #24]
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	b943      	cbnz	r3, 8008dea <__swsetup_r+0xc6>
 8008dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ddc:	d1ba      	bne.n	8008d54 <__swsetup_r+0x30>
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	0781      	lsls	r1, r0, #30
 8008de2:	bf58      	it	pl
 8008de4:	6963      	ldrpl	r3, [r4, #20]
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	e7f4      	b.n	8008dd4 <__swsetup_r+0xb0>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e7f7      	b.n	8008dde <__swsetup_r+0xba>
 8008dee:	bf00      	nop
 8008df0:	20000024 	.word	0x20000024
 8008df4:	08009824 	.word	0x08009824
 8008df8:	08009844 	.word	0x08009844
 8008dfc:	08009804 	.word	0x08009804

08008e00 <abort>:
 8008e00:	b508      	push	{r3, lr}
 8008e02:	2006      	movs	r0, #6
 8008e04:	f000 fa52 	bl	80092ac <raise>
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7f8 fde1 	bl	80019d0 <_exit>
	...

08008e10 <__sflush_r>:
 8008e10:	898a      	ldrh	r2, [r1, #12]
 8008e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	4605      	mov	r5, r0
 8008e18:	0710      	lsls	r0, r2, #28
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	d458      	bmi.n	8008ed0 <__sflush_r+0xc0>
 8008e1e:	684b      	ldr	r3, [r1, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dc05      	bgt.n	8008e30 <__sflush_r+0x20>
 8008e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	dc02      	bgt.n	8008e30 <__sflush_r+0x20>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	d0f9      	beq.n	8008e2a <__sflush_r+0x1a>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e3c:	682f      	ldr	r7, [r5, #0]
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	d032      	beq.n	8008ea8 <__sflush_r+0x98>
 8008e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	075a      	lsls	r2, r3, #29
 8008e48:	d505      	bpl.n	8008e56 <__sflush_r+0x46>
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	1ac0      	subs	r0, r0, r3
 8008e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e50:	b10b      	cbz	r3, 8008e56 <__sflush_r+0x46>
 8008e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e54:	1ac0      	subs	r0, r0, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b0      	blx	r6
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	d106      	bne.n	8008e76 <__sflush_r+0x66>
 8008e68:	6829      	ldr	r1, [r5, #0]
 8008e6a:	291d      	cmp	r1, #29
 8008e6c:	d82c      	bhi.n	8008ec8 <__sflush_r+0xb8>
 8008e6e:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <__sflush_r+0x108>)
 8008e70:	40ca      	lsrs	r2, r1
 8008e72:	07d6      	lsls	r6, r2, #31
 8008e74:	d528      	bpl.n	8008ec8 <__sflush_r+0xb8>
 8008e76:	2200      	movs	r2, #0
 8008e78:	6062      	str	r2, [r4, #4]
 8008e7a:	04d9      	lsls	r1, r3, #19
 8008e7c:	6922      	ldr	r2, [r4, #16]
 8008e7e:	6022      	str	r2, [r4, #0]
 8008e80:	d504      	bpl.n	8008e8c <__sflush_r+0x7c>
 8008e82:	1c42      	adds	r2, r0, #1
 8008e84:	d101      	bne.n	8008e8a <__sflush_r+0x7a>
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	b903      	cbnz	r3, 8008e8c <__sflush_r+0x7c>
 8008e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8e:	602f      	str	r7, [r5, #0]
 8008e90:	2900      	cmp	r1, #0
 8008e92:	d0ca      	beq.n	8008e2a <__sflush_r+0x1a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__sflush_r+0x92>
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7ff fae3 	bl	8008468 <_free_r>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ea6:	e7c1      	b.n	8008e2c <__sflush_r+0x1c>
 8008ea8:	6a21      	ldr	r1, [r4, #32]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	1c41      	adds	r1, r0, #1
 8008eb2:	d1c7      	bne.n	8008e44 <__sflush_r+0x34>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0c4      	beq.n	8008e44 <__sflush_r+0x34>
 8008eba:	2b1d      	cmp	r3, #29
 8008ebc:	d001      	beq.n	8008ec2 <__sflush_r+0xb2>
 8008ebe:	2b16      	cmp	r3, #22
 8008ec0:	d101      	bne.n	8008ec6 <__sflush_r+0xb6>
 8008ec2:	602f      	str	r7, [r5, #0]
 8008ec4:	e7b1      	b.n	8008e2a <__sflush_r+0x1a>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	e7ad      	b.n	8008e2c <__sflush_r+0x1c>
 8008ed0:	690f      	ldr	r7, [r1, #16]
 8008ed2:	2f00      	cmp	r7, #0
 8008ed4:	d0a9      	beq.n	8008e2a <__sflush_r+0x1a>
 8008ed6:	0793      	lsls	r3, r2, #30
 8008ed8:	680e      	ldr	r6, [r1, #0]
 8008eda:	bf08      	it	eq
 8008edc:	694b      	ldreq	r3, [r1, #20]
 8008ede:	600f      	str	r7, [r1, #0]
 8008ee0:	bf18      	it	ne
 8008ee2:	2300      	movne	r3, #0
 8008ee4:	eba6 0807 	sub.w	r8, r6, r7
 8008ee8:	608b      	str	r3, [r1, #8]
 8008eea:	f1b8 0f00 	cmp.w	r8, #0
 8008eee:	dd9c      	ble.n	8008e2a <__sflush_r+0x1a>
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	463a      	mov	r2, r7
 8008ef8:	4628      	mov	r0, r5
 8008efa:	47b0      	blx	r6
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dc06      	bgt.n	8008f0e <__sflush_r+0xfe>
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	e78e      	b.n	8008e2c <__sflush_r+0x1c>
 8008f0e:	4407      	add	r7, r0
 8008f10:	eba8 0800 	sub.w	r8, r8, r0
 8008f14:	e7e9      	b.n	8008eea <__sflush_r+0xda>
 8008f16:	bf00      	nop
 8008f18:	20400001 	.word	0x20400001

08008f1c <_fflush_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	690b      	ldr	r3, [r1, #16]
 8008f20:	4605      	mov	r5, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	b913      	cbnz	r3, 8008f2c <_fflush_r+0x10>
 8008f26:	2500      	movs	r5, #0
 8008f28:	4628      	mov	r0, r5
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	b118      	cbz	r0, 8008f36 <_fflush_r+0x1a>
 8008f2e:	6983      	ldr	r3, [r0, #24]
 8008f30:	b90b      	cbnz	r3, 8008f36 <_fflush_r+0x1a>
 8008f32:	f000 f887 	bl	8009044 <__sinit>
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <_fflush_r+0x6c>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	d11b      	bne.n	8008f74 <_fflush_r+0x58>
 8008f3c:	686c      	ldr	r4, [r5, #4]
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0ef      	beq.n	8008f26 <_fflush_r+0xa>
 8008f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f48:	07d0      	lsls	r0, r2, #31
 8008f4a:	d404      	bmi.n	8008f56 <_fflush_r+0x3a>
 8008f4c:	0599      	lsls	r1, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_fflush_r+0x3a>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f000 f915 	bl	8009180 <__retarget_lock_acquire_recursive>
 8008f56:	4628      	mov	r0, r5
 8008f58:	4621      	mov	r1, r4
 8008f5a:	f7ff ff59 	bl	8008e10 <__sflush_r>
 8008f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f60:	07da      	lsls	r2, r3, #31
 8008f62:	4605      	mov	r5, r0
 8008f64:	d4e0      	bmi.n	8008f28 <_fflush_r+0xc>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	059b      	lsls	r3, r3, #22
 8008f6a:	d4dd      	bmi.n	8008f28 <_fflush_r+0xc>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f6e:	f000 f908 	bl	8009182 <__retarget_lock_release_recursive>
 8008f72:	e7d9      	b.n	8008f28 <_fflush_r+0xc>
 8008f74:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <_fflush_r+0x70>)
 8008f76:	429c      	cmp	r4, r3
 8008f78:	d101      	bne.n	8008f7e <_fflush_r+0x62>
 8008f7a:	68ac      	ldr	r4, [r5, #8]
 8008f7c:	e7df      	b.n	8008f3e <_fflush_r+0x22>
 8008f7e:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <_fflush_r+0x74>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	bf08      	it	eq
 8008f84:	68ec      	ldreq	r4, [r5, #12]
 8008f86:	e7da      	b.n	8008f3e <_fflush_r+0x22>
 8008f88:	08009824 	.word	0x08009824
 8008f8c:	08009844 	.word	0x08009844
 8008f90:	08009804 	.word	0x08009804

08008f94 <std>:
 8008f94:	2300      	movs	r3, #0
 8008f96:	b510      	push	{r4, lr}
 8008f98:	4604      	mov	r4, r0
 8008f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fa2:	6083      	str	r3, [r0, #8]
 8008fa4:	8181      	strh	r1, [r0, #12]
 8008fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fa8:	81c2      	strh	r2, [r0, #14]
 8008faa:	6183      	str	r3, [r0, #24]
 8008fac:	4619      	mov	r1, r3
 8008fae:	2208      	movs	r2, #8
 8008fb0:	305c      	adds	r0, #92	; 0x5c
 8008fb2:	f7fd fb17 	bl	80065e4 <memset>
 8008fb6:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <std+0x38>)
 8008fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <std+0x3c>)
 8008fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fbe:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <std+0x40>)
 8008fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fc2:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <std+0x44>)
 8008fc4:	6224      	str	r4, [r4, #32]
 8008fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	bf00      	nop
 8008fcc:	080092e5 	.word	0x080092e5
 8008fd0:	08009307 	.word	0x08009307
 8008fd4:	0800933f 	.word	0x0800933f
 8008fd8:	08009363 	.word	0x08009363

08008fdc <_cleanup_r>:
 8008fdc:	4901      	ldr	r1, [pc, #4]	; (8008fe4 <_cleanup_r+0x8>)
 8008fde:	f000 b8af 	b.w	8009140 <_fwalk_reent>
 8008fe2:	bf00      	nop
 8008fe4:	08008f1d 	.word	0x08008f1d

08008fe8 <__sfmoreglue>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	1e4a      	subs	r2, r1, #1
 8008fec:	2568      	movs	r5, #104	; 0x68
 8008fee:	4355      	muls	r5, r2
 8008ff0:	460e      	mov	r6, r1
 8008ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ff6:	f7ff fa87 	bl	8008508 <_malloc_r>
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	b140      	cbz	r0, 8009010 <__sfmoreglue+0x28>
 8008ffe:	2100      	movs	r1, #0
 8009000:	e9c0 1600 	strd	r1, r6, [r0]
 8009004:	300c      	adds	r0, #12
 8009006:	60a0      	str	r0, [r4, #8]
 8009008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800900c:	f7fd faea 	bl	80065e4 <memset>
 8009010:	4620      	mov	r0, r4
 8009012:	bd70      	pop	{r4, r5, r6, pc}

08009014 <__sfp_lock_acquire>:
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <__sfp_lock_acquire+0x8>)
 8009016:	f000 b8b3 	b.w	8009180 <__retarget_lock_acquire_recursive>
 800901a:	bf00      	nop
 800901c:	20000428 	.word	0x20000428

08009020 <__sfp_lock_release>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__sfp_lock_release+0x8>)
 8009022:	f000 b8ae 	b.w	8009182 <__retarget_lock_release_recursive>
 8009026:	bf00      	nop
 8009028:	20000428 	.word	0x20000428

0800902c <__sinit_lock_acquire>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__sinit_lock_acquire+0x8>)
 800902e:	f000 b8a7 	b.w	8009180 <__retarget_lock_acquire_recursive>
 8009032:	bf00      	nop
 8009034:	20000423 	.word	0x20000423

08009038 <__sinit_lock_release>:
 8009038:	4801      	ldr	r0, [pc, #4]	; (8009040 <__sinit_lock_release+0x8>)
 800903a:	f000 b8a2 	b.w	8009182 <__retarget_lock_release_recursive>
 800903e:	bf00      	nop
 8009040:	20000423 	.word	0x20000423

08009044 <__sinit>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	f7ff fff0 	bl	800902c <__sinit_lock_acquire>
 800904c:	69a3      	ldr	r3, [r4, #24]
 800904e:	b11b      	cbz	r3, 8009058 <__sinit+0x14>
 8009050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009054:	f7ff bff0 	b.w	8009038 <__sinit_lock_release>
 8009058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800905c:	6523      	str	r3, [r4, #80]	; 0x50
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <__sinit+0x68>)
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <__sinit+0x6c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	62a2      	str	r2, [r4, #40]	; 0x28
 8009066:	42a3      	cmp	r3, r4
 8009068:	bf04      	itt	eq
 800906a:	2301      	moveq	r3, #1
 800906c:	61a3      	streq	r3, [r4, #24]
 800906e:	4620      	mov	r0, r4
 8009070:	f000 f820 	bl	80090b4 <__sfp>
 8009074:	6060      	str	r0, [r4, #4]
 8009076:	4620      	mov	r0, r4
 8009078:	f000 f81c 	bl	80090b4 <__sfp>
 800907c:	60a0      	str	r0, [r4, #8]
 800907e:	4620      	mov	r0, r4
 8009080:	f000 f818 	bl	80090b4 <__sfp>
 8009084:	2200      	movs	r2, #0
 8009086:	60e0      	str	r0, [r4, #12]
 8009088:	2104      	movs	r1, #4
 800908a:	6860      	ldr	r0, [r4, #4]
 800908c:	f7ff ff82 	bl	8008f94 <std>
 8009090:	68a0      	ldr	r0, [r4, #8]
 8009092:	2201      	movs	r2, #1
 8009094:	2109      	movs	r1, #9
 8009096:	f7ff ff7d 	bl	8008f94 <std>
 800909a:	68e0      	ldr	r0, [r4, #12]
 800909c:	2202      	movs	r2, #2
 800909e:	2112      	movs	r1, #18
 80090a0:	f7ff ff78 	bl	8008f94 <std>
 80090a4:	2301      	movs	r3, #1
 80090a6:	61a3      	str	r3, [r4, #24]
 80090a8:	e7d2      	b.n	8009050 <__sinit+0xc>
 80090aa:	bf00      	nop
 80090ac:	0800947c 	.word	0x0800947c
 80090b0:	08008fdd 	.word	0x08008fdd

080090b4 <__sfp>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	4607      	mov	r7, r0
 80090b8:	f7ff ffac 	bl	8009014 <__sfp_lock_acquire>
 80090bc:	4b1e      	ldr	r3, [pc, #120]	; (8009138 <__sfp+0x84>)
 80090be:	681e      	ldr	r6, [r3, #0]
 80090c0:	69b3      	ldr	r3, [r6, #24]
 80090c2:	b913      	cbnz	r3, 80090ca <__sfp+0x16>
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7ff ffbd 	bl	8009044 <__sinit>
 80090ca:	3648      	adds	r6, #72	; 0x48
 80090cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	d503      	bpl.n	80090dc <__sfp+0x28>
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	b30b      	cbz	r3, 800911c <__sfp+0x68>
 80090d8:	6836      	ldr	r6, [r6, #0]
 80090da:	e7f7      	b.n	80090cc <__sfp+0x18>
 80090dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090e0:	b9d5      	cbnz	r5, 8009118 <__sfp+0x64>
 80090e2:	4b16      	ldr	r3, [pc, #88]	; (800913c <__sfp+0x88>)
 80090e4:	60e3      	str	r3, [r4, #12]
 80090e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090ea:	6665      	str	r5, [r4, #100]	; 0x64
 80090ec:	f000 f847 	bl	800917e <__retarget_lock_init_recursive>
 80090f0:	f7ff ff96 	bl	8009020 <__sfp_lock_release>
 80090f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090fc:	6025      	str	r5, [r4, #0]
 80090fe:	61a5      	str	r5, [r4, #24]
 8009100:	2208      	movs	r2, #8
 8009102:	4629      	mov	r1, r5
 8009104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009108:	f7fd fa6c 	bl	80065e4 <memset>
 800910c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009114:	4620      	mov	r0, r4
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009118:	3468      	adds	r4, #104	; 0x68
 800911a:	e7d9      	b.n	80090d0 <__sfp+0x1c>
 800911c:	2104      	movs	r1, #4
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff ff62 	bl	8008fe8 <__sfmoreglue>
 8009124:	4604      	mov	r4, r0
 8009126:	6030      	str	r0, [r6, #0]
 8009128:	2800      	cmp	r0, #0
 800912a:	d1d5      	bne.n	80090d8 <__sfp+0x24>
 800912c:	f7ff ff78 	bl	8009020 <__sfp_lock_release>
 8009130:	230c      	movs	r3, #12
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	e7ee      	b.n	8009114 <__sfp+0x60>
 8009136:	bf00      	nop
 8009138:	0800947c 	.word	0x0800947c
 800913c:	ffff0001 	.word	0xffff0001

08009140 <_fwalk_reent>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	4606      	mov	r6, r0
 8009146:	4688      	mov	r8, r1
 8009148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800914c:	2700      	movs	r7, #0
 800914e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009152:	f1b9 0901 	subs.w	r9, r9, #1
 8009156:	d505      	bpl.n	8009164 <_fwalk_reent+0x24>
 8009158:	6824      	ldr	r4, [r4, #0]
 800915a:	2c00      	cmp	r4, #0
 800915c:	d1f7      	bne.n	800914e <_fwalk_reent+0xe>
 800915e:	4638      	mov	r0, r7
 8009160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009164:	89ab      	ldrh	r3, [r5, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d907      	bls.n	800917a <_fwalk_reent+0x3a>
 800916a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800916e:	3301      	adds	r3, #1
 8009170:	d003      	beq.n	800917a <_fwalk_reent+0x3a>
 8009172:	4629      	mov	r1, r5
 8009174:	4630      	mov	r0, r6
 8009176:	47c0      	blx	r8
 8009178:	4307      	orrs	r7, r0
 800917a:	3568      	adds	r5, #104	; 0x68
 800917c:	e7e9      	b.n	8009152 <_fwalk_reent+0x12>

0800917e <__retarget_lock_init_recursive>:
 800917e:	4770      	bx	lr

08009180 <__retarget_lock_acquire_recursive>:
 8009180:	4770      	bx	lr

08009182 <__retarget_lock_release_recursive>:
 8009182:	4770      	bx	lr

08009184 <__swhatbuf_r>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	460e      	mov	r6, r1
 8009188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918c:	2900      	cmp	r1, #0
 800918e:	b096      	sub	sp, #88	; 0x58
 8009190:	4614      	mov	r4, r2
 8009192:	461d      	mov	r5, r3
 8009194:	da07      	bge.n	80091a6 <__swhatbuf_r+0x22>
 8009196:	2300      	movs	r3, #0
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	89b3      	ldrh	r3, [r6, #12]
 800919c:	061a      	lsls	r2, r3, #24
 800919e:	d410      	bmi.n	80091c2 <__swhatbuf_r+0x3e>
 80091a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a4:	e00e      	b.n	80091c4 <__swhatbuf_r+0x40>
 80091a6:	466a      	mov	r2, sp
 80091a8:	f000 f902 	bl	80093b0 <_fstat_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	dbf2      	blt.n	8009196 <__swhatbuf_r+0x12>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091ba:	425a      	negs	r2, r3
 80091bc:	415a      	adcs	r2, r3
 80091be:	602a      	str	r2, [r5, #0]
 80091c0:	e7ee      	b.n	80091a0 <__swhatbuf_r+0x1c>
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	2000      	movs	r0, #0
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	b016      	add	sp, #88	; 0x58
 80091ca:	bd70      	pop	{r4, r5, r6, pc}

080091cc <__smakebuf_r>:
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d0:	079d      	lsls	r5, r3, #30
 80091d2:	4606      	mov	r6, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	d507      	bpl.n	80091e8 <__smakebuf_r+0x1c>
 80091d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	2301      	movs	r3, #1
 80091e2:	6163      	str	r3, [r4, #20]
 80091e4:	b002      	add	sp, #8
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	ab01      	add	r3, sp, #4
 80091ea:	466a      	mov	r2, sp
 80091ec:	f7ff ffca 	bl	8009184 <__swhatbuf_r>
 80091f0:	9900      	ldr	r1, [sp, #0]
 80091f2:	4605      	mov	r5, r0
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff f987 	bl	8008508 <_malloc_r>
 80091fa:	b948      	cbnz	r0, 8009210 <__smakebuf_r+0x44>
 80091fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009200:	059a      	lsls	r2, r3, #22
 8009202:	d4ef      	bmi.n	80091e4 <__smakebuf_r+0x18>
 8009204:	f023 0303 	bic.w	r3, r3, #3
 8009208:	f043 0302 	orr.w	r3, r3, #2
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	e7e3      	b.n	80091d8 <__smakebuf_r+0xc>
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <__smakebuf_r+0x7c>)
 8009212:	62b3      	str	r3, [r6, #40]	; 0x28
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	6020      	str	r0, [r4, #0]
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	9b00      	ldr	r3, [sp, #0]
 8009220:	6163      	str	r3, [r4, #20]
 8009222:	9b01      	ldr	r3, [sp, #4]
 8009224:	6120      	str	r0, [r4, #16]
 8009226:	b15b      	cbz	r3, 8009240 <__smakebuf_r+0x74>
 8009228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800922c:	4630      	mov	r0, r6
 800922e:	f000 f8d1 	bl	80093d4 <_isatty_r>
 8009232:	b128      	cbz	r0, 8009240 <__smakebuf_r+0x74>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f023 0303 	bic.w	r3, r3, #3
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	89a0      	ldrh	r0, [r4, #12]
 8009242:	4305      	orrs	r5, r0
 8009244:	81a5      	strh	r5, [r4, #12]
 8009246:	e7cd      	b.n	80091e4 <__smakebuf_r+0x18>
 8009248:	08008fdd 	.word	0x08008fdd

0800924c <_malloc_usable_size_r>:
 800924c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009250:	1f18      	subs	r0, r3, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfbc      	itt	lt
 8009256:	580b      	ldrlt	r3, [r1, r0]
 8009258:	18c0      	addlt	r0, r0, r3
 800925a:	4770      	bx	lr

0800925c <_raise_r>:
 800925c:	291f      	cmp	r1, #31
 800925e:	b538      	push	{r3, r4, r5, lr}
 8009260:	4604      	mov	r4, r0
 8009262:	460d      	mov	r5, r1
 8009264:	d904      	bls.n	8009270 <_raise_r+0x14>
 8009266:	2316      	movs	r3, #22
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009272:	b112      	cbz	r2, 800927a <_raise_r+0x1e>
 8009274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009278:	b94b      	cbnz	r3, 800928e <_raise_r+0x32>
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f830 	bl	80092e0 <_getpid_r>
 8009280:	462a      	mov	r2, r5
 8009282:	4601      	mov	r1, r0
 8009284:	4620      	mov	r0, r4
 8009286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800928a:	f000 b817 	b.w	80092bc <_kill_r>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d00a      	beq.n	80092a8 <_raise_r+0x4c>
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	d103      	bne.n	800929e <_raise_r+0x42>
 8009296:	2316      	movs	r3, #22
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	2001      	movs	r0, #1
 800929c:	e7e7      	b.n	800926e <_raise_r+0x12>
 800929e:	2400      	movs	r4, #0
 80092a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092a4:	4628      	mov	r0, r5
 80092a6:	4798      	blx	r3
 80092a8:	2000      	movs	r0, #0
 80092aa:	e7e0      	b.n	800926e <_raise_r+0x12>

080092ac <raise>:
 80092ac:	4b02      	ldr	r3, [pc, #8]	; (80092b8 <raise+0xc>)
 80092ae:	4601      	mov	r1, r0
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f7ff bfd3 	b.w	800925c <_raise_r>
 80092b6:	bf00      	nop
 80092b8:	20000024 	.word	0x20000024

080092bc <_kill_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d07      	ldr	r5, [pc, #28]	; (80092dc <_kill_r+0x20>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	4611      	mov	r1, r2
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	f7f8 fb71 	bl	80019b0 <_kill>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d102      	bne.n	80092d8 <_kill_r+0x1c>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	b103      	cbz	r3, 80092d8 <_kill_r+0x1c>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
 80092da:	bf00      	nop
 80092dc:	2000041c 	.word	0x2000041c

080092e0 <_getpid_r>:
 80092e0:	f7f8 bb5e 	b.w	80019a0 <_getpid>

080092e4 <__sread>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ec:	f000 f894 	bl	8009418 <_read_r>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	bfab      	itete	ge
 80092f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092f6:	89a3      	ldrhlt	r3, [r4, #12]
 80092f8:	181b      	addge	r3, r3, r0
 80092fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092fe:	bfac      	ite	ge
 8009300:	6563      	strge	r3, [r4, #84]	; 0x54
 8009302:	81a3      	strhlt	r3, [r4, #12]
 8009304:	bd10      	pop	{r4, pc}

08009306 <__swrite>:
 8009306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	461f      	mov	r7, r3
 800930c:	898b      	ldrh	r3, [r1, #12]
 800930e:	05db      	lsls	r3, r3, #23
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	4616      	mov	r6, r2
 8009316:	d505      	bpl.n	8009324 <__swrite+0x1e>
 8009318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931c:	2302      	movs	r3, #2
 800931e:	2200      	movs	r2, #0
 8009320:	f000 f868 	bl	80093f4 <_lseek_r>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	4632      	mov	r2, r6
 8009332:	463b      	mov	r3, r7
 8009334:	4628      	mov	r0, r5
 8009336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	f000 b817 	b.w	800936c <_write_r>

0800933e <__sseek>:
 800933e:	b510      	push	{r4, lr}
 8009340:	460c      	mov	r4, r1
 8009342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009346:	f000 f855 	bl	80093f4 <_lseek_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	bf15      	itete	ne
 8009350:	6560      	strne	r0, [r4, #84]	; 0x54
 8009352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800935a:	81a3      	strheq	r3, [r4, #12]
 800935c:	bf18      	it	ne
 800935e:	81a3      	strhne	r3, [r4, #12]
 8009360:	bd10      	pop	{r4, pc}

08009362 <__sclose>:
 8009362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009366:	f000 b813 	b.w	8009390 <_close_r>
	...

0800936c <_write_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d07      	ldr	r5, [pc, #28]	; (800938c <_write_r+0x20>)
 8009370:	4604      	mov	r4, r0
 8009372:	4608      	mov	r0, r1
 8009374:	4611      	mov	r1, r2
 8009376:	2200      	movs	r2, #0
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	f7f8 fb4f 	bl	8001a1e <_write>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_write_r+0x1e>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_write_r+0x1e>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	2000041c 	.word	0x2000041c

08009390 <_close_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d06      	ldr	r5, [pc, #24]	; (80093ac <_close_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f8 fb5b 	bl	8001a56 <_close>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_close_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_close_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	2000041c 	.word	0x2000041c

080093b0 <_fstat_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	; (80093d0 <_fstat_r+0x20>)
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	4611      	mov	r1, r2
 80093bc:	602b      	str	r3, [r5, #0]
 80093be:	f7f8 fb56 	bl	8001a6e <_fstat>
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	d102      	bne.n	80093cc <_fstat_r+0x1c>
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	b103      	cbz	r3, 80093cc <_fstat_r+0x1c>
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	bd38      	pop	{r3, r4, r5, pc}
 80093ce:	bf00      	nop
 80093d0:	2000041c 	.word	0x2000041c

080093d4 <_isatty_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	; (80093f0 <_isatty_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 fb55 	bl	8001a8e <_isatty>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_isatty_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_isatty_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	2000041c 	.word	0x2000041c

080093f4 <_lseek_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d07      	ldr	r5, [pc, #28]	; (8009414 <_lseek_r+0x20>)
 80093f8:	4604      	mov	r4, r0
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	602a      	str	r2, [r5, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f7f8 fb4e 	bl	8001aa4 <_lseek>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_lseek_r+0x1e>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_lseek_r+0x1e>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	2000041c 	.word	0x2000041c

08009418 <_read_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4d07      	ldr	r5, [pc, #28]	; (8009438 <_read_r+0x20>)
 800941c:	4604      	mov	r4, r0
 800941e:	4608      	mov	r0, r1
 8009420:	4611      	mov	r1, r2
 8009422:	2200      	movs	r2, #0
 8009424:	602a      	str	r2, [r5, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	f7f8 fadc 	bl	80019e4 <_read>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_read_r+0x1e>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_read_r+0x1e>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	2000041c 	.word	0x2000041c

0800943c <_init>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr

08009448 <_fini>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	bf00      	nop
 800944c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944e:	bc08      	pop	{r3}
 8009450:	469e      	mov	lr, r3
 8009452:	4770      	bx	lr
